import * as ct from "react";
import $u, { useState as Jp, useRef as ep, useEffect as Ja, useMemo as ty } from "react";
function ny(a) {
  return a && a.__esModule && Object.prototype.hasOwnProperty.call(a, "default") ? a.default : a;
}
var $f = { exports: {} }, nl = {};
/**
 * @license React
 * react-jsx-runtime.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var t0;
function PE() {
  if (t0) return nl;
  t0 = 1;
  var a = Symbol.for("react.transitional.element"), e = Symbol.for("react.fragment");
  function t(n, i, o) {
    var l = null;
    if (o !== void 0 && (l = "" + o), i.key !== void 0 && (l = "" + i.key), "key" in i) {
      o = {};
      for (var c in i)
        c !== "key" && (o[c] = i[c]);
    } else o = i;
    return i = o.ref, {
      $$typeof: a,
      type: n,
      key: l,
      ref: i !== void 0 ? i : null,
      props: o
    };
  }
  return nl.Fragment = e, nl.jsx = t, nl.jsxs = t, nl;
}
var n0;
function OE() {
  return n0 || (n0 = 1, $f.exports = PE()), $f.exports;
}
var pt = OE(), ed = { exports: {} }, fs = {};
/**
 * @license React
 * react-reconciler-constants.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var i0;
function IE() {
  return i0 || (i0 = 1, fs.ConcurrentRoot = 1, fs.ContinuousEventPriority = 8, fs.DefaultEventPriority = 32, fs.DiscreteEventPriority = 2, fs.IdleEventPriority = 268435456, fs.LegacyRoot = 0, fs.NoEventPriority = 0), fs;
}
var s0;
function zE() {
  return s0 || (s0 = 1, ed.exports = IE()), ed.exports;
}
var Du = zE();
/**
 * @license
 * Copyright 2010-2023 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
const eh = "160", Ga = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 }, Wa = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 }, iy = 0, tp = 1, sy = 2, BE = 3, ay = 0, th = 1, ml = 2, zi = 3, As = 0, Xn = 1, Ai = 2, HE = 2, bs = 0, Qa = 1, np = 2, ip = 3, sp = 4, ry = 5, Qs = 100, oy = 101, ly = 102, ap = 103, rp = 104, cy = 200, uy = 201, hy = 202, fy = 203, Gu = 204, Wu = 205, dy = 206, py = 207, my = 208, gy = 209, vy = 210, _y = 211, yy = 212, xy = 213, Sy = 214, My = 0, Ey = 1, by = 2, Ml = 3, Ty = 4, Ay = 5, wy = 6, Ry = 7, Xl = 0, Cy = 1, Ly = 2, Ji = 0, Qp = 1, Uy = 2, Ny = 3, $p = 4, Dy = 5, Py = 6, op = "attached", Oy = "detached", nh = 300, ws = 301, ia = 302, El = 303, bl = 304, Eo = 306, Tl = 1e3, Pn = 1001, Al = 1002, on = 1003, Xu = 1004, FE = 1004, gl = 1005, VE = 1005, ln = 1006, em = 1007, GE = 1007, sa = 1008, WE = 1008, Qi = 1009, Iy = 1010, zy = 1011, ih = 1012, tm = 1013, Ms = 1014, Hi = 1015, go = 1016, nm = 1017, im = 1018, ea = 1020, By = 1021, Wn = 1023, Hy = 1024, Fy = 1025, ta = 1026, nr = 1027, Vy = 1028, sm = 1029, Gy = 1030, am = 1031, rm = 1033, Pu = 33776, Ou = 33777, Iu = 33778, zu = 33779, lp = 35840, cp = 35841, up = 35842, hp = 35843, om = 36196, fp = 37492, dp = 37496, pp = 37808, mp = 37809, gp = 37810, vp = 37811, _p = 37812, yp = 37813, xp = 37814, Sp = 37815, Mp = 37816, Ep = 37817, bp = 37818, Tp = 37819, Ap = 37820, wp = 37821, Bu = 36492, Rp = 36494, Cp = 36495, Wy = 36283, Lp = 36284, Up = 36285, Np = 36286, Xy = 2200, ky = 2201, qy = 2202, wl = 2300, Rl = 2301, Hu = 2302, Ya = 2400, ja = 2401, Cl = 2402, sh = 2500, lm = 2501, XE = 0, kE = 1, qE = 2, cm = 3e3, na = 3001, Yy = 3200, jy = 3201, ra = 0, Zy = 1, pi = "", nn = "srgb", Vi = "srgb-linear", ah = "display-p3", kl = "display-p3-linear", Ll = "linear", Wt = "srgb", Ul = "rec709", Nl = "p3", YE = 0, Xa = 7680, jE = 7681, ZE = 7682, KE = 7683, JE = 34055, QE = 34056, $E = 5386, eb = 512, tb = 513, nb = 514, ib = 515, sb = 516, ab = 517, rb = 518, Dp = 519, Ky = 512, Jy = 513, Qy = 514, um = 515, $y = 516, ex = 517, tx = 518, nx = 519, Dl = 35044, ob = 35048, lb = 35040, cb = 35045, ub = 35049, hb = 35041, fb = 35046, db = 35050, pb = 35042, mb = "100", Pp = "300 es", ku = 1035, Fi = 2e3, vo = 2001;
let Cs = class {
  addEventListener(e, t) {
    this._listeners === void 0 && (this._listeners = {});
    const n = this._listeners;
    n[e] === void 0 && (n[e] = []), n[e].indexOf(t) === -1 && n[e].push(t);
  }
  hasEventListener(e, t) {
    if (this._listeners === void 0) return !1;
    const n = this._listeners;
    return n[e] !== void 0 && n[e].indexOf(t) !== -1;
  }
  removeEventListener(e, t) {
    if (this._listeners === void 0) return;
    const i = this._listeners[e];
    if (i !== void 0) {
      const o = i.indexOf(t);
      o !== -1 && i.splice(o, 1);
    }
  }
  dispatchEvent(e) {
    if (this._listeners === void 0) return;
    const n = this._listeners[e.type];
    if (n !== void 0) {
      e.target = this;
      const i = n.slice(0);
      for (let o = 0, l = i.length; o < l; o++)
        i[o].call(this, e);
      e.target = null;
    }
  }
};
const Un = ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0a", "0b", "0c", "0d", "0e", "0f", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "1a", "1b", "1c", "1d", "1e", "1f", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2a", "2b", "2c", "2d", "2e", "2f", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3a", "3b", "3c", "3d", "3e", "3f", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "4a", "4b", "4c", "4d", "4e", "4f", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "5a", "5b", "5c", "5d", "5e", "5f", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "6a", "6b", "6c", "6d", "6e", "6f", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "7a", "7b", "7c", "7d", "7e", "7f", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "8a", "8b", "8c", "8d", "8e", "8f", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "9a", "9b", "9c", "9d", "9e", "9f", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa", "ab", "ac", "ad", "ae", "af", "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "ba", "bb", "bc", "bd", "be", "bf", "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ca", "cb", "cc", "cd", "ce", "cf", "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "da", "db", "dc", "dd", "de", "df", "e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "e9", "ea", "eb", "ec", "ed", "ee", "ef", "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "fa", "fb", "fc", "fd", "fe", "ff"];
let a0 = 1234567;
const $a = Math.PI / 180, _o = 180 / Math.PI;
function mi() {
  const a = Math.random() * 4294967295 | 0, e = Math.random() * 4294967295 | 0, t = Math.random() * 4294967295 | 0, n = Math.random() * 4294967295 | 0;
  return (Un[a & 255] + Un[a >> 8 & 255] + Un[a >> 16 & 255] + Un[a >> 24 & 255] + "-" + Un[e & 255] + Un[e >> 8 & 255] + "-" + Un[e >> 16 & 15 | 64] + Un[e >> 24 & 255] + "-" + Un[t & 63 | 128] + Un[t >> 8 & 255] + "-" + Un[t >> 16 & 255] + Un[t >> 24 & 255] + Un[n & 255] + Un[n >> 8 & 255] + Un[n >> 16 & 255] + Un[n >> 24 & 255]).toLowerCase();
}
function sn(a, e, t) {
  return Math.max(e, Math.min(t, a));
}
function hm(a, e) {
  return (a % e + e) % e;
}
function gb(a, e, t, n, i) {
  return n + (a - e) * (i - n) / (t - e);
}
function vb(a, e, t) {
  return a !== e ? (t - a) / (e - a) : 0;
}
function vl(a, e, t) {
  return (1 - t) * a + t * e;
}
function _b(a, e, t, n) {
  return vl(a, e, 1 - Math.exp(-t * n));
}
function yb(a, e = 1) {
  return e - Math.abs(hm(a, e * 2) - e);
}
function xb(a, e, t) {
  return a <= e ? 0 : a >= t ? 1 : (a = (a - e) / (t - e), a * a * (3 - 2 * a));
}
function Sb(a, e, t) {
  return a <= e ? 0 : a >= t ? 1 : (a = (a - e) / (t - e), a * a * a * (a * (a * 6 - 15) + 10));
}
function Mb(a, e) {
  return a + Math.floor(Math.random() * (e - a + 1));
}
function Eb(a, e) {
  return a + Math.random() * (e - a);
}
function bb(a) {
  return a * (0.5 - Math.random());
}
function Tb(a) {
  a !== void 0 && (a0 = a);
  let e = a0 += 1831565813;
  return e = Math.imul(e ^ e >>> 15, e | 1), e ^= e + Math.imul(e ^ e >>> 7, e | 61), ((e ^ e >>> 14) >>> 0) / 4294967296;
}
function Ab(a) {
  return a * $a;
}
function wb(a) {
  return a * _o;
}
function Op(a) {
  return (a & a - 1) === 0 && a !== 0;
}
function Rb(a) {
  return Math.pow(2, Math.ceil(Math.log(a) / Math.LN2));
}
function qu(a) {
  return Math.pow(2, Math.floor(Math.log(a) / Math.LN2));
}
function Cb(a, e, t, n, i) {
  const o = Math.cos, l = Math.sin, c = o(t / 2), h = l(t / 2), f = o((e + n) / 2), p = l((e + n) / 2), m = o((e - n) / 2), g = l((e - n) / 2), v = o((n - e) / 2), x = l((n - e) / 2);
  switch (i) {
    case "XYX":
      a.set(c * p, h * m, h * g, c * f);
      break;
    case "YZY":
      a.set(h * g, c * p, h * m, c * f);
      break;
    case "ZXZ":
      a.set(h * m, h * g, c * p, c * f);
      break;
    case "XZX":
      a.set(c * p, h * x, h * v, c * f);
      break;
    case "YXY":
      a.set(h * v, c * p, h * x, c * f);
      break;
    case "ZYZ":
      a.set(h * x, h * v, c * p, c * f);
      break;
    default:
      console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: " + i);
  }
}
function ei(a, e) {
  switch (e.constructor) {
    case Float32Array:
      return a;
    case Uint32Array:
      return a / 4294967295;
    case Uint16Array:
      return a / 65535;
    case Uint8Array:
      return a / 255;
    case Int32Array:
      return Math.max(a / 2147483647, -1);
    case Int16Array:
      return Math.max(a / 32767, -1);
    case Int8Array:
      return Math.max(a / 127, -1);
    default:
      throw new Error("Invalid component type.");
  }
}
function _t(a, e) {
  switch (e.constructor) {
    case Float32Array:
      return a;
    case Uint32Array:
      return Math.round(a * 4294967295);
    case Uint16Array:
      return Math.round(a * 65535);
    case Uint8Array:
      return Math.round(a * 255);
    case Int32Array:
      return Math.round(a * 2147483647);
    case Int16Array:
      return Math.round(a * 32767);
    case Int8Array:
      return Math.round(a * 127);
    default:
      throw new Error("Invalid component type.");
  }
}
const Lb = {
  DEG2RAD: $a,
  RAD2DEG: _o,
  generateUUID: mi,
  clamp: sn,
  euclideanModulo: hm,
  mapLinear: gb,
  inverseLerp: vb,
  lerp: vl,
  damp: _b,
  pingpong: yb,
  smoothstep: xb,
  smootherstep: Sb,
  randInt: Mb,
  randFloat: Eb,
  randFloatSpread: bb,
  seededRandom: Tb,
  degToRad: Ab,
  radToDeg: wb,
  isPowerOfTwo: Op,
  ceilPowerOfTwo: Rb,
  floorPowerOfTwo: qu,
  setQuaternionFromProperEuler: Cb,
  normalize: _t,
  denormalize: ei
};
class de {
  constructor(e = 0, t = 0) {
    de.prototype.isVector2 = !0, this.x = e, this.y = t;
  }
  get width() {
    return this.x;
  }
  set width(e) {
    this.x = e;
  }
  get height() {
    return this.y;
  }
  set height(e) {
    this.y = e;
  }
  set(e, t) {
    return this.x = e, this.y = t, this;
  }
  setScalar(e) {
    return this.x = e, this.y = e, this;
  }
  setX(e) {
    return this.x = e, this;
  }
  setY(e) {
    return this.y = e, this;
  }
  setComponent(e, t) {
    switch (e) {
      case 0:
        this.x = t;
        break;
      case 1:
        this.y = t;
        break;
      default:
        throw new Error("index is out of range: " + e);
    }
    return this;
  }
  getComponent(e) {
    switch (e) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      default:
        throw new Error("index is out of range: " + e);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y);
  }
  copy(e) {
    return this.x = e.x, this.y = e.y, this;
  }
  add(e) {
    return this.x += e.x, this.y += e.y, this;
  }
  addScalar(e) {
    return this.x += e, this.y += e, this;
  }
  addVectors(e, t) {
    return this.x = e.x + t.x, this.y = e.y + t.y, this;
  }
  addScaledVector(e, t) {
    return this.x += e.x * t, this.y += e.y * t, this;
  }
  sub(e) {
    return this.x -= e.x, this.y -= e.y, this;
  }
  subScalar(e) {
    return this.x -= e, this.y -= e, this;
  }
  subVectors(e, t) {
    return this.x = e.x - t.x, this.y = e.y - t.y, this;
  }
  multiply(e) {
    return this.x *= e.x, this.y *= e.y, this;
  }
  multiplyScalar(e) {
    return this.x *= e, this.y *= e, this;
  }
  divide(e) {
    return this.x /= e.x, this.y /= e.y, this;
  }
  divideScalar(e) {
    return this.multiplyScalar(1 / e);
  }
  applyMatrix3(e) {
    const t = this.x, n = this.y, i = e.elements;
    return this.x = i[0] * t + i[3] * n + i[6], this.y = i[1] * t + i[4] * n + i[7], this;
  }
  min(e) {
    return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this;
  }
  max(e) {
    return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this;
  }
  clamp(e, t) {
    return this.x = Math.max(e.x, Math.min(t.x, this.x)), this.y = Math.max(e.y, Math.min(t.y, this.y)), this;
  }
  clampScalar(e, t) {
    return this.x = Math.max(e, Math.min(t, this.x)), this.y = Math.max(e, Math.min(t, this.y)), this;
  }
  clampLength(e, t) {
    const n = this.length();
    return this.divideScalar(n || 1).multiplyScalar(Math.max(e, Math.min(t, n)));
  }
  floor() {
    return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this;
  }
  ceil() {
    return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this;
  }
  round() {
    return this.x = Math.round(this.x), this.y = Math.round(this.y), this;
  }
  roundToZero() {
    return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this;
  }
  negate() {
    return this.x = -this.x, this.y = -this.y, this;
  }
  dot(e) {
    return this.x * e.x + this.y * e.y;
  }
  cross(e) {
    return this.x * e.y - this.y * e.x;
  }
  lengthSq() {
    return this.x * this.x + this.y * this.y;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  angle() {
    return Math.atan2(-this.y, -this.x) + Math.PI;
  }
  angleTo(e) {
    const t = Math.sqrt(this.lengthSq() * e.lengthSq());
    if (t === 0) return Math.PI / 2;
    const n = this.dot(e) / t;
    return Math.acos(sn(n, -1, 1));
  }
  distanceTo(e) {
    return Math.sqrt(this.distanceToSquared(e));
  }
  distanceToSquared(e) {
    const t = this.x - e.x, n = this.y - e.y;
    return t * t + n * n;
  }
  manhattanDistanceTo(e) {
    return Math.abs(this.x - e.x) + Math.abs(this.y - e.y);
  }
  setLength(e) {
    return this.normalize().multiplyScalar(e);
  }
  lerp(e, t) {
    return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this;
  }
  lerpVectors(e, t, n) {
    return this.x = e.x + (t.x - e.x) * n, this.y = e.y + (t.y - e.y) * n, this;
  }
  equals(e) {
    return e.x === this.x && e.y === this.y;
  }
  fromArray(e, t = 0) {
    return this.x = e[t], this.y = e[t + 1], this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this.x, e[t + 1] = this.y, e;
  }
  fromBufferAttribute(e, t) {
    return this.x = e.getX(t), this.y = e.getY(t), this;
  }
  rotateAround(e, t) {
    const n = Math.cos(t), i = Math.sin(t), o = this.x - e.x, l = this.y - e.y;
    return this.x = o * n - l * i + e.x, this.y = o * i + l * n + e.y, this;
  }
  random() {
    return this.x = Math.random(), this.y = Math.random(), this;
  }
  *[Symbol.iterator]() {
    yield this.x, yield this.y;
  }
}
class yt {
  constructor(e, t, n, i, o, l, c, h, f) {
    yt.prototype.isMatrix3 = !0, this.elements = [
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1
    ], e !== void 0 && this.set(e, t, n, i, o, l, c, h, f);
  }
  set(e, t, n, i, o, l, c, h, f) {
    const p = this.elements;
    return p[0] = e, p[1] = i, p[2] = c, p[3] = t, p[4] = o, p[5] = h, p[6] = n, p[7] = l, p[8] = f, this;
  }
  identity() {
    return this.set(
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1
    ), this;
  }
  copy(e) {
    const t = this.elements, n = e.elements;
    return t[0] = n[0], t[1] = n[1], t[2] = n[2], t[3] = n[3], t[4] = n[4], t[5] = n[5], t[6] = n[6], t[7] = n[7], t[8] = n[8], this;
  }
  extractBasis(e, t, n) {
    return e.setFromMatrix3Column(this, 0), t.setFromMatrix3Column(this, 1), n.setFromMatrix3Column(this, 2), this;
  }
  setFromMatrix4(e) {
    const t = e.elements;
    return this.set(
      t[0],
      t[4],
      t[8],
      t[1],
      t[5],
      t[9],
      t[2],
      t[6],
      t[10]
    ), this;
  }
  multiply(e) {
    return this.multiplyMatrices(this, e);
  }
  premultiply(e) {
    return this.multiplyMatrices(e, this);
  }
  multiplyMatrices(e, t) {
    const n = e.elements, i = t.elements, o = this.elements, l = n[0], c = n[3], h = n[6], f = n[1], p = n[4], m = n[7], g = n[2], v = n[5], x = n[8], E = i[0], S = i[3], y = i[6], T = i[1], b = i[4], A = i[7], N = i[2], R = i[5], P = i[8];
    return o[0] = l * E + c * T + h * N, o[3] = l * S + c * b + h * R, o[6] = l * y + c * A + h * P, o[1] = f * E + p * T + m * N, o[4] = f * S + p * b + m * R, o[7] = f * y + p * A + m * P, o[2] = g * E + v * T + x * N, o[5] = g * S + v * b + x * R, o[8] = g * y + v * A + x * P, this;
  }
  multiplyScalar(e) {
    const t = this.elements;
    return t[0] *= e, t[3] *= e, t[6] *= e, t[1] *= e, t[4] *= e, t[7] *= e, t[2] *= e, t[5] *= e, t[8] *= e, this;
  }
  determinant() {
    const e = this.elements, t = e[0], n = e[1], i = e[2], o = e[3], l = e[4], c = e[5], h = e[6], f = e[7], p = e[8];
    return t * l * p - t * c * f - n * o * p + n * c * h + i * o * f - i * l * h;
  }
  invert() {
    const e = this.elements, t = e[0], n = e[1], i = e[2], o = e[3], l = e[4], c = e[5], h = e[6], f = e[7], p = e[8], m = p * l - c * f, g = c * h - p * o, v = f * o - l * h, x = t * m + n * g + i * v;
    if (x === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
    const E = 1 / x;
    return e[0] = m * E, e[1] = (i * f - p * n) * E, e[2] = (c * n - i * l) * E, e[3] = g * E, e[4] = (p * t - i * h) * E, e[5] = (i * o - c * t) * E, e[6] = v * E, e[7] = (n * h - f * t) * E, e[8] = (l * t - n * o) * E, this;
  }
  transpose() {
    let e;
    const t = this.elements;
    return e = t[1], t[1] = t[3], t[3] = e, e = t[2], t[2] = t[6], t[6] = e, e = t[5], t[5] = t[7], t[7] = e, this;
  }
  getNormalMatrix(e) {
    return this.setFromMatrix4(e).invert().transpose();
  }
  transposeIntoArray(e) {
    const t = this.elements;
    return e[0] = t[0], e[1] = t[3], e[2] = t[6], e[3] = t[1], e[4] = t[4], e[5] = t[7], e[6] = t[2], e[7] = t[5], e[8] = t[8], this;
  }
  setUvTransform(e, t, n, i, o, l, c) {
    const h = Math.cos(o), f = Math.sin(o);
    return this.set(
      n * h,
      n * f,
      -n * (h * l + f * c) + l + e,
      -i * f,
      i * h,
      -i * (-f * l + h * c) + c + t,
      0,
      0,
      1
    ), this;
  }
  //
  scale(e, t) {
    return this.premultiply(td.makeScale(e, t)), this;
  }
  rotate(e) {
    return this.premultiply(td.makeRotation(-e)), this;
  }
  translate(e, t) {
    return this.premultiply(td.makeTranslation(e, t)), this;
  }
  // for 2D Transforms
  makeTranslation(e, t) {
    return e.isVector2 ? this.set(
      1,
      0,
      e.x,
      0,
      1,
      e.y,
      0,
      0,
      1
    ) : this.set(
      1,
      0,
      e,
      0,
      1,
      t,
      0,
      0,
      1
    ), this;
  }
  makeRotation(e) {
    const t = Math.cos(e), n = Math.sin(e);
    return this.set(
      t,
      -n,
      0,
      n,
      t,
      0,
      0,
      0,
      1
    ), this;
  }
  makeScale(e, t) {
    return this.set(
      e,
      0,
      0,
      0,
      t,
      0,
      0,
      0,
      1
    ), this;
  }
  //
  equals(e) {
    const t = this.elements, n = e.elements;
    for (let i = 0; i < 9; i++)
      if (t[i] !== n[i]) return !1;
    return !0;
  }
  fromArray(e, t = 0) {
    for (let n = 0; n < 9; n++)
      this.elements[n] = e[n + t];
    return this;
  }
  toArray(e = [], t = 0) {
    const n = this.elements;
    return e[t] = n[0], e[t + 1] = n[1], e[t + 2] = n[2], e[t + 3] = n[3], e[t + 4] = n[4], e[t + 5] = n[5], e[t + 6] = n[6], e[t + 7] = n[7], e[t + 8] = n[8], e;
  }
  clone() {
    return new this.constructor().fromArray(this.elements);
  }
}
const td = /* @__PURE__ */ new yt();
function ix(a) {
  for (let e = a.length - 1; e >= 0; --e)
    if (a[e] >= 65535) return !0;
  return !1;
}
const Ub = {
  Int8Array,
  Uint8Array,
  Uint8ClampedArray,
  Int16Array,
  Uint16Array,
  Int32Array,
  Uint32Array,
  Float32Array,
  Float64Array
};
function co(a, e) {
  return new Ub[a](e);
}
function Pl(a) {
  return document.createElementNS("http://www.w3.org/1999/xhtml", a);
}
function sx() {
  const a = Pl("canvas");
  return a.style.display = "block", a;
}
const r0 = {};
function _l(a) {
  a in r0 || (r0[a] = !0, console.warn(a));
}
const o0 = /* @__PURE__ */ new yt().set(
  0.8224621,
  0.177538,
  0,
  0.0331941,
  0.9668058,
  0,
  0.0170827,
  0.0723974,
  0.9105199
), l0 = /* @__PURE__ */ new yt().set(
  1.2249401,
  -0.2249404,
  0,
  -0.0420569,
  1.0420571,
  0,
  -0.0196376,
  -0.0786361,
  1.0982735
), zc = {
  [Vi]: {
    transfer: Ll,
    primaries: Ul,
    toReference: (a) => a,
    fromReference: (a) => a
  },
  [nn]: {
    transfer: Wt,
    primaries: Ul,
    toReference: (a) => a.convertSRGBToLinear(),
    fromReference: (a) => a.convertLinearToSRGB()
  },
  [kl]: {
    transfer: Ll,
    primaries: Nl,
    toReference: (a) => a.applyMatrix3(l0),
    fromReference: (a) => a.applyMatrix3(o0)
  },
  [ah]: {
    transfer: Wt,
    primaries: Nl,
    toReference: (a) => a.convertSRGBToLinear().applyMatrix3(l0),
    fromReference: (a) => a.applyMatrix3(o0).convertLinearToSRGB()
  }
}, Nb = /* @__PURE__ */ new Set([Vi, kl]), Dt = {
  enabled: !0,
  _workingColorSpace: Vi,
  get workingColorSpace() {
    return this._workingColorSpace;
  },
  set workingColorSpace(a) {
    if (!Nb.has(a))
      throw new Error(`Unsupported working color space, "${a}".`);
    this._workingColorSpace = a;
  },
  convert: function(a, e, t) {
    if (this.enabled === !1 || e === t || !e || !t)
      return a;
    const n = zc[e].toReference, i = zc[t].fromReference;
    return i(n(a));
  },
  fromWorkingColorSpace: function(a, e) {
    return this.convert(a, this._workingColorSpace, e);
  },
  toWorkingColorSpace: function(a, e) {
    return this.convert(a, e, this._workingColorSpace);
  },
  getPrimaries: function(a) {
    return zc[a].primaries;
  },
  getTransfer: function(a) {
    return a === pi ? Ll : zc[a].transfer;
  }
};
function mo(a) {
  return a < 0.04045 ? a * 0.0773993808 : Math.pow(a * 0.9478672986 + 0.0521327014, 2.4);
}
function nd(a) {
  return a < 31308e-7 ? a * 12.92 : 1.055 * Math.pow(a, 0.41666) - 0.055;
}
let Hr;
class fm {
  static getDataURL(e) {
    if (/^data:/i.test(e.src) || typeof HTMLCanvasElement > "u")
      return e.src;
    let t;
    if (e instanceof HTMLCanvasElement)
      t = e;
    else {
      Hr === void 0 && (Hr = Pl("canvas")), Hr.width = e.width, Hr.height = e.height;
      const n = Hr.getContext("2d");
      e instanceof ImageData ? n.putImageData(e, 0, 0) : n.drawImage(e, 0, 0, e.width, e.height), t = Hr;
    }
    return t.width > 2048 || t.height > 2048 ? (console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons", e), t.toDataURL("image/jpeg", 0.6)) : t.toDataURL("image/png");
  }
  static sRGBToLinear(e) {
    if (typeof HTMLImageElement < "u" && e instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && e instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && e instanceof ImageBitmap) {
      const t = Pl("canvas");
      t.width = e.width, t.height = e.height;
      const n = t.getContext("2d");
      n.drawImage(e, 0, 0, e.width, e.height);
      const i = n.getImageData(0, 0, e.width, e.height), o = i.data;
      for (let l = 0; l < o.length; l++)
        o[l] = mo(o[l] / 255) * 255;
      return n.putImageData(i, 0, 0), t;
    } else if (e.data) {
      const t = e.data.slice(0);
      for (let n = 0; n < t.length; n++)
        t instanceof Uint8Array || t instanceof Uint8ClampedArray ? t[n] = Math.floor(mo(t[n] / 255) * 255) : t[n] = mo(t[n]);
      return {
        data: t,
        width: e.width,
        height: e.height
      };
    } else
      return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."), e;
  }
}
let Db = 0;
class Za {
  constructor(e = null) {
    this.isSource = !0, Object.defineProperty(this, "id", { value: Db++ }), this.uuid = mi(), this.data = e, this.version = 0;
  }
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
  toJSON(e) {
    const t = e === void 0 || typeof e == "string";
    if (!t && e.images[this.uuid] !== void 0)
      return e.images[this.uuid];
    const n = {
      uuid: this.uuid,
      url: ""
    }, i = this.data;
    if (i !== null) {
      let o;
      if (Array.isArray(i)) {
        o = [];
        for (let l = 0, c = i.length; l < c; l++)
          i[l].isDataTexture ? o.push(id(i[l].image)) : o.push(id(i[l]));
      } else
        o = id(i);
      n.url = o;
    }
    return t || (e.images[this.uuid] = n), n;
  }
}
function id(a) {
  return typeof HTMLImageElement < "u" && a instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && a instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && a instanceof ImageBitmap ? fm.getDataURL(a) : a.data ? {
    data: Array.from(a.data),
    width: a.width,
    height: a.height,
    type: a.data.constructor.name
  } : (console.warn("THREE.Texture: Unable to serialize Texture."), {});
}
let Pb = 0;
class un extends Cs {
  constructor(e = un.DEFAULT_IMAGE, t = un.DEFAULT_MAPPING, n = Pn, i = Pn, o = ln, l = sa, c = Wn, h = Qi, f = un.DEFAULT_ANISOTROPY, p = pi) {
    super(), this.isTexture = !0, Object.defineProperty(this, "id", { value: Pb++ }), this.uuid = mi(), this.name = "", this.source = new Za(e), this.mipmaps = [], this.mapping = t, this.channel = 0, this.wrapS = n, this.wrapT = i, this.magFilter = o, this.minFilter = l, this.anisotropy = f, this.format = c, this.internalFormat = null, this.type = h, this.offset = new de(0, 0), this.repeat = new de(1, 1), this.center = new de(0, 0), this.rotation = 0, this.matrixAutoUpdate = !0, this.matrix = new yt(), this.generateMipmaps = !0, this.premultiplyAlpha = !1, this.flipY = !0, this.unpackAlignment = 4, typeof p == "string" ? this.colorSpace = p : (_l("THREE.Texture: Property .encoding has been replaced by .colorSpace."), this.colorSpace = p === na ? nn : pi), this.userData = {}, this.version = 0, this.onUpdate = null, this.isRenderTargetTexture = !1, this.needsPMREMUpdate = !1;
  }
  get image() {
    return this.source.data;
  }
  set image(e = null) {
    this.source.data = e;
  }
  updateMatrix() {
    this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    return this.name = e.name, this.source = e.source, this.mipmaps = e.mipmaps.slice(0), this.mapping = e.mapping, this.channel = e.channel, this.wrapS = e.wrapS, this.wrapT = e.wrapT, this.magFilter = e.magFilter, this.minFilter = e.minFilter, this.anisotropy = e.anisotropy, this.format = e.format, this.internalFormat = e.internalFormat, this.type = e.type, this.offset.copy(e.offset), this.repeat.copy(e.repeat), this.center.copy(e.center), this.rotation = e.rotation, this.matrixAutoUpdate = e.matrixAutoUpdate, this.matrix.copy(e.matrix), this.generateMipmaps = e.generateMipmaps, this.premultiplyAlpha = e.premultiplyAlpha, this.flipY = e.flipY, this.unpackAlignment = e.unpackAlignment, this.colorSpace = e.colorSpace, this.userData = JSON.parse(JSON.stringify(e.userData)), this.needsUpdate = !0, this;
  }
  toJSON(e) {
    const t = e === void 0 || typeof e == "string";
    if (!t && e.textures[this.uuid] !== void 0)
      return e.textures[this.uuid];
    const n = {
      metadata: {
        version: 4.6,
        type: "Texture",
        generator: "Texture.toJSON"
      },
      uuid: this.uuid,
      name: this.name,
      image: this.source.toJSON(e).uuid,
      mapping: this.mapping,
      channel: this.channel,
      repeat: [this.repeat.x, this.repeat.y],
      offset: [this.offset.x, this.offset.y],
      center: [this.center.x, this.center.y],
      rotation: this.rotation,
      wrap: [this.wrapS, this.wrapT],
      format: this.format,
      internalFormat: this.internalFormat,
      type: this.type,
      colorSpace: this.colorSpace,
      minFilter: this.minFilter,
      magFilter: this.magFilter,
      anisotropy: this.anisotropy,
      flipY: this.flipY,
      generateMipmaps: this.generateMipmaps,
      premultiplyAlpha: this.premultiplyAlpha,
      unpackAlignment: this.unpackAlignment
    };
    return Object.keys(this.userData).length > 0 && (n.userData = this.userData), t || (e.textures[this.uuid] = n), n;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
  transformUv(e) {
    if (this.mapping !== nh) return e;
    if (e.applyMatrix3(this.matrix), e.x < 0 || e.x > 1)
      switch (this.wrapS) {
        case Tl:
          e.x = e.x - Math.floor(e.x);
          break;
        case Pn:
          e.x = e.x < 0 ? 0 : 1;
          break;
        case Al:
          Math.abs(Math.floor(e.x) % 2) === 1 ? e.x = Math.ceil(e.x) - e.x : e.x = e.x - Math.floor(e.x);
          break;
      }
    if (e.y < 0 || e.y > 1)
      switch (this.wrapT) {
        case Tl:
          e.y = e.y - Math.floor(e.y);
          break;
        case Pn:
          e.y = e.y < 0 ? 0 : 1;
          break;
        case Al:
          Math.abs(Math.floor(e.y) % 2) === 1 ? e.y = Math.ceil(e.y) - e.y : e.y = e.y - Math.floor(e.y);
          break;
      }
    return this.flipY && (e.y = 1 - e.y), e;
  }
  set needsUpdate(e) {
    e === !0 && (this.version++, this.source.needsUpdate = !0);
  }
  get encoding() {
    return _l("THREE.Texture: Property .encoding has been replaced by .colorSpace."), this.colorSpace === nn ? na : cm;
  }
  set encoding(e) {
    _l("THREE.Texture: Property .encoding has been replaced by .colorSpace."), this.colorSpace = e === na ? nn : pi;
  }
}
un.DEFAULT_IMAGE = null;
un.DEFAULT_MAPPING = nh;
un.DEFAULT_ANISOTROPY = 1;
class It {
  constructor(e = 0, t = 0, n = 0, i = 1) {
    It.prototype.isVector4 = !0, this.x = e, this.y = t, this.z = n, this.w = i;
  }
  get width() {
    return this.z;
  }
  set width(e) {
    this.z = e;
  }
  get height() {
    return this.w;
  }
  set height(e) {
    this.w = e;
  }
  set(e, t, n, i) {
    return this.x = e, this.y = t, this.z = n, this.w = i, this;
  }
  setScalar(e) {
    return this.x = e, this.y = e, this.z = e, this.w = e, this;
  }
  setX(e) {
    return this.x = e, this;
  }
  setY(e) {
    return this.y = e, this;
  }
  setZ(e) {
    return this.z = e, this;
  }
  setW(e) {
    return this.w = e, this;
  }
  setComponent(e, t) {
    switch (e) {
      case 0:
        this.x = t;
        break;
      case 1:
        this.y = t;
        break;
      case 2:
        this.z = t;
        break;
      case 3:
        this.w = t;
        break;
      default:
        throw new Error("index is out of range: " + e);
    }
    return this;
  }
  getComponent(e) {
    switch (e) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      case 3:
        return this.w;
      default:
        throw new Error("index is out of range: " + e);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y, this.z, this.w);
  }
  copy(e) {
    return this.x = e.x, this.y = e.y, this.z = e.z, this.w = e.w !== void 0 ? e.w : 1, this;
  }
  add(e) {
    return this.x += e.x, this.y += e.y, this.z += e.z, this.w += e.w, this;
  }
  addScalar(e) {
    return this.x += e, this.y += e, this.z += e, this.w += e, this;
  }
  addVectors(e, t) {
    return this.x = e.x + t.x, this.y = e.y + t.y, this.z = e.z + t.z, this.w = e.w + t.w, this;
  }
  addScaledVector(e, t) {
    return this.x += e.x * t, this.y += e.y * t, this.z += e.z * t, this.w += e.w * t, this;
  }
  sub(e) {
    return this.x -= e.x, this.y -= e.y, this.z -= e.z, this.w -= e.w, this;
  }
  subScalar(e) {
    return this.x -= e, this.y -= e, this.z -= e, this.w -= e, this;
  }
  subVectors(e, t) {
    return this.x = e.x - t.x, this.y = e.y - t.y, this.z = e.z - t.z, this.w = e.w - t.w, this;
  }
  multiply(e) {
    return this.x *= e.x, this.y *= e.y, this.z *= e.z, this.w *= e.w, this;
  }
  multiplyScalar(e) {
    return this.x *= e, this.y *= e, this.z *= e, this.w *= e, this;
  }
  applyMatrix4(e) {
    const t = this.x, n = this.y, i = this.z, o = this.w, l = e.elements;
    return this.x = l[0] * t + l[4] * n + l[8] * i + l[12] * o, this.y = l[1] * t + l[5] * n + l[9] * i + l[13] * o, this.z = l[2] * t + l[6] * n + l[10] * i + l[14] * o, this.w = l[3] * t + l[7] * n + l[11] * i + l[15] * o, this;
  }
  divideScalar(e) {
    return this.multiplyScalar(1 / e);
  }
  setAxisAngleFromQuaternion(e) {
    this.w = 2 * Math.acos(e.w);
    const t = Math.sqrt(1 - e.w * e.w);
    return t < 1e-4 ? (this.x = 1, this.y = 0, this.z = 0) : (this.x = e.x / t, this.y = e.y / t, this.z = e.z / t), this;
  }
  setAxisAngleFromRotationMatrix(e) {
    let t, n, i, o;
    const h = e.elements, f = h[0], p = h[4], m = h[8], g = h[1], v = h[5], x = h[9], E = h[2], S = h[6], y = h[10];
    if (Math.abs(p - g) < 0.01 && Math.abs(m - E) < 0.01 && Math.abs(x - S) < 0.01) {
      if (Math.abs(p + g) < 0.1 && Math.abs(m + E) < 0.1 && Math.abs(x + S) < 0.1 && Math.abs(f + v + y - 3) < 0.1)
        return this.set(1, 0, 0, 0), this;
      t = Math.PI;
      const b = (f + 1) / 2, A = (v + 1) / 2, N = (y + 1) / 2, R = (p + g) / 4, P = (m + E) / 4, H = (x + S) / 4;
      return b > A && b > N ? b < 0.01 ? (n = 0, i = 0.707106781, o = 0.707106781) : (n = Math.sqrt(b), i = R / n, o = P / n) : A > N ? A < 0.01 ? (n = 0.707106781, i = 0, o = 0.707106781) : (i = Math.sqrt(A), n = R / i, o = H / i) : N < 0.01 ? (n = 0.707106781, i = 0.707106781, o = 0) : (o = Math.sqrt(N), n = P / o, i = H / o), this.set(n, i, o, t), this;
    }
    let T = Math.sqrt((S - x) * (S - x) + (m - E) * (m - E) + (g - p) * (g - p));
    return Math.abs(T) < 1e-3 && (T = 1), this.x = (S - x) / T, this.y = (m - E) / T, this.z = (g - p) / T, this.w = Math.acos((f + v + y - 1) / 2), this;
  }
  min(e) {
    return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this.z = Math.min(this.z, e.z), this.w = Math.min(this.w, e.w), this;
  }
  max(e) {
    return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this.z = Math.max(this.z, e.z), this.w = Math.max(this.w, e.w), this;
  }
  clamp(e, t) {
    return this.x = Math.max(e.x, Math.min(t.x, this.x)), this.y = Math.max(e.y, Math.min(t.y, this.y)), this.z = Math.max(e.z, Math.min(t.z, this.z)), this.w = Math.max(e.w, Math.min(t.w, this.w)), this;
  }
  clampScalar(e, t) {
    return this.x = Math.max(e, Math.min(t, this.x)), this.y = Math.max(e, Math.min(t, this.y)), this.z = Math.max(e, Math.min(t, this.z)), this.w = Math.max(e, Math.min(t, this.w)), this;
  }
  clampLength(e, t) {
    const n = this.length();
    return this.divideScalar(n || 1).multiplyScalar(Math.max(e, Math.min(t, n)));
  }
  floor() {
    return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this.w = Math.floor(this.w), this;
  }
  ceil() {
    return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this.w = Math.ceil(this.w), this;
  }
  round() {
    return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this.w = Math.round(this.w), this;
  }
  roundToZero() {
    return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this.z = Math.trunc(this.z), this.w = Math.trunc(this.w), this;
  }
  negate() {
    return this.x = -this.x, this.y = -this.y, this.z = -this.z, this.w = -this.w, this;
  }
  dot(e) {
    return this.x * e.x + this.y * e.y + this.z * e.z + this.w * e.w;
  }
  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  setLength(e) {
    return this.normalize().multiplyScalar(e);
  }
  lerp(e, t) {
    return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this.z += (e.z - this.z) * t, this.w += (e.w - this.w) * t, this;
  }
  lerpVectors(e, t, n) {
    return this.x = e.x + (t.x - e.x) * n, this.y = e.y + (t.y - e.y) * n, this.z = e.z + (t.z - e.z) * n, this.w = e.w + (t.w - e.w) * n, this;
  }
  equals(e) {
    return e.x === this.x && e.y === this.y && e.z === this.z && e.w === this.w;
  }
  fromArray(e, t = 0) {
    return this.x = e[t], this.y = e[t + 1], this.z = e[t + 2], this.w = e[t + 3], this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this.x, e[t + 1] = this.y, e[t + 2] = this.z, e[t + 3] = this.w, e;
  }
  fromBufferAttribute(e, t) {
    return this.x = e.getX(t), this.y = e.getY(t), this.z = e.getZ(t), this.w = e.getW(t), this;
  }
  random() {
    return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this.w = Math.random(), this;
  }
  *[Symbol.iterator]() {
    yield this.x, yield this.y, yield this.z, yield this.w;
  }
}
class ax extends Cs {
  constructor(e = 1, t = 1, n = {}) {
    super(), this.isRenderTarget = !0, this.width = e, this.height = t, this.depth = 1, this.scissor = new It(0, 0, e, t), this.scissorTest = !1, this.viewport = new It(0, 0, e, t);
    const i = { width: e, height: t, depth: 1 };
    n.encoding !== void 0 && (_l("THREE.WebGLRenderTarget: option.encoding has been replaced by option.colorSpace."), n.colorSpace = n.encoding === na ? nn : pi), n = Object.assign({
      generateMipmaps: !1,
      internalFormat: null,
      minFilter: ln,
      depthBuffer: !0,
      stencilBuffer: !1,
      depthTexture: null,
      samples: 0
    }, n), this.texture = new un(i, n.mapping, n.wrapS, n.wrapT, n.magFilter, n.minFilter, n.format, n.type, n.anisotropy, n.colorSpace), this.texture.isRenderTargetTexture = !0, this.texture.flipY = !1, this.texture.generateMipmaps = n.generateMipmaps, this.texture.internalFormat = n.internalFormat, this.depthBuffer = n.depthBuffer, this.stencilBuffer = n.stencilBuffer, this.depthTexture = n.depthTexture, this.samples = n.samples;
  }
  setSize(e, t, n = 1) {
    (this.width !== e || this.height !== t || this.depth !== n) && (this.width = e, this.height = t, this.depth = n, this.texture.image.width = e, this.texture.image.height = t, this.texture.image.depth = n, this.dispose()), this.viewport.set(0, 0, e, t), this.scissor.set(0, 0, e, t);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    this.width = e.width, this.height = e.height, this.depth = e.depth, this.scissor.copy(e.scissor), this.scissorTest = e.scissorTest, this.viewport.copy(e.viewport), this.texture = e.texture.clone(), this.texture.isRenderTargetTexture = !0;
    const t = Object.assign({}, e.texture.image);
    return this.texture.source = new Za(t), this.depthBuffer = e.depthBuffer, this.stencilBuffer = e.stencilBuffer, e.depthTexture !== null && (this.depthTexture = e.depthTexture.clone()), this.samples = e.samples, this;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
}
class wi extends ax {
  constructor(e = 1, t = 1, n = {}) {
    super(e, t, n), this.isWebGLRenderTarget = !0;
  }
}
class rh extends un {
  constructor(e = null, t = 1, n = 1, i = 1) {
    super(null), this.isDataArrayTexture = !0, this.image = { data: e, width: t, height: n, depth: i }, this.magFilter = on, this.minFilter = on, this.wrapR = Pn, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1;
  }
}
class Ob extends wi {
  constructor(e = 1, t = 1, n = 1, i = {}) {
    super(e, t, i), this.isWebGLArrayRenderTarget = !0, this.depth = n, this.texture = new rh(null, e, t, n), this.texture.isRenderTargetTexture = !0;
  }
}
class dm extends un {
  constructor(e = null, t = 1, n = 1, i = 1) {
    super(null), this.isData3DTexture = !0, this.image = { data: e, width: t, height: n, depth: i }, this.magFilter = on, this.minFilter = on, this.wrapR = Pn, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1;
  }
}
class Ib extends wi {
  constructor(e = 1, t = 1, n = 1, i = {}) {
    super(e, t, i), this.isWebGL3DRenderTarget = !0, this.depth = n, this.texture = new dm(null, e, t, n), this.texture.isRenderTargetTexture = !0;
  }
}
class zb extends wi {
  constructor(e = 1, t = 1, n = 1, i = {}) {
    super(e, t, i), this.isWebGLMultipleRenderTargets = !0;
    const o = this.texture;
    this.texture = [];
    for (let l = 0; l < n; l++)
      this.texture[l] = o.clone(), this.texture[l].isRenderTargetTexture = !0;
  }
  setSize(e, t, n = 1) {
    if (this.width !== e || this.height !== t || this.depth !== n) {
      this.width = e, this.height = t, this.depth = n;
      for (let i = 0, o = this.texture.length; i < o; i++)
        this.texture[i].image.width = e, this.texture[i].image.height = t, this.texture[i].image.depth = n;
      this.dispose();
    }
    this.viewport.set(0, 0, e, t), this.scissor.set(0, 0, e, t);
  }
  copy(e) {
    this.dispose(), this.width = e.width, this.height = e.height, this.depth = e.depth, this.scissor.copy(e.scissor), this.scissorTest = e.scissorTest, this.viewport.copy(e.viewport), this.depthBuffer = e.depthBuffer, this.stencilBuffer = e.stencilBuffer, e.depthTexture !== null && (this.depthTexture = e.depthTexture.clone()), this.texture.length = 0;
    for (let t = 0, n = e.texture.length; t < n; t++)
      this.texture[t] = e.texture[t].clone(), this.texture[t].isRenderTargetTexture = !0;
    return this;
  }
}
class On {
  constructor(e = 0, t = 0, n = 0, i = 1) {
    this.isQuaternion = !0, this._x = e, this._y = t, this._z = n, this._w = i;
  }
  static slerpFlat(e, t, n, i, o, l, c) {
    let h = n[i + 0], f = n[i + 1], p = n[i + 2], m = n[i + 3];
    const g = o[l + 0], v = o[l + 1], x = o[l + 2], E = o[l + 3];
    if (c === 0) {
      e[t + 0] = h, e[t + 1] = f, e[t + 2] = p, e[t + 3] = m;
      return;
    }
    if (c === 1) {
      e[t + 0] = g, e[t + 1] = v, e[t + 2] = x, e[t + 3] = E;
      return;
    }
    if (m !== E || h !== g || f !== v || p !== x) {
      let S = 1 - c;
      const y = h * g + f * v + p * x + m * E, T = y >= 0 ? 1 : -1, b = 1 - y * y;
      if (b > Number.EPSILON) {
        const N = Math.sqrt(b), R = Math.atan2(N, y * T);
        S = Math.sin(S * R) / N, c = Math.sin(c * R) / N;
      }
      const A = c * T;
      if (h = h * S + g * A, f = f * S + v * A, p = p * S + x * A, m = m * S + E * A, S === 1 - c) {
        const N = 1 / Math.sqrt(h * h + f * f + p * p + m * m);
        h *= N, f *= N, p *= N, m *= N;
      }
    }
    e[t] = h, e[t + 1] = f, e[t + 2] = p, e[t + 3] = m;
  }
  static multiplyQuaternionsFlat(e, t, n, i, o, l) {
    const c = n[i], h = n[i + 1], f = n[i + 2], p = n[i + 3], m = o[l], g = o[l + 1], v = o[l + 2], x = o[l + 3];
    return e[t] = c * x + p * m + h * v - f * g, e[t + 1] = h * x + p * g + f * m - c * v, e[t + 2] = f * x + p * v + c * g - h * m, e[t + 3] = p * x - c * m - h * g - f * v, e;
  }
  get x() {
    return this._x;
  }
  set x(e) {
    this._x = e, this._onChangeCallback();
  }
  get y() {
    return this._y;
  }
  set y(e) {
    this._y = e, this._onChangeCallback();
  }
  get z() {
    return this._z;
  }
  set z(e) {
    this._z = e, this._onChangeCallback();
  }
  get w() {
    return this._w;
  }
  set w(e) {
    this._w = e, this._onChangeCallback();
  }
  set(e, t, n, i) {
    return this._x = e, this._y = t, this._z = n, this._w = i, this._onChangeCallback(), this;
  }
  clone() {
    return new this.constructor(this._x, this._y, this._z, this._w);
  }
  copy(e) {
    return this._x = e.x, this._y = e.y, this._z = e.z, this._w = e.w, this._onChangeCallback(), this;
  }
  setFromEuler(e, t = !0) {
    const n = e._x, i = e._y, o = e._z, l = e._order, c = Math.cos, h = Math.sin, f = c(n / 2), p = c(i / 2), m = c(o / 2), g = h(n / 2), v = h(i / 2), x = h(o / 2);
    switch (l) {
      case "XYZ":
        this._x = g * p * m + f * v * x, this._y = f * v * m - g * p * x, this._z = f * p * x + g * v * m, this._w = f * p * m - g * v * x;
        break;
      case "YXZ":
        this._x = g * p * m + f * v * x, this._y = f * v * m - g * p * x, this._z = f * p * x - g * v * m, this._w = f * p * m + g * v * x;
        break;
      case "ZXY":
        this._x = g * p * m - f * v * x, this._y = f * v * m + g * p * x, this._z = f * p * x + g * v * m, this._w = f * p * m - g * v * x;
        break;
      case "ZYX":
        this._x = g * p * m - f * v * x, this._y = f * v * m + g * p * x, this._z = f * p * x - g * v * m, this._w = f * p * m + g * v * x;
        break;
      case "YZX":
        this._x = g * p * m + f * v * x, this._y = f * v * m + g * p * x, this._z = f * p * x - g * v * m, this._w = f * p * m - g * v * x;
        break;
      case "XZY":
        this._x = g * p * m - f * v * x, this._y = f * v * m - g * p * x, this._z = f * p * x + g * v * m, this._w = f * p * m + g * v * x;
        break;
      default:
        console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + l);
    }
    return t === !0 && this._onChangeCallback(), this;
  }
  setFromAxisAngle(e, t) {
    const n = t / 2, i = Math.sin(n);
    return this._x = e.x * i, this._y = e.y * i, this._z = e.z * i, this._w = Math.cos(n), this._onChangeCallback(), this;
  }
  setFromRotationMatrix(e) {
    const t = e.elements, n = t[0], i = t[4], o = t[8], l = t[1], c = t[5], h = t[9], f = t[2], p = t[6], m = t[10], g = n + c + m;
    if (g > 0) {
      const v = 0.5 / Math.sqrt(g + 1);
      this._w = 0.25 / v, this._x = (p - h) * v, this._y = (o - f) * v, this._z = (l - i) * v;
    } else if (n > c && n > m) {
      const v = 2 * Math.sqrt(1 + n - c - m);
      this._w = (p - h) / v, this._x = 0.25 * v, this._y = (i + l) / v, this._z = (o + f) / v;
    } else if (c > m) {
      const v = 2 * Math.sqrt(1 + c - n - m);
      this._w = (o - f) / v, this._x = (i + l) / v, this._y = 0.25 * v, this._z = (h + p) / v;
    } else {
      const v = 2 * Math.sqrt(1 + m - n - c);
      this._w = (l - i) / v, this._x = (o + f) / v, this._y = (h + p) / v, this._z = 0.25 * v;
    }
    return this._onChangeCallback(), this;
  }
  setFromUnitVectors(e, t) {
    let n = e.dot(t) + 1;
    return n < Number.EPSILON ? (n = 0, Math.abs(e.x) > Math.abs(e.z) ? (this._x = -e.y, this._y = e.x, this._z = 0, this._w = n) : (this._x = 0, this._y = -e.z, this._z = e.y, this._w = n)) : (this._x = e.y * t.z - e.z * t.y, this._y = e.z * t.x - e.x * t.z, this._z = e.x * t.y - e.y * t.x, this._w = n), this.normalize();
  }
  angleTo(e) {
    return 2 * Math.acos(Math.abs(sn(this.dot(e), -1, 1)));
  }
  rotateTowards(e, t) {
    const n = this.angleTo(e);
    if (n === 0) return this;
    const i = Math.min(1, t / n);
    return this.slerp(e, i), this;
  }
  identity() {
    return this.set(0, 0, 0, 1);
  }
  invert() {
    return this.conjugate();
  }
  conjugate() {
    return this._x *= -1, this._y *= -1, this._z *= -1, this._onChangeCallback(), this;
  }
  dot(e) {
    return this._x * e._x + this._y * e._y + this._z * e._z + this._w * e._w;
  }
  lengthSq() {
    return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
  }
  length() {
    return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
  }
  normalize() {
    let e = this.length();
    return e === 0 ? (this._x = 0, this._y = 0, this._z = 0, this._w = 1) : (e = 1 / e, this._x = this._x * e, this._y = this._y * e, this._z = this._z * e, this._w = this._w * e), this._onChangeCallback(), this;
  }
  multiply(e) {
    return this.multiplyQuaternions(this, e);
  }
  premultiply(e) {
    return this.multiplyQuaternions(e, this);
  }
  multiplyQuaternions(e, t) {
    const n = e._x, i = e._y, o = e._z, l = e._w, c = t._x, h = t._y, f = t._z, p = t._w;
    return this._x = n * p + l * c + i * f - o * h, this._y = i * p + l * h + o * c - n * f, this._z = o * p + l * f + n * h - i * c, this._w = l * p - n * c - i * h - o * f, this._onChangeCallback(), this;
  }
  slerp(e, t) {
    if (t === 0) return this;
    if (t === 1) return this.copy(e);
    const n = this._x, i = this._y, o = this._z, l = this._w;
    let c = l * e._w + n * e._x + i * e._y + o * e._z;
    if (c < 0 ? (this._w = -e._w, this._x = -e._x, this._y = -e._y, this._z = -e._z, c = -c) : this.copy(e), c >= 1)
      return this._w = l, this._x = n, this._y = i, this._z = o, this;
    const h = 1 - c * c;
    if (h <= Number.EPSILON) {
      const v = 1 - t;
      return this._w = v * l + t * this._w, this._x = v * n + t * this._x, this._y = v * i + t * this._y, this._z = v * o + t * this._z, this.normalize(), this;
    }
    const f = Math.sqrt(h), p = Math.atan2(f, c), m = Math.sin((1 - t) * p) / f, g = Math.sin(t * p) / f;
    return this._w = l * m + this._w * g, this._x = n * m + this._x * g, this._y = i * m + this._y * g, this._z = o * m + this._z * g, this._onChangeCallback(), this;
  }
  slerpQuaternions(e, t, n) {
    return this.copy(e).slerp(t, n);
  }
  random() {
    const e = Math.random(), t = Math.sqrt(1 - e), n = Math.sqrt(e), i = 2 * Math.PI * Math.random(), o = 2 * Math.PI * Math.random();
    return this.set(
      t * Math.cos(i),
      n * Math.sin(o),
      n * Math.cos(o),
      t * Math.sin(i)
    );
  }
  equals(e) {
    return e._x === this._x && e._y === this._y && e._z === this._z && e._w === this._w;
  }
  fromArray(e, t = 0) {
    return this._x = e[t], this._y = e[t + 1], this._z = e[t + 2], this._w = e[t + 3], this._onChangeCallback(), this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this._x, e[t + 1] = this._y, e[t + 2] = this._z, e[t + 3] = this._w, e;
  }
  fromBufferAttribute(e, t) {
    return this._x = e.getX(t), this._y = e.getY(t), this._z = e.getZ(t), this._w = e.getW(t), this._onChangeCallback(), this;
  }
  toJSON() {
    return this.toArray();
  }
  _onChange(e) {
    return this._onChangeCallback = e, this;
  }
  _onChangeCallback() {
  }
  *[Symbol.iterator]() {
    yield this._x, yield this._y, yield this._z, yield this._w;
  }
}
class I {
  constructor(e = 0, t = 0, n = 0) {
    I.prototype.isVector3 = !0, this.x = e, this.y = t, this.z = n;
  }
  set(e, t, n) {
    return n === void 0 && (n = this.z), this.x = e, this.y = t, this.z = n, this;
  }
  setScalar(e) {
    return this.x = e, this.y = e, this.z = e, this;
  }
  setX(e) {
    return this.x = e, this;
  }
  setY(e) {
    return this.y = e, this;
  }
  setZ(e) {
    return this.z = e, this;
  }
  setComponent(e, t) {
    switch (e) {
      case 0:
        this.x = t;
        break;
      case 1:
        this.y = t;
        break;
      case 2:
        this.z = t;
        break;
      default:
        throw new Error("index is out of range: " + e);
    }
    return this;
  }
  getComponent(e) {
    switch (e) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      default:
        throw new Error("index is out of range: " + e);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y, this.z);
  }
  copy(e) {
    return this.x = e.x, this.y = e.y, this.z = e.z, this;
  }
  add(e) {
    return this.x += e.x, this.y += e.y, this.z += e.z, this;
  }
  addScalar(e) {
    return this.x += e, this.y += e, this.z += e, this;
  }
  addVectors(e, t) {
    return this.x = e.x + t.x, this.y = e.y + t.y, this.z = e.z + t.z, this;
  }
  addScaledVector(e, t) {
    return this.x += e.x * t, this.y += e.y * t, this.z += e.z * t, this;
  }
  sub(e) {
    return this.x -= e.x, this.y -= e.y, this.z -= e.z, this;
  }
  subScalar(e) {
    return this.x -= e, this.y -= e, this.z -= e, this;
  }
  subVectors(e, t) {
    return this.x = e.x - t.x, this.y = e.y - t.y, this.z = e.z - t.z, this;
  }
  multiply(e) {
    return this.x *= e.x, this.y *= e.y, this.z *= e.z, this;
  }
  multiplyScalar(e) {
    return this.x *= e, this.y *= e, this.z *= e, this;
  }
  multiplyVectors(e, t) {
    return this.x = e.x * t.x, this.y = e.y * t.y, this.z = e.z * t.z, this;
  }
  applyEuler(e) {
    return this.applyQuaternion(c0.setFromEuler(e));
  }
  applyAxisAngle(e, t) {
    return this.applyQuaternion(c0.setFromAxisAngle(e, t));
  }
  applyMatrix3(e) {
    const t = this.x, n = this.y, i = this.z, o = e.elements;
    return this.x = o[0] * t + o[3] * n + o[6] * i, this.y = o[1] * t + o[4] * n + o[7] * i, this.z = o[2] * t + o[5] * n + o[8] * i, this;
  }
  applyNormalMatrix(e) {
    return this.applyMatrix3(e).normalize();
  }
  applyMatrix4(e) {
    const t = this.x, n = this.y, i = this.z, o = e.elements, l = 1 / (o[3] * t + o[7] * n + o[11] * i + o[15]);
    return this.x = (o[0] * t + o[4] * n + o[8] * i + o[12]) * l, this.y = (o[1] * t + o[5] * n + o[9] * i + o[13]) * l, this.z = (o[2] * t + o[6] * n + o[10] * i + o[14]) * l, this;
  }
  applyQuaternion(e) {
    const t = this.x, n = this.y, i = this.z, o = e.x, l = e.y, c = e.z, h = e.w, f = 2 * (l * i - c * n), p = 2 * (c * t - o * i), m = 2 * (o * n - l * t);
    return this.x = t + h * f + l * m - c * p, this.y = n + h * p + c * f - o * m, this.z = i + h * m + o * p - l * f, this;
  }
  project(e) {
    return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix);
  }
  unproject(e) {
    return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld);
  }
  transformDirection(e) {
    const t = this.x, n = this.y, i = this.z, o = e.elements;
    return this.x = o[0] * t + o[4] * n + o[8] * i, this.y = o[1] * t + o[5] * n + o[9] * i, this.z = o[2] * t + o[6] * n + o[10] * i, this.normalize();
  }
  divide(e) {
    return this.x /= e.x, this.y /= e.y, this.z /= e.z, this;
  }
  divideScalar(e) {
    return this.multiplyScalar(1 / e);
  }
  min(e) {
    return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this.z = Math.min(this.z, e.z), this;
  }
  max(e) {
    return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this.z = Math.max(this.z, e.z), this;
  }
  clamp(e, t) {
    return this.x = Math.max(e.x, Math.min(t.x, this.x)), this.y = Math.max(e.y, Math.min(t.y, this.y)), this.z = Math.max(e.z, Math.min(t.z, this.z)), this;
  }
  clampScalar(e, t) {
    return this.x = Math.max(e, Math.min(t, this.x)), this.y = Math.max(e, Math.min(t, this.y)), this.z = Math.max(e, Math.min(t, this.z)), this;
  }
  clampLength(e, t) {
    const n = this.length();
    return this.divideScalar(n || 1).multiplyScalar(Math.max(e, Math.min(t, n)));
  }
  floor() {
    return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this;
  }
  ceil() {
    return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this;
  }
  round() {
    return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this;
  }
  roundToZero() {
    return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this.z = Math.trunc(this.z), this;
  }
  negate() {
    return this.x = -this.x, this.y = -this.y, this.z = -this.z, this;
  }
  dot(e) {
    return this.x * e.x + this.y * e.y + this.z * e.z;
  }
  // TODO lengthSquared?
  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  setLength(e) {
    return this.normalize().multiplyScalar(e);
  }
  lerp(e, t) {
    return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this.z += (e.z - this.z) * t, this;
  }
  lerpVectors(e, t, n) {
    return this.x = e.x + (t.x - e.x) * n, this.y = e.y + (t.y - e.y) * n, this.z = e.z + (t.z - e.z) * n, this;
  }
  cross(e) {
    return this.crossVectors(this, e);
  }
  crossVectors(e, t) {
    const n = e.x, i = e.y, o = e.z, l = t.x, c = t.y, h = t.z;
    return this.x = i * h - o * c, this.y = o * l - n * h, this.z = n * c - i * l, this;
  }
  projectOnVector(e) {
    const t = e.lengthSq();
    if (t === 0) return this.set(0, 0, 0);
    const n = e.dot(this) / t;
    return this.copy(e).multiplyScalar(n);
  }
  projectOnPlane(e) {
    return sd.copy(this).projectOnVector(e), this.sub(sd);
  }
  reflect(e) {
    return this.sub(sd.copy(e).multiplyScalar(2 * this.dot(e)));
  }
  angleTo(e) {
    const t = Math.sqrt(this.lengthSq() * e.lengthSq());
    if (t === 0) return Math.PI / 2;
    const n = this.dot(e) / t;
    return Math.acos(sn(n, -1, 1));
  }
  distanceTo(e) {
    return Math.sqrt(this.distanceToSquared(e));
  }
  distanceToSquared(e) {
    const t = this.x - e.x, n = this.y - e.y, i = this.z - e.z;
    return t * t + n * n + i * i;
  }
  manhattanDistanceTo(e) {
    return Math.abs(this.x - e.x) + Math.abs(this.y - e.y) + Math.abs(this.z - e.z);
  }
  setFromSpherical(e) {
    return this.setFromSphericalCoords(e.radius, e.phi, e.theta);
  }
  setFromSphericalCoords(e, t, n) {
    const i = Math.sin(t) * e;
    return this.x = i * Math.sin(n), this.y = Math.cos(t) * e, this.z = i * Math.cos(n), this;
  }
  setFromCylindrical(e) {
    return this.setFromCylindricalCoords(e.radius, e.theta, e.y);
  }
  setFromCylindricalCoords(e, t, n) {
    return this.x = e * Math.sin(t), this.y = n, this.z = e * Math.cos(t), this;
  }
  setFromMatrixPosition(e) {
    const t = e.elements;
    return this.x = t[12], this.y = t[13], this.z = t[14], this;
  }
  setFromMatrixScale(e) {
    const t = this.setFromMatrixColumn(e, 0).length(), n = this.setFromMatrixColumn(e, 1).length(), i = this.setFromMatrixColumn(e, 2).length();
    return this.x = t, this.y = n, this.z = i, this;
  }
  setFromMatrixColumn(e, t) {
    return this.fromArray(e.elements, t * 4);
  }
  setFromMatrix3Column(e, t) {
    return this.fromArray(e.elements, t * 3);
  }
  setFromEuler(e) {
    return this.x = e._x, this.y = e._y, this.z = e._z, this;
  }
  setFromColor(e) {
    return this.x = e.r, this.y = e.g, this.z = e.b, this;
  }
  equals(e) {
    return e.x === this.x && e.y === this.y && e.z === this.z;
  }
  fromArray(e, t = 0) {
    return this.x = e[t], this.y = e[t + 1], this.z = e[t + 2], this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this.x, e[t + 1] = this.y, e[t + 2] = this.z, e;
  }
  fromBufferAttribute(e, t) {
    return this.x = e.getX(t), this.y = e.getY(t), this.z = e.getZ(t), this;
  }
  random() {
    return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this;
  }
  randomDirection() {
    const e = (Math.random() - 0.5) * 2, t = Math.random() * Math.PI * 2, n = Math.sqrt(1 - e ** 2);
    return this.x = n * Math.cos(t), this.y = n * Math.sin(t), this.z = e, this;
  }
  *[Symbol.iterator]() {
    yield this.x, yield this.y, yield this.z;
  }
}
const sd = /* @__PURE__ */ new I(), c0 = /* @__PURE__ */ new On();
class kn {
  constructor(e = new I(1 / 0, 1 / 0, 1 / 0), t = new I(-1 / 0, -1 / 0, -1 / 0)) {
    this.isBox3 = !0, this.min = e, this.max = t;
  }
  set(e, t) {
    return this.min.copy(e), this.max.copy(t), this;
  }
  setFromArray(e) {
    this.makeEmpty();
    for (let t = 0, n = e.length; t < n; t += 3)
      this.expandByPoint(Pi.fromArray(e, t));
    return this;
  }
  setFromBufferAttribute(e) {
    this.makeEmpty();
    for (let t = 0, n = e.count; t < n; t++)
      this.expandByPoint(Pi.fromBufferAttribute(e, t));
    return this;
  }
  setFromPoints(e) {
    this.makeEmpty();
    for (let t = 0, n = e.length; t < n; t++)
      this.expandByPoint(e[t]);
    return this;
  }
  setFromCenterAndSize(e, t) {
    const n = Pi.copy(t).multiplyScalar(0.5);
    return this.min.copy(e).sub(n), this.max.copy(e).add(n), this;
  }
  setFromObject(e, t = !1) {
    return this.makeEmpty(), this.expandByObject(e, t);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    return this.min.copy(e.min), this.max.copy(e.max), this;
  }
  makeEmpty() {
    return this.min.x = this.min.y = this.min.z = 1 / 0, this.max.x = this.max.y = this.max.z = -1 / 0, this;
  }
  isEmpty() {
    return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
  }
  getCenter(e) {
    return this.isEmpty() ? e.set(0, 0, 0) : e.addVectors(this.min, this.max).multiplyScalar(0.5);
  }
  getSize(e) {
    return this.isEmpty() ? e.set(0, 0, 0) : e.subVectors(this.max, this.min);
  }
  expandByPoint(e) {
    return this.min.min(e), this.max.max(e), this;
  }
  expandByVector(e) {
    return this.min.sub(e), this.max.add(e), this;
  }
  expandByScalar(e) {
    return this.min.addScalar(-e), this.max.addScalar(e), this;
  }
  expandByObject(e, t = !1) {
    e.updateWorldMatrix(!1, !1);
    const n = e.geometry;
    if (n !== void 0) {
      const o = n.getAttribute("position");
      if (t === !0 && o !== void 0 && e.isInstancedMesh !== !0)
        for (let l = 0, c = o.count; l < c; l++)
          e.isMesh === !0 ? e.getVertexPosition(l, Pi) : Pi.fromBufferAttribute(o, l), Pi.applyMatrix4(e.matrixWorld), this.expandByPoint(Pi);
      else
        e.boundingBox !== void 0 ? (e.boundingBox === null && e.computeBoundingBox(), Bc.copy(e.boundingBox)) : (n.boundingBox === null && n.computeBoundingBox(), Bc.copy(n.boundingBox)), Bc.applyMatrix4(e.matrixWorld), this.union(Bc);
    }
    const i = e.children;
    for (let o = 0, l = i.length; o < l; o++)
      this.expandByObject(i[o], t);
    return this;
  }
  containsPoint(e) {
    return !(e.x < this.min.x || e.x > this.max.x || e.y < this.min.y || e.y > this.max.y || e.z < this.min.z || e.z > this.max.z);
  }
  containsBox(e) {
    return this.min.x <= e.min.x && e.max.x <= this.max.x && this.min.y <= e.min.y && e.max.y <= this.max.y && this.min.z <= e.min.z && e.max.z <= this.max.z;
  }
  getParameter(e, t) {
    return t.set(
      (e.x - this.min.x) / (this.max.x - this.min.x),
      (e.y - this.min.y) / (this.max.y - this.min.y),
      (e.z - this.min.z) / (this.max.z - this.min.z)
    );
  }
  intersectsBox(e) {
    return !(e.max.x < this.min.x || e.min.x > this.max.x || e.max.y < this.min.y || e.min.y > this.max.y || e.max.z < this.min.z || e.min.z > this.max.z);
  }
  intersectsSphere(e) {
    return this.clampPoint(e.center, Pi), Pi.distanceToSquared(e.center) <= e.radius * e.radius;
  }
  intersectsPlane(e) {
    let t, n;
    return e.normal.x > 0 ? (t = e.normal.x * this.min.x, n = e.normal.x * this.max.x) : (t = e.normal.x * this.max.x, n = e.normal.x * this.min.x), e.normal.y > 0 ? (t += e.normal.y * this.min.y, n += e.normal.y * this.max.y) : (t += e.normal.y * this.max.y, n += e.normal.y * this.min.y), e.normal.z > 0 ? (t += e.normal.z * this.min.z, n += e.normal.z * this.max.z) : (t += e.normal.z * this.max.z, n += e.normal.z * this.min.z), t <= -e.constant && n >= -e.constant;
  }
  intersectsTriangle(e) {
    if (this.isEmpty())
      return !1;
    this.getCenter(il), Hc.subVectors(this.max, il), Fr.subVectors(e.a, il), Vr.subVectors(e.b, il), Gr.subVectors(e.c, il), ks.subVectors(Vr, Fr), qs.subVectors(Gr, Vr), Na.subVectors(Fr, Gr);
    let t = [
      0,
      -ks.z,
      ks.y,
      0,
      -qs.z,
      qs.y,
      0,
      -Na.z,
      Na.y,
      ks.z,
      0,
      -ks.x,
      qs.z,
      0,
      -qs.x,
      Na.z,
      0,
      -Na.x,
      -ks.y,
      ks.x,
      0,
      -qs.y,
      qs.x,
      0,
      -Na.y,
      Na.x,
      0
    ];
    return !ad(t, Fr, Vr, Gr, Hc) || (t = [1, 0, 0, 0, 1, 0, 0, 0, 1], !ad(t, Fr, Vr, Gr, Hc)) ? !1 : (Fc.crossVectors(ks, qs), t = [Fc.x, Fc.y, Fc.z], ad(t, Fr, Vr, Gr, Hc));
  }
  clampPoint(e, t) {
    return t.copy(e).clamp(this.min, this.max);
  }
  distanceToPoint(e) {
    return this.clampPoint(e, Pi).distanceTo(e);
  }
  getBoundingSphere(e) {
    return this.isEmpty() ? e.makeEmpty() : (this.getCenter(e.center), e.radius = this.getSize(Pi).length() * 0.5), e;
  }
  intersect(e) {
    return this.min.max(e.min), this.max.min(e.max), this.isEmpty() && this.makeEmpty(), this;
  }
  union(e) {
    return this.min.min(e.min), this.max.max(e.max), this;
  }
  applyMatrix4(e) {
    return this.isEmpty() ? this : (ds[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(e), ds[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(e), ds[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(e), ds[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(e), ds[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(e), ds[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(e), ds[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(e), ds[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(e), this.setFromPoints(ds), this);
  }
  translate(e) {
    return this.min.add(e), this.max.add(e), this;
  }
  equals(e) {
    return e.min.equals(this.min) && e.max.equals(this.max);
  }
}
const ds = [
  /* @__PURE__ */ new I(),
  /* @__PURE__ */ new I(),
  /* @__PURE__ */ new I(),
  /* @__PURE__ */ new I(),
  /* @__PURE__ */ new I(),
  /* @__PURE__ */ new I(),
  /* @__PURE__ */ new I(),
  /* @__PURE__ */ new I()
], Pi = /* @__PURE__ */ new I(), Bc = /* @__PURE__ */ new kn(), Fr = /* @__PURE__ */ new I(), Vr = /* @__PURE__ */ new I(), Gr = /* @__PURE__ */ new I(), ks = /* @__PURE__ */ new I(), qs = /* @__PURE__ */ new I(), Na = /* @__PURE__ */ new I(), il = /* @__PURE__ */ new I(), Hc = /* @__PURE__ */ new I(), Fc = /* @__PURE__ */ new I(), Da = /* @__PURE__ */ new I();
function ad(a, e, t, n, i) {
  for (let o = 0, l = a.length - 3; o <= l; o += 3) {
    Da.fromArray(a, o);
    const c = i.x * Math.abs(Da.x) + i.y * Math.abs(Da.y) + i.z * Math.abs(Da.z), h = e.dot(Da), f = t.dot(Da), p = n.dot(Da);
    if (Math.max(-Math.max(h, f, p), Math.min(h, f, p)) > c)
      return !1;
  }
  return !0;
}
const Bb = /* @__PURE__ */ new kn(), sl = /* @__PURE__ */ new I(), rd = /* @__PURE__ */ new I();
let In = class {
  constructor(e = new I(), t = -1) {
    this.isSphere = !0, this.center = e, this.radius = t;
  }
  set(e, t) {
    return this.center.copy(e), this.radius = t, this;
  }
  setFromPoints(e, t) {
    const n = this.center;
    t !== void 0 ? n.copy(t) : Bb.setFromPoints(e).getCenter(n);
    let i = 0;
    for (let o = 0, l = e.length; o < l; o++)
      i = Math.max(i, n.distanceToSquared(e[o]));
    return this.radius = Math.sqrt(i), this;
  }
  copy(e) {
    return this.center.copy(e.center), this.radius = e.radius, this;
  }
  isEmpty() {
    return this.radius < 0;
  }
  makeEmpty() {
    return this.center.set(0, 0, 0), this.radius = -1, this;
  }
  containsPoint(e) {
    return e.distanceToSquared(this.center) <= this.radius * this.radius;
  }
  distanceToPoint(e) {
    return e.distanceTo(this.center) - this.radius;
  }
  intersectsSphere(e) {
    const t = this.radius + e.radius;
    return e.center.distanceToSquared(this.center) <= t * t;
  }
  intersectsBox(e) {
    return e.intersectsSphere(this);
  }
  intersectsPlane(e) {
    return Math.abs(e.distanceToPoint(this.center)) <= this.radius;
  }
  clampPoint(e, t) {
    const n = this.center.distanceToSquared(e);
    return t.copy(e), n > this.radius * this.radius && (t.sub(this.center).normalize(), t.multiplyScalar(this.radius).add(this.center)), t;
  }
  getBoundingBox(e) {
    return this.isEmpty() ? (e.makeEmpty(), e) : (e.set(this.center, this.center), e.expandByScalar(this.radius), e);
  }
  applyMatrix4(e) {
    return this.center.applyMatrix4(e), this.radius = this.radius * e.getMaxScaleOnAxis(), this;
  }
  translate(e) {
    return this.center.add(e), this;
  }
  expandByPoint(e) {
    if (this.isEmpty())
      return this.center.copy(e), this.radius = 0, this;
    sl.subVectors(e, this.center);
    const t = sl.lengthSq();
    if (t > this.radius * this.radius) {
      const n = Math.sqrt(t), i = (n - this.radius) * 0.5;
      this.center.addScaledVector(sl, i / n), this.radius += i;
    }
    return this;
  }
  union(e) {
    return e.isEmpty() ? this : this.isEmpty() ? (this.copy(e), this) : (this.center.equals(e.center) === !0 ? this.radius = Math.max(this.radius, e.radius) : (rd.subVectors(e.center, this.center).setLength(e.radius), this.expandByPoint(sl.copy(e.center).add(rd)), this.expandByPoint(sl.copy(e.center).sub(rd))), this);
  }
  equals(e) {
    return e.center.equals(this.center) && e.radius === this.radius;
  }
  clone() {
    return new this.constructor().copy(this);
  }
};
const ps = /* @__PURE__ */ new I(), od = /* @__PURE__ */ new I(), Vc = /* @__PURE__ */ new I(), Ys = /* @__PURE__ */ new I(), ld = /* @__PURE__ */ new I(), Gc = /* @__PURE__ */ new I(), cd = /* @__PURE__ */ new I();
class rr {
  constructor(e = new I(), t = new I(0, 0, -1)) {
    this.origin = e, this.direction = t;
  }
  set(e, t) {
    return this.origin.copy(e), this.direction.copy(t), this;
  }
  copy(e) {
    return this.origin.copy(e.origin), this.direction.copy(e.direction), this;
  }
  at(e, t) {
    return t.copy(this.origin).addScaledVector(this.direction, e);
  }
  lookAt(e) {
    return this.direction.copy(e).sub(this.origin).normalize(), this;
  }
  recast(e) {
    return this.origin.copy(this.at(e, ps)), this;
  }
  closestPointToPoint(e, t) {
    t.subVectors(e, this.origin);
    const n = t.dot(this.direction);
    return n < 0 ? t.copy(this.origin) : t.copy(this.origin).addScaledVector(this.direction, n);
  }
  distanceToPoint(e) {
    return Math.sqrt(this.distanceSqToPoint(e));
  }
  distanceSqToPoint(e) {
    const t = ps.subVectors(e, this.origin).dot(this.direction);
    return t < 0 ? this.origin.distanceToSquared(e) : (ps.copy(this.origin).addScaledVector(this.direction, t), ps.distanceToSquared(e));
  }
  distanceSqToSegment(e, t, n, i) {
    od.copy(e).add(t).multiplyScalar(0.5), Vc.copy(t).sub(e).normalize(), Ys.copy(this.origin).sub(od);
    const o = e.distanceTo(t) * 0.5, l = -this.direction.dot(Vc), c = Ys.dot(this.direction), h = -Ys.dot(Vc), f = Ys.lengthSq(), p = Math.abs(1 - l * l);
    let m, g, v, x;
    if (p > 0)
      if (m = l * h - c, g = l * c - h, x = o * p, m >= 0)
        if (g >= -x)
          if (g <= x) {
            const E = 1 / p;
            m *= E, g *= E, v = m * (m + l * g + 2 * c) + g * (l * m + g + 2 * h) + f;
          } else
            g = o, m = Math.max(0, -(l * g + c)), v = -m * m + g * (g + 2 * h) + f;
        else
          g = -o, m = Math.max(0, -(l * g + c)), v = -m * m + g * (g + 2 * h) + f;
      else
        g <= -x ? (m = Math.max(0, -(-l * o + c)), g = m > 0 ? -o : Math.min(Math.max(-o, -h), o), v = -m * m + g * (g + 2 * h) + f) : g <= x ? (m = 0, g = Math.min(Math.max(-o, -h), o), v = g * (g + 2 * h) + f) : (m = Math.max(0, -(l * o + c)), g = m > 0 ? o : Math.min(Math.max(-o, -h), o), v = -m * m + g * (g + 2 * h) + f);
    else
      g = l > 0 ? -o : o, m = Math.max(0, -(l * g + c)), v = -m * m + g * (g + 2 * h) + f;
    return n && n.copy(this.origin).addScaledVector(this.direction, m), i && i.copy(od).addScaledVector(Vc, g), v;
  }
  intersectSphere(e, t) {
    ps.subVectors(e.center, this.origin);
    const n = ps.dot(this.direction), i = ps.dot(ps) - n * n, o = e.radius * e.radius;
    if (i > o) return null;
    const l = Math.sqrt(o - i), c = n - l, h = n + l;
    return h < 0 ? null : c < 0 ? this.at(h, t) : this.at(c, t);
  }
  intersectsSphere(e) {
    return this.distanceSqToPoint(e.center) <= e.radius * e.radius;
  }
  distanceToPlane(e) {
    const t = e.normal.dot(this.direction);
    if (t === 0)
      return e.distanceToPoint(this.origin) === 0 ? 0 : null;
    const n = -(this.origin.dot(e.normal) + e.constant) / t;
    return n >= 0 ? n : null;
  }
  intersectPlane(e, t) {
    const n = this.distanceToPlane(e);
    return n === null ? null : this.at(n, t);
  }
  intersectsPlane(e) {
    const t = e.distanceToPoint(this.origin);
    return t === 0 || e.normal.dot(this.direction) * t < 0;
  }
  intersectBox(e, t) {
    let n, i, o, l, c, h;
    const f = 1 / this.direction.x, p = 1 / this.direction.y, m = 1 / this.direction.z, g = this.origin;
    return f >= 0 ? (n = (e.min.x - g.x) * f, i = (e.max.x - g.x) * f) : (n = (e.max.x - g.x) * f, i = (e.min.x - g.x) * f), p >= 0 ? (o = (e.min.y - g.y) * p, l = (e.max.y - g.y) * p) : (o = (e.max.y - g.y) * p, l = (e.min.y - g.y) * p), n > l || o > i || ((o > n || isNaN(n)) && (n = o), (l < i || isNaN(i)) && (i = l), m >= 0 ? (c = (e.min.z - g.z) * m, h = (e.max.z - g.z) * m) : (c = (e.max.z - g.z) * m, h = (e.min.z - g.z) * m), n > h || c > i) || ((c > n || n !== n) && (n = c), (h < i || i !== i) && (i = h), i < 0) ? null : this.at(n >= 0 ? n : i, t);
  }
  intersectsBox(e) {
    return this.intersectBox(e, ps) !== null;
  }
  intersectTriangle(e, t, n, i, o) {
    ld.subVectors(t, e), Gc.subVectors(n, e), cd.crossVectors(ld, Gc);
    let l = this.direction.dot(cd), c;
    if (l > 0) {
      if (i) return null;
      c = 1;
    } else if (l < 0)
      c = -1, l = -l;
    else
      return null;
    Ys.subVectors(this.origin, e);
    const h = c * this.direction.dot(Gc.crossVectors(Ys, Gc));
    if (h < 0)
      return null;
    const f = c * this.direction.dot(ld.cross(Ys));
    if (f < 0 || h + f > l)
      return null;
    const p = -c * Ys.dot(cd);
    return p < 0 ? null : this.at(p / l, o);
  }
  applyMatrix4(e) {
    return this.origin.applyMatrix4(e), this.direction.transformDirection(e), this;
  }
  equals(e) {
    return e.origin.equals(this.origin) && e.direction.equals(this.direction);
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
class rt {
  constructor(e, t, n, i, o, l, c, h, f, p, m, g, v, x, E, S) {
    rt.prototype.isMatrix4 = !0, this.elements = [
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    ], e !== void 0 && this.set(e, t, n, i, o, l, c, h, f, p, m, g, v, x, E, S);
  }
  set(e, t, n, i, o, l, c, h, f, p, m, g, v, x, E, S) {
    const y = this.elements;
    return y[0] = e, y[4] = t, y[8] = n, y[12] = i, y[1] = o, y[5] = l, y[9] = c, y[13] = h, y[2] = f, y[6] = p, y[10] = m, y[14] = g, y[3] = v, y[7] = x, y[11] = E, y[15] = S, this;
  }
  identity() {
    return this.set(
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  clone() {
    return new rt().fromArray(this.elements);
  }
  copy(e) {
    const t = this.elements, n = e.elements;
    return t[0] = n[0], t[1] = n[1], t[2] = n[2], t[3] = n[3], t[4] = n[4], t[5] = n[5], t[6] = n[6], t[7] = n[7], t[8] = n[8], t[9] = n[9], t[10] = n[10], t[11] = n[11], t[12] = n[12], t[13] = n[13], t[14] = n[14], t[15] = n[15], this;
  }
  copyPosition(e) {
    const t = this.elements, n = e.elements;
    return t[12] = n[12], t[13] = n[13], t[14] = n[14], this;
  }
  setFromMatrix3(e) {
    const t = e.elements;
    return this.set(
      t[0],
      t[3],
      t[6],
      0,
      t[1],
      t[4],
      t[7],
      0,
      t[2],
      t[5],
      t[8],
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  extractBasis(e, t, n) {
    return e.setFromMatrixColumn(this, 0), t.setFromMatrixColumn(this, 1), n.setFromMatrixColumn(this, 2), this;
  }
  makeBasis(e, t, n) {
    return this.set(
      e.x,
      t.x,
      n.x,
      0,
      e.y,
      t.y,
      n.y,
      0,
      e.z,
      t.z,
      n.z,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  extractRotation(e) {
    const t = this.elements, n = e.elements, i = 1 / Wr.setFromMatrixColumn(e, 0).length(), o = 1 / Wr.setFromMatrixColumn(e, 1).length(), l = 1 / Wr.setFromMatrixColumn(e, 2).length();
    return t[0] = n[0] * i, t[1] = n[1] * i, t[2] = n[2] * i, t[3] = 0, t[4] = n[4] * o, t[5] = n[5] * o, t[6] = n[6] * o, t[7] = 0, t[8] = n[8] * l, t[9] = n[9] * l, t[10] = n[10] * l, t[11] = 0, t[12] = 0, t[13] = 0, t[14] = 0, t[15] = 1, this;
  }
  makeRotationFromEuler(e) {
    const t = this.elements, n = e.x, i = e.y, o = e.z, l = Math.cos(n), c = Math.sin(n), h = Math.cos(i), f = Math.sin(i), p = Math.cos(o), m = Math.sin(o);
    if (e.order === "XYZ") {
      const g = l * p, v = l * m, x = c * p, E = c * m;
      t[0] = h * p, t[4] = -h * m, t[8] = f, t[1] = v + x * f, t[5] = g - E * f, t[9] = -c * h, t[2] = E - g * f, t[6] = x + v * f, t[10] = l * h;
    } else if (e.order === "YXZ") {
      const g = h * p, v = h * m, x = f * p, E = f * m;
      t[0] = g + E * c, t[4] = x * c - v, t[8] = l * f, t[1] = l * m, t[5] = l * p, t[9] = -c, t[2] = v * c - x, t[6] = E + g * c, t[10] = l * h;
    } else if (e.order === "ZXY") {
      const g = h * p, v = h * m, x = f * p, E = f * m;
      t[0] = g - E * c, t[4] = -l * m, t[8] = x + v * c, t[1] = v + x * c, t[5] = l * p, t[9] = E - g * c, t[2] = -l * f, t[6] = c, t[10] = l * h;
    } else if (e.order === "ZYX") {
      const g = l * p, v = l * m, x = c * p, E = c * m;
      t[0] = h * p, t[4] = x * f - v, t[8] = g * f + E, t[1] = h * m, t[5] = E * f + g, t[9] = v * f - x, t[2] = -f, t[6] = c * h, t[10] = l * h;
    } else if (e.order === "YZX") {
      const g = l * h, v = l * f, x = c * h, E = c * f;
      t[0] = h * p, t[4] = E - g * m, t[8] = x * m + v, t[1] = m, t[5] = l * p, t[9] = -c * p, t[2] = -f * p, t[6] = v * m + x, t[10] = g - E * m;
    } else if (e.order === "XZY") {
      const g = l * h, v = l * f, x = c * h, E = c * f;
      t[0] = h * p, t[4] = -m, t[8] = f * p, t[1] = g * m + E, t[5] = l * p, t[9] = v * m - x, t[2] = x * m - v, t[6] = c * p, t[10] = E * m + g;
    }
    return t[3] = 0, t[7] = 0, t[11] = 0, t[12] = 0, t[13] = 0, t[14] = 0, t[15] = 1, this;
  }
  makeRotationFromQuaternion(e) {
    return this.compose(Hb, e, Fb);
  }
  lookAt(e, t, n) {
    const i = this.elements;
    return fi.subVectors(e, t), fi.lengthSq() === 0 && (fi.z = 1), fi.normalize(), js.crossVectors(n, fi), js.lengthSq() === 0 && (Math.abs(n.z) === 1 ? fi.x += 1e-4 : fi.z += 1e-4, fi.normalize(), js.crossVectors(n, fi)), js.normalize(), Wc.crossVectors(fi, js), i[0] = js.x, i[4] = Wc.x, i[8] = fi.x, i[1] = js.y, i[5] = Wc.y, i[9] = fi.y, i[2] = js.z, i[6] = Wc.z, i[10] = fi.z, this;
  }
  multiply(e) {
    return this.multiplyMatrices(this, e);
  }
  premultiply(e) {
    return this.multiplyMatrices(e, this);
  }
  multiplyMatrices(e, t) {
    const n = e.elements, i = t.elements, o = this.elements, l = n[0], c = n[4], h = n[8], f = n[12], p = n[1], m = n[5], g = n[9], v = n[13], x = n[2], E = n[6], S = n[10], y = n[14], T = n[3], b = n[7], A = n[11], N = n[15], R = i[0], P = i[4], H = i[8], w = i[12], C = i[1], X = i[5], ne = i[9], ae = i[13], z = i[2], q = i[6], W = i[10], Q = i[14], Z = i[3], K = i[7], le = i[11], oe = i[15];
    return o[0] = l * R + c * C + h * z + f * Z, o[4] = l * P + c * X + h * q + f * K, o[8] = l * H + c * ne + h * W + f * le, o[12] = l * w + c * ae + h * Q + f * oe, o[1] = p * R + m * C + g * z + v * Z, o[5] = p * P + m * X + g * q + v * K, o[9] = p * H + m * ne + g * W + v * le, o[13] = p * w + m * ae + g * Q + v * oe, o[2] = x * R + E * C + S * z + y * Z, o[6] = x * P + E * X + S * q + y * K, o[10] = x * H + E * ne + S * W + y * le, o[14] = x * w + E * ae + S * Q + y * oe, o[3] = T * R + b * C + A * z + N * Z, o[7] = T * P + b * X + A * q + N * K, o[11] = T * H + b * ne + A * W + N * le, o[15] = T * w + b * ae + A * Q + N * oe, this;
  }
  multiplyScalar(e) {
    const t = this.elements;
    return t[0] *= e, t[4] *= e, t[8] *= e, t[12] *= e, t[1] *= e, t[5] *= e, t[9] *= e, t[13] *= e, t[2] *= e, t[6] *= e, t[10] *= e, t[14] *= e, t[3] *= e, t[7] *= e, t[11] *= e, t[15] *= e, this;
  }
  determinant() {
    const e = this.elements, t = e[0], n = e[4], i = e[8], o = e[12], l = e[1], c = e[5], h = e[9], f = e[13], p = e[2], m = e[6], g = e[10], v = e[14], x = e[3], E = e[7], S = e[11], y = e[15];
    return x * (+o * h * m - i * f * m - o * c * g + n * f * g + i * c * v - n * h * v) + E * (+t * h * v - t * f * g + o * l * g - i * l * v + i * f * p - o * h * p) + S * (+t * f * m - t * c * v - o * l * m + n * l * v + o * c * p - n * f * p) + y * (-i * c * p - t * h * m + t * c * g + i * l * m - n * l * g + n * h * p);
  }
  transpose() {
    const e = this.elements;
    let t;
    return t = e[1], e[1] = e[4], e[4] = t, t = e[2], e[2] = e[8], e[8] = t, t = e[6], e[6] = e[9], e[9] = t, t = e[3], e[3] = e[12], e[12] = t, t = e[7], e[7] = e[13], e[13] = t, t = e[11], e[11] = e[14], e[14] = t, this;
  }
  setPosition(e, t, n) {
    const i = this.elements;
    return e.isVector3 ? (i[12] = e.x, i[13] = e.y, i[14] = e.z) : (i[12] = e, i[13] = t, i[14] = n), this;
  }
  invert() {
    const e = this.elements, t = e[0], n = e[1], i = e[2], o = e[3], l = e[4], c = e[5], h = e[6], f = e[7], p = e[8], m = e[9], g = e[10], v = e[11], x = e[12], E = e[13], S = e[14], y = e[15], T = m * S * f - E * g * f + E * h * v - c * S * v - m * h * y + c * g * y, b = x * g * f - p * S * f - x * h * v + l * S * v + p * h * y - l * g * y, A = p * E * f - x * m * f + x * c * v - l * E * v - p * c * y + l * m * y, N = x * m * h - p * E * h - x * c * g + l * E * g + p * c * S - l * m * S, R = t * T + n * b + i * A + o * N;
    if (R === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    const P = 1 / R;
    return e[0] = T * P, e[1] = (E * g * o - m * S * o - E * i * v + n * S * v + m * i * y - n * g * y) * P, e[2] = (c * S * o - E * h * o + E * i * f - n * S * f - c * i * y + n * h * y) * P, e[3] = (m * h * o - c * g * o - m * i * f + n * g * f + c * i * v - n * h * v) * P, e[4] = b * P, e[5] = (p * S * o - x * g * o + x * i * v - t * S * v - p * i * y + t * g * y) * P, e[6] = (x * h * o - l * S * o - x * i * f + t * S * f + l * i * y - t * h * y) * P, e[7] = (l * g * o - p * h * o + p * i * f - t * g * f - l * i * v + t * h * v) * P, e[8] = A * P, e[9] = (x * m * o - p * E * o - x * n * v + t * E * v + p * n * y - t * m * y) * P, e[10] = (l * E * o - x * c * o + x * n * f - t * E * f - l * n * y + t * c * y) * P, e[11] = (p * c * o - l * m * o - p * n * f + t * m * f + l * n * v - t * c * v) * P, e[12] = N * P, e[13] = (p * E * i - x * m * i + x * n * g - t * E * g - p * n * S + t * m * S) * P, e[14] = (x * c * i - l * E * i - x * n * h + t * E * h + l * n * S - t * c * S) * P, e[15] = (l * m * i - p * c * i + p * n * h - t * m * h - l * n * g + t * c * g) * P, this;
  }
  scale(e) {
    const t = this.elements, n = e.x, i = e.y, o = e.z;
    return t[0] *= n, t[4] *= i, t[8] *= o, t[1] *= n, t[5] *= i, t[9] *= o, t[2] *= n, t[6] *= i, t[10] *= o, t[3] *= n, t[7] *= i, t[11] *= o, this;
  }
  getMaxScaleOnAxis() {
    const e = this.elements, t = e[0] * e[0] + e[1] * e[1] + e[2] * e[2], n = e[4] * e[4] + e[5] * e[5] + e[6] * e[6], i = e[8] * e[8] + e[9] * e[9] + e[10] * e[10];
    return Math.sqrt(Math.max(t, n, i));
  }
  makeTranslation(e, t, n) {
    return e.isVector3 ? this.set(
      1,
      0,
      0,
      e.x,
      0,
      1,
      0,
      e.y,
      0,
      0,
      1,
      e.z,
      0,
      0,
      0,
      1
    ) : this.set(
      1,
      0,
      0,
      e,
      0,
      1,
      0,
      t,
      0,
      0,
      1,
      n,
      0,
      0,
      0,
      1
    ), this;
  }
  makeRotationX(e) {
    const t = Math.cos(e), n = Math.sin(e);
    return this.set(
      1,
      0,
      0,
      0,
      0,
      t,
      -n,
      0,
      0,
      n,
      t,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  makeRotationY(e) {
    const t = Math.cos(e), n = Math.sin(e);
    return this.set(
      t,
      0,
      n,
      0,
      0,
      1,
      0,
      0,
      -n,
      0,
      t,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  makeRotationZ(e) {
    const t = Math.cos(e), n = Math.sin(e);
    return this.set(
      t,
      -n,
      0,
      0,
      n,
      t,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  makeRotationAxis(e, t) {
    const n = Math.cos(t), i = Math.sin(t), o = 1 - n, l = e.x, c = e.y, h = e.z, f = o * l, p = o * c;
    return this.set(
      f * l + n,
      f * c - i * h,
      f * h + i * c,
      0,
      f * c + i * h,
      p * c + n,
      p * h - i * l,
      0,
      f * h - i * c,
      p * h + i * l,
      o * h * h + n,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  makeScale(e, t, n) {
    return this.set(
      e,
      0,
      0,
      0,
      0,
      t,
      0,
      0,
      0,
      0,
      n,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  makeShear(e, t, n, i, o, l) {
    return this.set(
      1,
      n,
      o,
      0,
      e,
      1,
      l,
      0,
      t,
      i,
      1,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  compose(e, t, n) {
    const i = this.elements, o = t._x, l = t._y, c = t._z, h = t._w, f = o + o, p = l + l, m = c + c, g = o * f, v = o * p, x = o * m, E = l * p, S = l * m, y = c * m, T = h * f, b = h * p, A = h * m, N = n.x, R = n.y, P = n.z;
    return i[0] = (1 - (E + y)) * N, i[1] = (v + A) * N, i[2] = (x - b) * N, i[3] = 0, i[4] = (v - A) * R, i[5] = (1 - (g + y)) * R, i[6] = (S + T) * R, i[7] = 0, i[8] = (x + b) * P, i[9] = (S - T) * P, i[10] = (1 - (g + E)) * P, i[11] = 0, i[12] = e.x, i[13] = e.y, i[14] = e.z, i[15] = 1, this;
  }
  decompose(e, t, n) {
    const i = this.elements;
    let o = Wr.set(i[0], i[1], i[2]).length();
    const l = Wr.set(i[4], i[5], i[6]).length(), c = Wr.set(i[8], i[9], i[10]).length();
    this.determinant() < 0 && (o = -o), e.x = i[12], e.y = i[13], e.z = i[14], Oi.copy(this);
    const f = 1 / o, p = 1 / l, m = 1 / c;
    return Oi.elements[0] *= f, Oi.elements[1] *= f, Oi.elements[2] *= f, Oi.elements[4] *= p, Oi.elements[5] *= p, Oi.elements[6] *= p, Oi.elements[8] *= m, Oi.elements[9] *= m, Oi.elements[10] *= m, t.setFromRotationMatrix(Oi), n.x = o, n.y = l, n.z = c, this;
  }
  makePerspective(e, t, n, i, o, l, c = Fi) {
    const h = this.elements, f = 2 * o / (t - e), p = 2 * o / (n - i), m = (t + e) / (t - e), g = (n + i) / (n - i);
    let v, x;
    if (c === Fi)
      v = -(l + o) / (l - o), x = -2 * l * o / (l - o);
    else if (c === vo)
      v = -l / (l - o), x = -l * o / (l - o);
    else
      throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: " + c);
    return h[0] = f, h[4] = 0, h[8] = m, h[12] = 0, h[1] = 0, h[5] = p, h[9] = g, h[13] = 0, h[2] = 0, h[6] = 0, h[10] = v, h[14] = x, h[3] = 0, h[7] = 0, h[11] = -1, h[15] = 0, this;
  }
  makeOrthographic(e, t, n, i, o, l, c = Fi) {
    const h = this.elements, f = 1 / (t - e), p = 1 / (n - i), m = 1 / (l - o), g = (t + e) * f, v = (n + i) * p;
    let x, E;
    if (c === Fi)
      x = (l + o) * m, E = -2 * m;
    else if (c === vo)
      x = o * m, E = -1 * m;
    else
      throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: " + c);
    return h[0] = 2 * f, h[4] = 0, h[8] = 0, h[12] = -g, h[1] = 0, h[5] = 2 * p, h[9] = 0, h[13] = -v, h[2] = 0, h[6] = 0, h[10] = E, h[14] = -x, h[3] = 0, h[7] = 0, h[11] = 0, h[15] = 1, this;
  }
  equals(e) {
    const t = this.elements, n = e.elements;
    for (let i = 0; i < 16; i++)
      if (t[i] !== n[i]) return !1;
    return !0;
  }
  fromArray(e, t = 0) {
    for (let n = 0; n < 16; n++)
      this.elements[n] = e[n + t];
    return this;
  }
  toArray(e = [], t = 0) {
    const n = this.elements;
    return e[t] = n[0], e[t + 1] = n[1], e[t + 2] = n[2], e[t + 3] = n[3], e[t + 4] = n[4], e[t + 5] = n[5], e[t + 6] = n[6], e[t + 7] = n[7], e[t + 8] = n[8], e[t + 9] = n[9], e[t + 10] = n[10], e[t + 11] = n[11], e[t + 12] = n[12], e[t + 13] = n[13], e[t + 14] = n[14], e[t + 15] = n[15], e;
  }
}
const Wr = /* @__PURE__ */ new I(), Oi = /* @__PURE__ */ new rt(), Hb = /* @__PURE__ */ new I(0, 0, 0), Fb = /* @__PURE__ */ new I(1, 1, 1), js = /* @__PURE__ */ new I(), Wc = /* @__PURE__ */ new I(), fi = /* @__PURE__ */ new I(), u0 = /* @__PURE__ */ new rt(), h0 = /* @__PURE__ */ new On();
class ql {
  constructor(e = 0, t = 0, n = 0, i = ql.DEFAULT_ORDER) {
    this.isEuler = !0, this._x = e, this._y = t, this._z = n, this._order = i;
  }
  get x() {
    return this._x;
  }
  set x(e) {
    this._x = e, this._onChangeCallback();
  }
  get y() {
    return this._y;
  }
  set y(e) {
    this._y = e, this._onChangeCallback();
  }
  get z() {
    return this._z;
  }
  set z(e) {
    this._z = e, this._onChangeCallback();
  }
  get order() {
    return this._order;
  }
  set order(e) {
    this._order = e, this._onChangeCallback();
  }
  set(e, t, n, i = this._order) {
    return this._x = e, this._y = t, this._z = n, this._order = i, this._onChangeCallback(), this;
  }
  clone() {
    return new this.constructor(this._x, this._y, this._z, this._order);
  }
  copy(e) {
    return this._x = e._x, this._y = e._y, this._z = e._z, this._order = e._order, this._onChangeCallback(), this;
  }
  setFromRotationMatrix(e, t = this._order, n = !0) {
    const i = e.elements, o = i[0], l = i[4], c = i[8], h = i[1], f = i[5], p = i[9], m = i[2], g = i[6], v = i[10];
    switch (t) {
      case "XYZ":
        this._y = Math.asin(sn(c, -1, 1)), Math.abs(c) < 0.9999999 ? (this._x = Math.atan2(-p, v), this._z = Math.atan2(-l, o)) : (this._x = Math.atan2(g, f), this._z = 0);
        break;
      case "YXZ":
        this._x = Math.asin(-sn(p, -1, 1)), Math.abs(p) < 0.9999999 ? (this._y = Math.atan2(c, v), this._z = Math.atan2(h, f)) : (this._y = Math.atan2(-m, o), this._z = 0);
        break;
      case "ZXY":
        this._x = Math.asin(sn(g, -1, 1)), Math.abs(g) < 0.9999999 ? (this._y = Math.atan2(-m, v), this._z = Math.atan2(-l, f)) : (this._y = 0, this._z = Math.atan2(h, o));
        break;
      case "ZYX":
        this._y = Math.asin(-sn(m, -1, 1)), Math.abs(m) < 0.9999999 ? (this._x = Math.atan2(g, v), this._z = Math.atan2(h, o)) : (this._x = 0, this._z = Math.atan2(-l, f));
        break;
      case "YZX":
        this._z = Math.asin(sn(h, -1, 1)), Math.abs(h) < 0.9999999 ? (this._x = Math.atan2(-p, f), this._y = Math.atan2(-m, o)) : (this._x = 0, this._y = Math.atan2(c, v));
        break;
      case "XZY":
        this._z = Math.asin(-sn(l, -1, 1)), Math.abs(l) < 0.9999999 ? (this._x = Math.atan2(g, f), this._y = Math.atan2(c, o)) : (this._x = Math.atan2(-p, v), this._y = 0);
        break;
      default:
        console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + t);
    }
    return this._order = t, n === !0 && this._onChangeCallback(), this;
  }
  setFromQuaternion(e, t, n) {
    return u0.makeRotationFromQuaternion(e), this.setFromRotationMatrix(u0, t, n);
  }
  setFromVector3(e, t = this._order) {
    return this.set(e.x, e.y, e.z, t);
  }
  reorder(e) {
    return h0.setFromEuler(this), this.setFromQuaternion(h0, e);
  }
  equals(e) {
    return e._x === this._x && e._y === this._y && e._z === this._z && e._order === this._order;
  }
  fromArray(e) {
    return this._x = e[0], this._y = e[1], this._z = e[2], e[3] !== void 0 && (this._order = e[3]), this._onChangeCallback(), this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this._x, e[t + 1] = this._y, e[t + 2] = this._z, e[t + 3] = this._order, e;
  }
  _onChange(e) {
    return this._onChangeCallback = e, this;
  }
  _onChangeCallback() {
  }
  *[Symbol.iterator]() {
    yield this._x, yield this._y, yield this._z, yield this._order;
  }
}
ql.DEFAULT_ORDER = "XYZ";
class yo {
  constructor() {
    this.mask = 1;
  }
  set(e) {
    this.mask = (1 << e | 0) >>> 0;
  }
  enable(e) {
    this.mask |= 1 << e | 0;
  }
  enableAll() {
    this.mask = -1;
  }
  toggle(e) {
    this.mask ^= 1 << e | 0;
  }
  disable(e) {
    this.mask &= ~(1 << e | 0);
  }
  disableAll() {
    this.mask = 0;
  }
  test(e) {
    return (this.mask & e.mask) !== 0;
  }
  isEnabled(e) {
    return (this.mask & (1 << e | 0)) !== 0;
  }
}
let Vb = 0;
const f0 = /* @__PURE__ */ new I(), Xr = /* @__PURE__ */ new On(), ms = /* @__PURE__ */ new rt(), Xc = /* @__PURE__ */ new I(), al = /* @__PURE__ */ new I(), Gb = /* @__PURE__ */ new I(), Wb = /* @__PURE__ */ new On(), d0 = /* @__PURE__ */ new I(1, 0, 0), p0 = /* @__PURE__ */ new I(0, 1, 0), m0 = /* @__PURE__ */ new I(0, 0, 1), Xb = { type: "added" }, kb = { type: "removed" };
class Nt extends Cs {
  constructor() {
    super(), this.isObject3D = !0, Object.defineProperty(this, "id", { value: Vb++ }), this.uuid = mi(), this.name = "", this.type = "Object3D", this.parent = null, this.children = [], this.up = Nt.DEFAULT_UP.clone();
    const e = new I(), t = new ql(), n = new On(), i = new I(1, 1, 1);
    function o() {
      n.setFromEuler(t, !1);
    }
    function l() {
      t.setFromQuaternion(n, void 0, !1);
    }
    t._onChange(o), n._onChange(l), Object.defineProperties(this, {
      position: {
        configurable: !0,
        enumerable: !0,
        value: e
      },
      rotation: {
        configurable: !0,
        enumerable: !0,
        value: t
      },
      quaternion: {
        configurable: !0,
        enumerable: !0,
        value: n
      },
      scale: {
        configurable: !0,
        enumerable: !0,
        value: i
      },
      modelViewMatrix: {
        value: new rt()
      },
      normalMatrix: {
        value: new yt()
      }
    }), this.matrix = new rt(), this.matrixWorld = new rt(), this.matrixAutoUpdate = Nt.DEFAULT_MATRIX_AUTO_UPDATE, this.matrixWorldAutoUpdate = Nt.DEFAULT_MATRIX_WORLD_AUTO_UPDATE, this.matrixWorldNeedsUpdate = !1, this.layers = new yo(), this.visible = !0, this.castShadow = !1, this.receiveShadow = !1, this.frustumCulled = !0, this.renderOrder = 0, this.animations = [], this.userData = {};
  }
  onBeforeShadow() {
  }
  onAfterShadow() {
  }
  onBeforeRender() {
  }
  onAfterRender() {
  }
  applyMatrix4(e) {
    this.matrixAutoUpdate && this.updateMatrix(), this.matrix.premultiply(e), this.matrix.decompose(this.position, this.quaternion, this.scale);
  }
  applyQuaternion(e) {
    return this.quaternion.premultiply(e), this;
  }
  setRotationFromAxisAngle(e, t) {
    this.quaternion.setFromAxisAngle(e, t);
  }
  setRotationFromEuler(e) {
    this.quaternion.setFromEuler(e, !0);
  }
  setRotationFromMatrix(e) {
    this.quaternion.setFromRotationMatrix(e);
  }
  setRotationFromQuaternion(e) {
    this.quaternion.copy(e);
  }
  rotateOnAxis(e, t) {
    return Xr.setFromAxisAngle(e, t), this.quaternion.multiply(Xr), this;
  }
  rotateOnWorldAxis(e, t) {
    return Xr.setFromAxisAngle(e, t), this.quaternion.premultiply(Xr), this;
  }
  rotateX(e) {
    return this.rotateOnAxis(d0, e);
  }
  rotateY(e) {
    return this.rotateOnAxis(p0, e);
  }
  rotateZ(e) {
    return this.rotateOnAxis(m0, e);
  }
  translateOnAxis(e, t) {
    return f0.copy(e).applyQuaternion(this.quaternion), this.position.add(f0.multiplyScalar(t)), this;
  }
  translateX(e) {
    return this.translateOnAxis(d0, e);
  }
  translateY(e) {
    return this.translateOnAxis(p0, e);
  }
  translateZ(e) {
    return this.translateOnAxis(m0, e);
  }
  localToWorld(e) {
    return this.updateWorldMatrix(!0, !1), e.applyMatrix4(this.matrixWorld);
  }
  worldToLocal(e) {
    return this.updateWorldMatrix(!0, !1), e.applyMatrix4(ms.copy(this.matrixWorld).invert());
  }
  lookAt(e, t, n) {
    e.isVector3 ? Xc.copy(e) : Xc.set(e, t, n);
    const i = this.parent;
    this.updateWorldMatrix(!0, !1), al.setFromMatrixPosition(this.matrixWorld), this.isCamera || this.isLight ? ms.lookAt(al, Xc, this.up) : ms.lookAt(Xc, al, this.up), this.quaternion.setFromRotationMatrix(ms), i && (ms.extractRotation(i.matrixWorld), Xr.setFromRotationMatrix(ms), this.quaternion.premultiply(Xr.invert()));
  }
  add(e) {
    if (arguments.length > 1) {
      for (let t = 0; t < arguments.length; t++)
        this.add(arguments[t]);
      return this;
    }
    return e === this ? (console.error("THREE.Object3D.add: object can't be added as a child of itself.", e), this) : (e && e.isObject3D ? (e.parent !== null && e.parent.remove(e), e.parent = this, this.children.push(e), e.dispatchEvent(Xb)) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", e), this);
  }
  remove(e) {
    if (arguments.length > 1) {
      for (let n = 0; n < arguments.length; n++)
        this.remove(arguments[n]);
      return this;
    }
    const t = this.children.indexOf(e);
    return t !== -1 && (e.parent = null, this.children.splice(t, 1), e.dispatchEvent(kb)), this;
  }
  removeFromParent() {
    const e = this.parent;
    return e !== null && e.remove(this), this;
  }
  clear() {
    return this.remove(...this.children);
  }
  attach(e) {
    return this.updateWorldMatrix(!0, !1), ms.copy(this.matrixWorld).invert(), e.parent !== null && (e.parent.updateWorldMatrix(!0, !1), ms.multiply(e.parent.matrixWorld)), e.applyMatrix4(ms), this.add(e), e.updateWorldMatrix(!1, !0), this;
  }
  getObjectById(e) {
    return this.getObjectByProperty("id", e);
  }
  getObjectByName(e) {
    return this.getObjectByProperty("name", e);
  }
  getObjectByProperty(e, t) {
    if (this[e] === t) return this;
    for (let n = 0, i = this.children.length; n < i; n++) {
      const l = this.children[n].getObjectByProperty(e, t);
      if (l !== void 0)
        return l;
    }
  }
  getObjectsByProperty(e, t, n = []) {
    this[e] === t && n.push(this);
    const i = this.children;
    for (let o = 0, l = i.length; o < l; o++)
      i[o].getObjectsByProperty(e, t, n);
    return n;
  }
  getWorldPosition(e) {
    return this.updateWorldMatrix(!0, !1), e.setFromMatrixPosition(this.matrixWorld);
  }
  getWorldQuaternion(e) {
    return this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(al, e, Gb), e;
  }
  getWorldScale(e) {
    return this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(al, Wb, e), e;
  }
  getWorldDirection(e) {
    this.updateWorldMatrix(!0, !1);
    const t = this.matrixWorld.elements;
    return e.set(t[8], t[9], t[10]).normalize();
  }
  raycast() {
  }
  traverse(e) {
    e(this);
    const t = this.children;
    for (let n = 0, i = t.length; n < i; n++)
      t[n].traverse(e);
  }
  traverseVisible(e) {
    if (this.visible === !1) return;
    e(this);
    const t = this.children;
    for (let n = 0, i = t.length; n < i; n++)
      t[n].traverseVisible(e);
  }
  traverseAncestors(e) {
    const t = this.parent;
    t !== null && (e(t), t.traverseAncestors(e));
  }
  updateMatrix() {
    this.matrix.compose(this.position, this.quaternion, this.scale), this.matrixWorldNeedsUpdate = !0;
  }
  updateMatrixWorld(e) {
    this.matrixAutoUpdate && this.updateMatrix(), (this.matrixWorldNeedsUpdate || e) && (this.parent === null ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), this.matrixWorldNeedsUpdate = !1, e = !0);
    const t = this.children;
    for (let n = 0, i = t.length; n < i; n++) {
      const o = t[n];
      (o.matrixWorldAutoUpdate === !0 || e === !0) && o.updateMatrixWorld(e);
    }
  }
  updateWorldMatrix(e, t) {
    const n = this.parent;
    if (e === !0 && n !== null && n.matrixWorldAutoUpdate === !0 && n.updateWorldMatrix(!0, !1), this.matrixAutoUpdate && this.updateMatrix(), this.parent === null ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), t === !0) {
      const i = this.children;
      for (let o = 0, l = i.length; o < l; o++) {
        const c = i[o];
        c.matrixWorldAutoUpdate === !0 && c.updateWorldMatrix(!1, !0);
      }
    }
  }
  toJSON(e) {
    const t = e === void 0 || typeof e == "string", n = {};
    t && (e = {
      geometries: {},
      materials: {},
      textures: {},
      images: {},
      shapes: {},
      skeletons: {},
      animations: {},
      nodes: {}
    }, n.metadata = {
      version: 4.6,
      type: "Object",
      generator: "Object3D.toJSON"
    });
    const i = {};
    i.uuid = this.uuid, i.type = this.type, this.name !== "" && (i.name = this.name), this.castShadow === !0 && (i.castShadow = !0), this.receiveShadow === !0 && (i.receiveShadow = !0), this.visible === !1 && (i.visible = !1), this.frustumCulled === !1 && (i.frustumCulled = !1), this.renderOrder !== 0 && (i.renderOrder = this.renderOrder), Object.keys(this.userData).length > 0 && (i.userData = this.userData), i.layers = this.layers.mask, i.matrix = this.matrix.toArray(), i.up = this.up.toArray(), this.matrixAutoUpdate === !1 && (i.matrixAutoUpdate = !1), this.isInstancedMesh && (i.type = "InstancedMesh", i.count = this.count, i.instanceMatrix = this.instanceMatrix.toJSON(), this.instanceColor !== null && (i.instanceColor = this.instanceColor.toJSON())), this.isBatchedMesh && (i.type = "BatchedMesh", i.perObjectFrustumCulled = this.perObjectFrustumCulled, i.sortObjects = this.sortObjects, i.drawRanges = this._drawRanges, i.reservedRanges = this._reservedRanges, i.visibility = this._visibility, i.active = this._active, i.bounds = this._bounds.map((c) => ({
      boxInitialized: c.boxInitialized,
      boxMin: c.box.min.toArray(),
      boxMax: c.box.max.toArray(),
      sphereInitialized: c.sphereInitialized,
      sphereRadius: c.sphere.radius,
      sphereCenter: c.sphere.center.toArray()
    })), i.maxGeometryCount = this._maxGeometryCount, i.maxVertexCount = this._maxVertexCount, i.maxIndexCount = this._maxIndexCount, i.geometryInitialized = this._geometryInitialized, i.geometryCount = this._geometryCount, i.matricesTexture = this._matricesTexture.toJSON(e), this.boundingSphere !== null && (i.boundingSphere = {
      center: i.boundingSphere.center.toArray(),
      radius: i.boundingSphere.radius
    }), this.boundingBox !== null && (i.boundingBox = {
      min: i.boundingBox.min.toArray(),
      max: i.boundingBox.max.toArray()
    }));
    function o(c, h) {
      return c[h.uuid] === void 0 && (c[h.uuid] = h.toJSON(e)), h.uuid;
    }
    if (this.isScene)
      this.background && (this.background.isColor ? i.background = this.background.toJSON() : this.background.isTexture && (i.background = this.background.toJSON(e).uuid)), this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== !0 && (i.environment = this.environment.toJSON(e).uuid);
    else if (this.isMesh || this.isLine || this.isPoints) {
      i.geometry = o(e.geometries, this.geometry);
      const c = this.geometry.parameters;
      if (c !== void 0 && c.shapes !== void 0) {
        const h = c.shapes;
        if (Array.isArray(h))
          for (let f = 0, p = h.length; f < p; f++) {
            const m = h[f];
            o(e.shapes, m);
          }
        else
          o(e.shapes, h);
      }
    }
    if (this.isSkinnedMesh && (i.bindMode = this.bindMode, i.bindMatrix = this.bindMatrix.toArray(), this.skeleton !== void 0 && (o(e.skeletons, this.skeleton), i.skeleton = this.skeleton.uuid)), this.material !== void 0)
      if (Array.isArray(this.material)) {
        const c = [];
        for (let h = 0, f = this.material.length; h < f; h++)
          c.push(o(e.materials, this.material[h]));
        i.material = c;
      } else
        i.material = o(e.materials, this.material);
    if (this.children.length > 0) {
      i.children = [];
      for (let c = 0; c < this.children.length; c++)
        i.children.push(this.children[c].toJSON(e).object);
    }
    if (this.animations.length > 0) {
      i.animations = [];
      for (let c = 0; c < this.animations.length; c++) {
        const h = this.animations[c];
        i.animations.push(o(e.animations, h));
      }
    }
    if (t) {
      const c = l(e.geometries), h = l(e.materials), f = l(e.textures), p = l(e.images), m = l(e.shapes), g = l(e.skeletons), v = l(e.animations), x = l(e.nodes);
      c.length > 0 && (n.geometries = c), h.length > 0 && (n.materials = h), f.length > 0 && (n.textures = f), p.length > 0 && (n.images = p), m.length > 0 && (n.shapes = m), g.length > 0 && (n.skeletons = g), v.length > 0 && (n.animations = v), x.length > 0 && (n.nodes = x);
    }
    return n.object = i, n;
    function l(c) {
      const h = [];
      for (const f in c) {
        const p = c[f];
        delete p.metadata, h.push(p);
      }
      return h;
    }
  }
  clone(e) {
    return new this.constructor().copy(this, e);
  }
  copy(e, t = !0) {
    if (this.name = e.name, this.up.copy(e.up), this.position.copy(e.position), this.rotation.order = e.rotation.order, this.quaternion.copy(e.quaternion), this.scale.copy(e.scale), this.matrix.copy(e.matrix), this.matrixWorld.copy(e.matrixWorld), this.matrixAutoUpdate = e.matrixAutoUpdate, this.matrixWorldAutoUpdate = e.matrixWorldAutoUpdate, this.matrixWorldNeedsUpdate = e.matrixWorldNeedsUpdate, this.layers.mask = e.layers.mask, this.visible = e.visible, this.castShadow = e.castShadow, this.receiveShadow = e.receiveShadow, this.frustumCulled = e.frustumCulled, this.renderOrder = e.renderOrder, this.animations = e.animations.slice(), this.userData = JSON.parse(JSON.stringify(e.userData)), t === !0)
      for (let n = 0; n < e.children.length; n++) {
        const i = e.children[n];
        this.add(i.clone());
      }
    return this;
  }
}
Nt.DEFAULT_UP = /* @__PURE__ */ new I(0, 1, 0);
Nt.DEFAULT_MATRIX_AUTO_UPDATE = !0;
Nt.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = !0;
const Ii = /* @__PURE__ */ new I(), gs = /* @__PURE__ */ new I(), ud = /* @__PURE__ */ new I(), vs = /* @__PURE__ */ new I(), kr = /* @__PURE__ */ new I(), qr = /* @__PURE__ */ new I(), g0 = /* @__PURE__ */ new I(), hd = /* @__PURE__ */ new I(), fd = /* @__PURE__ */ new I(), dd = /* @__PURE__ */ new I();
let kc = !1;
class $n {
  constructor(e = new I(), t = new I(), n = new I()) {
    this.a = e, this.b = t, this.c = n;
  }
  static getNormal(e, t, n, i) {
    i.subVectors(n, t), Ii.subVectors(e, t), i.cross(Ii);
    const o = i.lengthSq();
    return o > 0 ? i.multiplyScalar(1 / Math.sqrt(o)) : i.set(0, 0, 0);
  }
  // static/instance method to calculate barycentric coordinates
  // based on: http://www.blackpawn.com/texts/pointinpoly/default.html
  static getBarycoord(e, t, n, i, o) {
    Ii.subVectors(i, t), gs.subVectors(n, t), ud.subVectors(e, t);
    const l = Ii.dot(Ii), c = Ii.dot(gs), h = Ii.dot(ud), f = gs.dot(gs), p = gs.dot(ud), m = l * f - c * c;
    if (m === 0)
      return o.set(0, 0, 0), null;
    const g = 1 / m, v = (f * h - c * p) * g, x = (l * p - c * h) * g;
    return o.set(1 - v - x, x, v);
  }
  static containsPoint(e, t, n, i) {
    return this.getBarycoord(e, t, n, i, vs) === null ? !1 : vs.x >= 0 && vs.y >= 0 && vs.x + vs.y <= 1;
  }
  static getUV(e, t, n, i, o, l, c, h) {
    return kc === !1 && (console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation()."), kc = !0), this.getInterpolation(e, t, n, i, o, l, c, h);
  }
  static getInterpolation(e, t, n, i, o, l, c, h) {
    return this.getBarycoord(e, t, n, i, vs) === null ? (h.x = 0, h.y = 0, "z" in h && (h.z = 0), "w" in h && (h.w = 0), null) : (h.setScalar(0), h.addScaledVector(o, vs.x), h.addScaledVector(l, vs.y), h.addScaledVector(c, vs.z), h);
  }
  static isFrontFacing(e, t, n, i) {
    return Ii.subVectors(n, t), gs.subVectors(e, t), Ii.cross(gs).dot(i) < 0;
  }
  set(e, t, n) {
    return this.a.copy(e), this.b.copy(t), this.c.copy(n), this;
  }
  setFromPointsAndIndices(e, t, n, i) {
    return this.a.copy(e[t]), this.b.copy(e[n]), this.c.copy(e[i]), this;
  }
  setFromAttributeAndIndices(e, t, n, i) {
    return this.a.fromBufferAttribute(e, t), this.b.fromBufferAttribute(e, n), this.c.fromBufferAttribute(e, i), this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    return this.a.copy(e.a), this.b.copy(e.b), this.c.copy(e.c), this;
  }
  getArea() {
    return Ii.subVectors(this.c, this.b), gs.subVectors(this.a, this.b), Ii.cross(gs).length() * 0.5;
  }
  getMidpoint(e) {
    return e.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
  }
  getNormal(e) {
    return $n.getNormal(this.a, this.b, this.c, e);
  }
  getPlane(e) {
    return e.setFromCoplanarPoints(this.a, this.b, this.c);
  }
  getBarycoord(e, t) {
    return $n.getBarycoord(e, this.a, this.b, this.c, t);
  }
  getUV(e, t, n, i, o) {
    return kc === !1 && (console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation()."), kc = !0), $n.getInterpolation(e, this.a, this.b, this.c, t, n, i, o);
  }
  getInterpolation(e, t, n, i, o) {
    return $n.getInterpolation(e, this.a, this.b, this.c, t, n, i, o);
  }
  containsPoint(e) {
    return $n.containsPoint(e, this.a, this.b, this.c);
  }
  isFrontFacing(e) {
    return $n.isFrontFacing(this.a, this.b, this.c, e);
  }
  intersectsBox(e) {
    return e.intersectsTriangle(this);
  }
  closestPointToPoint(e, t) {
    const n = this.a, i = this.b, o = this.c;
    let l, c;
    kr.subVectors(i, n), qr.subVectors(o, n), hd.subVectors(e, n);
    const h = kr.dot(hd), f = qr.dot(hd);
    if (h <= 0 && f <= 0)
      return t.copy(n);
    fd.subVectors(e, i);
    const p = kr.dot(fd), m = qr.dot(fd);
    if (p >= 0 && m <= p)
      return t.copy(i);
    const g = h * m - p * f;
    if (g <= 0 && h >= 0 && p <= 0)
      return l = h / (h - p), t.copy(n).addScaledVector(kr, l);
    dd.subVectors(e, o);
    const v = kr.dot(dd), x = qr.dot(dd);
    if (x >= 0 && v <= x)
      return t.copy(o);
    const E = v * f - h * x;
    if (E <= 0 && f >= 0 && x <= 0)
      return c = f / (f - x), t.copy(n).addScaledVector(qr, c);
    const S = p * x - v * m;
    if (S <= 0 && m - p >= 0 && v - x >= 0)
      return g0.subVectors(o, i), c = (m - p) / (m - p + (v - x)), t.copy(i).addScaledVector(g0, c);
    const y = 1 / (S + E + g);
    return l = E * y, c = g * y, t.copy(n).addScaledVector(kr, l).addScaledVector(qr, c);
  }
  equals(e) {
    return e.a.equals(this.a) && e.b.equals(this.b) && e.c.equals(this.c);
  }
}
const rx = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
}, Zs = { h: 0, s: 0, l: 0 }, qc = { h: 0, s: 0, l: 0 };
function pd(a, e, t) {
  return t < 0 && (t += 1), t > 1 && (t -= 1), t < 1 / 6 ? a + (e - a) * 6 * t : t < 1 / 2 ? e : t < 2 / 3 ? a + (e - a) * 6 * (2 / 3 - t) : a;
}
class Fe {
  constructor(e, t, n) {
    return this.isColor = !0, this.r = 1, this.g = 1, this.b = 1, this.set(e, t, n);
  }
  set(e, t, n) {
    if (t === void 0 && n === void 0) {
      const i = e;
      i && i.isColor ? this.copy(i) : typeof i == "number" ? this.setHex(i) : typeof i == "string" && this.setStyle(i);
    } else
      this.setRGB(e, t, n);
    return this;
  }
  setScalar(e) {
    return this.r = e, this.g = e, this.b = e, this;
  }
  setHex(e, t = nn) {
    return e = Math.floor(e), this.r = (e >> 16 & 255) / 255, this.g = (e >> 8 & 255) / 255, this.b = (e & 255) / 255, Dt.toWorkingColorSpace(this, t), this;
  }
  setRGB(e, t, n, i = Dt.workingColorSpace) {
    return this.r = e, this.g = t, this.b = n, Dt.toWorkingColorSpace(this, i), this;
  }
  setHSL(e, t, n, i = Dt.workingColorSpace) {
    if (e = hm(e, 1), t = sn(t, 0, 1), n = sn(n, 0, 1), t === 0)
      this.r = this.g = this.b = n;
    else {
      const o = n <= 0.5 ? n * (1 + t) : n + t - n * t, l = 2 * n - o;
      this.r = pd(l, o, e + 1 / 3), this.g = pd(l, o, e), this.b = pd(l, o, e - 1 / 3);
    }
    return Dt.toWorkingColorSpace(this, i), this;
  }
  setStyle(e, t = nn) {
    function n(o) {
      o !== void 0 && parseFloat(o) < 1 && console.warn("THREE.Color: Alpha component of " + e + " will be ignored.");
    }
    let i;
    if (i = /^(\w+)\(([^\)]*)\)/.exec(e)) {
      let o;
      const l = i[1], c = i[2];
      switch (l) {
        case "rgb":
        case "rgba":
          if (o = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(c))
            return n(o[4]), this.setRGB(
              Math.min(255, parseInt(o[1], 10)) / 255,
              Math.min(255, parseInt(o[2], 10)) / 255,
              Math.min(255, parseInt(o[3], 10)) / 255,
              t
            );
          if (o = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(c))
            return n(o[4]), this.setRGB(
              Math.min(100, parseInt(o[1], 10)) / 100,
              Math.min(100, parseInt(o[2], 10)) / 100,
              Math.min(100, parseInt(o[3], 10)) / 100,
              t
            );
          break;
        case "hsl":
        case "hsla":
          if (o = /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(c))
            return n(o[4]), this.setHSL(
              parseFloat(o[1]) / 360,
              parseFloat(o[2]) / 100,
              parseFloat(o[3]) / 100,
              t
            );
          break;
        default:
          console.warn("THREE.Color: Unknown color model " + e);
      }
    } else if (i = /^\#([A-Fa-f\d]+)$/.exec(e)) {
      const o = i[1], l = o.length;
      if (l === 3)
        return this.setRGB(
          parseInt(o.charAt(0), 16) / 15,
          parseInt(o.charAt(1), 16) / 15,
          parseInt(o.charAt(2), 16) / 15,
          t
        );
      if (l === 6)
        return this.setHex(parseInt(o, 16), t);
      console.warn("THREE.Color: Invalid hex color " + e);
    } else if (e && e.length > 0)
      return this.setColorName(e, t);
    return this;
  }
  setColorName(e, t = nn) {
    const n = rx[e.toLowerCase()];
    return n !== void 0 ? this.setHex(n, t) : console.warn("THREE.Color: Unknown color " + e), this;
  }
  clone() {
    return new this.constructor(this.r, this.g, this.b);
  }
  copy(e) {
    return this.r = e.r, this.g = e.g, this.b = e.b, this;
  }
  copySRGBToLinear(e) {
    return this.r = mo(e.r), this.g = mo(e.g), this.b = mo(e.b), this;
  }
  copyLinearToSRGB(e) {
    return this.r = nd(e.r), this.g = nd(e.g), this.b = nd(e.b), this;
  }
  convertSRGBToLinear() {
    return this.copySRGBToLinear(this), this;
  }
  convertLinearToSRGB() {
    return this.copyLinearToSRGB(this), this;
  }
  getHex(e = nn) {
    return Dt.fromWorkingColorSpace(Nn.copy(this), e), Math.round(sn(Nn.r * 255, 0, 255)) * 65536 + Math.round(sn(Nn.g * 255, 0, 255)) * 256 + Math.round(sn(Nn.b * 255, 0, 255));
  }
  getHexString(e = nn) {
    return ("000000" + this.getHex(e).toString(16)).slice(-6);
  }
  getHSL(e, t = Dt.workingColorSpace) {
    Dt.fromWorkingColorSpace(Nn.copy(this), t);
    const n = Nn.r, i = Nn.g, o = Nn.b, l = Math.max(n, i, o), c = Math.min(n, i, o);
    let h, f;
    const p = (c + l) / 2;
    if (c === l)
      h = 0, f = 0;
    else {
      const m = l - c;
      switch (f = p <= 0.5 ? m / (l + c) : m / (2 - l - c), l) {
        case n:
          h = (i - o) / m + (i < o ? 6 : 0);
          break;
        case i:
          h = (o - n) / m + 2;
          break;
        case o:
          h = (n - i) / m + 4;
          break;
      }
      h /= 6;
    }
    return e.h = h, e.s = f, e.l = p, e;
  }
  getRGB(e, t = Dt.workingColorSpace) {
    return Dt.fromWorkingColorSpace(Nn.copy(this), t), e.r = Nn.r, e.g = Nn.g, e.b = Nn.b, e;
  }
  getStyle(e = nn) {
    Dt.fromWorkingColorSpace(Nn.copy(this), e);
    const t = Nn.r, n = Nn.g, i = Nn.b;
    return e !== nn ? `color(${e} ${t.toFixed(3)} ${n.toFixed(3)} ${i.toFixed(3)})` : `rgb(${Math.round(t * 255)},${Math.round(n * 255)},${Math.round(i * 255)})`;
  }
  offsetHSL(e, t, n) {
    return this.getHSL(Zs), this.setHSL(Zs.h + e, Zs.s + t, Zs.l + n);
  }
  add(e) {
    return this.r += e.r, this.g += e.g, this.b += e.b, this;
  }
  addColors(e, t) {
    return this.r = e.r + t.r, this.g = e.g + t.g, this.b = e.b + t.b, this;
  }
  addScalar(e) {
    return this.r += e, this.g += e, this.b += e, this;
  }
  sub(e) {
    return this.r = Math.max(0, this.r - e.r), this.g = Math.max(0, this.g - e.g), this.b = Math.max(0, this.b - e.b), this;
  }
  multiply(e) {
    return this.r *= e.r, this.g *= e.g, this.b *= e.b, this;
  }
  multiplyScalar(e) {
    return this.r *= e, this.g *= e, this.b *= e, this;
  }
  lerp(e, t) {
    return this.r += (e.r - this.r) * t, this.g += (e.g - this.g) * t, this.b += (e.b - this.b) * t, this;
  }
  lerpColors(e, t, n) {
    return this.r = e.r + (t.r - e.r) * n, this.g = e.g + (t.g - e.g) * n, this.b = e.b + (t.b - e.b) * n, this;
  }
  lerpHSL(e, t) {
    this.getHSL(Zs), e.getHSL(qc);
    const n = vl(Zs.h, qc.h, t), i = vl(Zs.s, qc.s, t), o = vl(Zs.l, qc.l, t);
    return this.setHSL(n, i, o), this;
  }
  setFromVector3(e) {
    return this.r = e.x, this.g = e.y, this.b = e.z, this;
  }
  applyMatrix3(e) {
    const t = this.r, n = this.g, i = this.b, o = e.elements;
    return this.r = o[0] * t + o[3] * n + o[6] * i, this.g = o[1] * t + o[4] * n + o[7] * i, this.b = o[2] * t + o[5] * n + o[8] * i, this;
  }
  equals(e) {
    return e.r === this.r && e.g === this.g && e.b === this.b;
  }
  fromArray(e, t = 0) {
    return this.r = e[t], this.g = e[t + 1], this.b = e[t + 2], this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this.r, e[t + 1] = this.g, e[t + 2] = this.b, e;
  }
  fromBufferAttribute(e, t) {
    return this.r = e.getX(t), this.g = e.getY(t), this.b = e.getZ(t), this;
  }
  toJSON() {
    return this.getHex();
  }
  *[Symbol.iterator]() {
    yield this.r, yield this.g, yield this.b;
  }
}
const Nn = /* @__PURE__ */ new Fe();
Fe.NAMES = rx;
let qb = 0;
class zn extends Cs {
  constructor() {
    super(), this.isMaterial = !0, Object.defineProperty(this, "id", { value: qb++ }), this.uuid = mi(), this.name = "", this.type = "Material", this.blending = Qa, this.side = As, this.vertexColors = !1, this.opacity = 1, this.transparent = !1, this.alphaHash = !1, this.blendSrc = Gu, this.blendDst = Wu, this.blendEquation = Qs, this.blendSrcAlpha = null, this.blendDstAlpha = null, this.blendEquationAlpha = null, this.blendColor = new Fe(0, 0, 0), this.blendAlpha = 0, this.depthFunc = Ml, this.depthTest = !0, this.depthWrite = !0, this.stencilWriteMask = 255, this.stencilFunc = Dp, this.stencilRef = 0, this.stencilFuncMask = 255, this.stencilFail = Xa, this.stencilZFail = Xa, this.stencilZPass = Xa, this.stencilWrite = !1, this.clippingPlanes = null, this.clipIntersection = !1, this.clipShadows = !1, this.shadowSide = null, this.colorWrite = !0, this.precision = null, this.polygonOffset = !1, this.polygonOffsetFactor = 0, this.polygonOffsetUnits = 0, this.dithering = !1, this.alphaToCoverage = !1, this.premultipliedAlpha = !1, this.forceSinglePass = !1, this.visible = !0, this.toneMapped = !0, this.userData = {}, this.version = 0, this._alphaTest = 0;
  }
  get alphaTest() {
    return this._alphaTest;
  }
  set alphaTest(e) {
    this._alphaTest > 0 != e > 0 && this.version++, this._alphaTest = e;
  }
  onBuild() {
  }
  onBeforeRender() {
  }
  onBeforeCompile() {
  }
  customProgramCacheKey() {
    return this.onBeforeCompile.toString();
  }
  setValues(e) {
    if (e !== void 0)
      for (const t in e) {
        const n = e[t];
        if (n === void 0) {
          console.warn(`THREE.Material: parameter '${t}' has value of undefined.`);
          continue;
        }
        const i = this[t];
        if (i === void 0) {
          console.warn(`THREE.Material: '${t}' is not a property of THREE.${this.type}.`);
          continue;
        }
        i && i.isColor ? i.set(n) : i && i.isVector3 && n && n.isVector3 ? i.copy(n) : this[t] = n;
      }
  }
  toJSON(e) {
    const t = e === void 0 || typeof e == "string";
    t && (e = {
      textures: {},
      images: {}
    });
    const n = {
      metadata: {
        version: 4.6,
        type: "Material",
        generator: "Material.toJSON"
      }
    };
    n.uuid = this.uuid, n.type = this.type, this.name !== "" && (n.name = this.name), this.color && this.color.isColor && (n.color = this.color.getHex()), this.roughness !== void 0 && (n.roughness = this.roughness), this.metalness !== void 0 && (n.metalness = this.metalness), this.sheen !== void 0 && (n.sheen = this.sheen), this.sheenColor && this.sheenColor.isColor && (n.sheenColor = this.sheenColor.getHex()), this.sheenRoughness !== void 0 && (n.sheenRoughness = this.sheenRoughness), this.emissive && this.emissive.isColor && (n.emissive = this.emissive.getHex()), this.emissiveIntensity && this.emissiveIntensity !== 1 && (n.emissiveIntensity = this.emissiveIntensity), this.specular && this.specular.isColor && (n.specular = this.specular.getHex()), this.specularIntensity !== void 0 && (n.specularIntensity = this.specularIntensity), this.specularColor && this.specularColor.isColor && (n.specularColor = this.specularColor.getHex()), this.shininess !== void 0 && (n.shininess = this.shininess), this.clearcoat !== void 0 && (n.clearcoat = this.clearcoat), this.clearcoatRoughness !== void 0 && (n.clearcoatRoughness = this.clearcoatRoughness), this.clearcoatMap && this.clearcoatMap.isTexture && (n.clearcoatMap = this.clearcoatMap.toJSON(e).uuid), this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture && (n.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(e).uuid), this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture && (n.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(e).uuid, n.clearcoatNormalScale = this.clearcoatNormalScale.toArray()), this.iridescence !== void 0 && (n.iridescence = this.iridescence), this.iridescenceIOR !== void 0 && (n.iridescenceIOR = this.iridescenceIOR), this.iridescenceThicknessRange !== void 0 && (n.iridescenceThicknessRange = this.iridescenceThicknessRange), this.iridescenceMap && this.iridescenceMap.isTexture && (n.iridescenceMap = this.iridescenceMap.toJSON(e).uuid), this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture && (n.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON(e).uuid), this.anisotropy !== void 0 && (n.anisotropy = this.anisotropy), this.anisotropyRotation !== void 0 && (n.anisotropyRotation = this.anisotropyRotation), this.anisotropyMap && this.anisotropyMap.isTexture && (n.anisotropyMap = this.anisotropyMap.toJSON(e).uuid), this.map && this.map.isTexture && (n.map = this.map.toJSON(e).uuid), this.matcap && this.matcap.isTexture && (n.matcap = this.matcap.toJSON(e).uuid), this.alphaMap && this.alphaMap.isTexture && (n.alphaMap = this.alphaMap.toJSON(e).uuid), this.lightMap && this.lightMap.isTexture && (n.lightMap = this.lightMap.toJSON(e).uuid, n.lightMapIntensity = this.lightMapIntensity), this.aoMap && this.aoMap.isTexture && (n.aoMap = this.aoMap.toJSON(e).uuid, n.aoMapIntensity = this.aoMapIntensity), this.bumpMap && this.bumpMap.isTexture && (n.bumpMap = this.bumpMap.toJSON(e).uuid, n.bumpScale = this.bumpScale), this.normalMap && this.normalMap.isTexture && (n.normalMap = this.normalMap.toJSON(e).uuid, n.normalMapType = this.normalMapType, n.normalScale = this.normalScale.toArray()), this.displacementMap && this.displacementMap.isTexture && (n.displacementMap = this.displacementMap.toJSON(e).uuid, n.displacementScale = this.displacementScale, n.displacementBias = this.displacementBias), this.roughnessMap && this.roughnessMap.isTexture && (n.roughnessMap = this.roughnessMap.toJSON(e).uuid), this.metalnessMap && this.metalnessMap.isTexture && (n.metalnessMap = this.metalnessMap.toJSON(e).uuid), this.emissiveMap && this.emissiveMap.isTexture && (n.emissiveMap = this.emissiveMap.toJSON(e).uuid), this.specularMap && this.specularMap.isTexture && (n.specularMap = this.specularMap.toJSON(e).uuid), this.specularIntensityMap && this.specularIntensityMap.isTexture && (n.specularIntensityMap = this.specularIntensityMap.toJSON(e).uuid), this.specularColorMap && this.specularColorMap.isTexture && (n.specularColorMap = this.specularColorMap.toJSON(e).uuid), this.envMap && this.envMap.isTexture && (n.envMap = this.envMap.toJSON(e).uuid, this.combine !== void 0 && (n.combine = this.combine)), this.envMapIntensity !== void 0 && (n.envMapIntensity = this.envMapIntensity), this.reflectivity !== void 0 && (n.reflectivity = this.reflectivity), this.refractionRatio !== void 0 && (n.refractionRatio = this.refractionRatio), this.gradientMap && this.gradientMap.isTexture && (n.gradientMap = this.gradientMap.toJSON(e).uuid), this.transmission !== void 0 && (n.transmission = this.transmission), this.transmissionMap && this.transmissionMap.isTexture && (n.transmissionMap = this.transmissionMap.toJSON(e).uuid), this.thickness !== void 0 && (n.thickness = this.thickness), this.thicknessMap && this.thicknessMap.isTexture && (n.thicknessMap = this.thicknessMap.toJSON(e).uuid), this.attenuationDistance !== void 0 && this.attenuationDistance !== 1 / 0 && (n.attenuationDistance = this.attenuationDistance), this.attenuationColor !== void 0 && (n.attenuationColor = this.attenuationColor.getHex()), this.size !== void 0 && (n.size = this.size), this.shadowSide !== null && (n.shadowSide = this.shadowSide), this.sizeAttenuation !== void 0 && (n.sizeAttenuation = this.sizeAttenuation), this.blending !== Qa && (n.blending = this.blending), this.side !== As && (n.side = this.side), this.vertexColors === !0 && (n.vertexColors = !0), this.opacity < 1 && (n.opacity = this.opacity), this.transparent === !0 && (n.transparent = !0), this.blendSrc !== Gu && (n.blendSrc = this.blendSrc), this.blendDst !== Wu && (n.blendDst = this.blendDst), this.blendEquation !== Qs && (n.blendEquation = this.blendEquation), this.blendSrcAlpha !== null && (n.blendSrcAlpha = this.blendSrcAlpha), this.blendDstAlpha !== null && (n.blendDstAlpha = this.blendDstAlpha), this.blendEquationAlpha !== null && (n.blendEquationAlpha = this.blendEquationAlpha), this.blendColor && this.blendColor.isColor && (n.blendColor = this.blendColor.getHex()), this.blendAlpha !== 0 && (n.blendAlpha = this.blendAlpha), this.depthFunc !== Ml && (n.depthFunc = this.depthFunc), this.depthTest === !1 && (n.depthTest = this.depthTest), this.depthWrite === !1 && (n.depthWrite = this.depthWrite), this.colorWrite === !1 && (n.colorWrite = this.colorWrite), this.stencilWriteMask !== 255 && (n.stencilWriteMask = this.stencilWriteMask), this.stencilFunc !== Dp && (n.stencilFunc = this.stencilFunc), this.stencilRef !== 0 && (n.stencilRef = this.stencilRef), this.stencilFuncMask !== 255 && (n.stencilFuncMask = this.stencilFuncMask), this.stencilFail !== Xa && (n.stencilFail = this.stencilFail), this.stencilZFail !== Xa && (n.stencilZFail = this.stencilZFail), this.stencilZPass !== Xa && (n.stencilZPass = this.stencilZPass), this.stencilWrite === !0 && (n.stencilWrite = this.stencilWrite), this.rotation !== void 0 && this.rotation !== 0 && (n.rotation = this.rotation), this.polygonOffset === !0 && (n.polygonOffset = !0), this.polygonOffsetFactor !== 0 && (n.polygonOffsetFactor = this.polygonOffsetFactor), this.polygonOffsetUnits !== 0 && (n.polygonOffsetUnits = this.polygonOffsetUnits), this.linewidth !== void 0 && this.linewidth !== 1 && (n.linewidth = this.linewidth), this.dashSize !== void 0 && (n.dashSize = this.dashSize), this.gapSize !== void 0 && (n.gapSize = this.gapSize), this.scale !== void 0 && (n.scale = this.scale), this.dithering === !0 && (n.dithering = !0), this.alphaTest > 0 && (n.alphaTest = this.alphaTest), this.alphaHash === !0 && (n.alphaHash = !0), this.alphaToCoverage === !0 && (n.alphaToCoverage = !0), this.premultipliedAlpha === !0 && (n.premultipliedAlpha = !0), this.forceSinglePass === !0 && (n.forceSinglePass = !0), this.wireframe === !0 && (n.wireframe = !0), this.wireframeLinewidth > 1 && (n.wireframeLinewidth = this.wireframeLinewidth), this.wireframeLinecap !== "round" && (n.wireframeLinecap = this.wireframeLinecap), this.wireframeLinejoin !== "round" && (n.wireframeLinejoin = this.wireframeLinejoin), this.flatShading === !0 && (n.flatShading = !0), this.visible === !1 && (n.visible = !1), this.toneMapped === !1 && (n.toneMapped = !1), this.fog === !1 && (n.fog = !1), Object.keys(this.userData).length > 0 && (n.userData = this.userData);
    function i(o) {
      const l = [];
      for (const c in o) {
        const h = o[c];
        delete h.metadata, l.push(h);
      }
      return l;
    }
    if (t) {
      const o = i(e.textures), l = i(e.images);
      o.length > 0 && (n.textures = o), l.length > 0 && (n.images = l);
    }
    return n;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    this.name = e.name, this.blending = e.blending, this.side = e.side, this.vertexColors = e.vertexColors, this.opacity = e.opacity, this.transparent = e.transparent, this.blendSrc = e.blendSrc, this.blendDst = e.blendDst, this.blendEquation = e.blendEquation, this.blendSrcAlpha = e.blendSrcAlpha, this.blendDstAlpha = e.blendDstAlpha, this.blendEquationAlpha = e.blendEquationAlpha, this.blendColor.copy(e.blendColor), this.blendAlpha = e.blendAlpha, this.depthFunc = e.depthFunc, this.depthTest = e.depthTest, this.depthWrite = e.depthWrite, this.stencilWriteMask = e.stencilWriteMask, this.stencilFunc = e.stencilFunc, this.stencilRef = e.stencilRef, this.stencilFuncMask = e.stencilFuncMask, this.stencilFail = e.stencilFail, this.stencilZFail = e.stencilZFail, this.stencilZPass = e.stencilZPass, this.stencilWrite = e.stencilWrite;
    const t = e.clippingPlanes;
    let n = null;
    if (t !== null) {
      const i = t.length;
      n = new Array(i);
      for (let o = 0; o !== i; ++o)
        n[o] = t[o].clone();
    }
    return this.clippingPlanes = n, this.clipIntersection = e.clipIntersection, this.clipShadows = e.clipShadows, this.shadowSide = e.shadowSide, this.colorWrite = e.colorWrite, this.precision = e.precision, this.polygonOffset = e.polygonOffset, this.polygonOffsetFactor = e.polygonOffsetFactor, this.polygonOffsetUnits = e.polygonOffsetUnits, this.dithering = e.dithering, this.alphaTest = e.alphaTest, this.alphaHash = e.alphaHash, this.alphaToCoverage = e.alphaToCoverage, this.premultipliedAlpha = e.premultipliedAlpha, this.forceSinglePass = e.forceSinglePass, this.visible = e.visible, this.toneMapped = e.toneMapped, this.userData = JSON.parse(JSON.stringify(e.userData)), this;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
}
class oa extends zn {
  constructor(e) {
    super(), this.isMeshBasicMaterial = !0, this.type = "MeshBasicMaterial", this.color = new Fe(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = Xl, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.specularMap = e.specularMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.combine = e.combine, this.reflectivity = e.reflectivity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.fog = e.fog, this;
  }
}
const Ss = /* @__PURE__ */ Yb();
function Yb() {
  const a = new ArrayBuffer(4), e = new Float32Array(a), t = new Uint32Array(a), n = new Uint32Array(512), i = new Uint32Array(512);
  for (let h = 0; h < 256; ++h) {
    const f = h - 127;
    f < -27 ? (n[h] = 0, n[h | 256] = 32768, i[h] = 24, i[h | 256] = 24) : f < -14 ? (n[h] = 1024 >> -f - 14, n[h | 256] = 1024 >> -f - 14 | 32768, i[h] = -f - 1, i[h | 256] = -f - 1) : f <= 15 ? (n[h] = f + 15 << 10, n[h | 256] = f + 15 << 10 | 32768, i[h] = 13, i[h | 256] = 13) : f < 128 ? (n[h] = 31744, n[h | 256] = 64512, i[h] = 24, i[h | 256] = 24) : (n[h] = 31744, n[h | 256] = 64512, i[h] = 13, i[h | 256] = 13);
  }
  const o = new Uint32Array(2048), l = new Uint32Array(64), c = new Uint32Array(64);
  for (let h = 1; h < 1024; ++h) {
    let f = h << 13, p = 0;
    for (; (f & 8388608) === 0; )
      f <<= 1, p -= 8388608;
    f &= -8388609, p += 947912704, o[h] = f | p;
  }
  for (let h = 1024; h < 2048; ++h)
    o[h] = 939524096 + (h - 1024 << 13);
  for (let h = 1; h < 31; ++h)
    l[h] = h << 23;
  l[31] = 1199570944, l[32] = 2147483648;
  for (let h = 33; h < 63; ++h)
    l[h] = 2147483648 + (h - 32 << 23);
  l[63] = 3347054592;
  for (let h = 1; h < 64; ++h)
    h !== 32 && (c[h] = 1024);
  return {
    floatView: e,
    uint32View: t,
    baseTable: n,
    shiftTable: i,
    mantissaTable: o,
    exponentTable: l,
    offsetTable: c
  };
}
function Jn(a) {
  Math.abs(a) > 65504 && console.warn("THREE.DataUtils.toHalfFloat(): Value out of range."), a = sn(a, -65504, 65504), Ss.floatView[0] = a;
  const e = Ss.uint32View[0], t = e >> 23 & 511;
  return Ss.baseTable[t] + ((e & 8388607) >> Ss.shiftTable[t]);
}
function pl(a) {
  const e = a >> 10;
  return Ss.uint32View[0] = Ss.mantissaTable[Ss.offsetTable[e] + (a & 1023)] + Ss.exponentTable[e], Ss.floatView[0];
}
const jb = {
  toHalfFloat: Jn,
  fromHalfFloat: pl
}, dn = /* @__PURE__ */ new I(), Yc = /* @__PURE__ */ new de();
class zt {
  constructor(e, t, n = !1) {
    if (Array.isArray(e))
      throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
    this.isBufferAttribute = !0, this.name = "", this.array = e, this.itemSize = t, this.count = e !== void 0 ? e.length / t : 0, this.normalized = n, this.usage = Dl, this._updateRange = { offset: 0, count: -1 }, this.updateRanges = [], this.gpuType = Hi, this.version = 0;
  }
  onUploadCallback() {
  }
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
  get updateRange() {
    return console.warn("THREE.BufferAttribute: updateRange() is deprecated and will be removed in r169. Use addUpdateRange() instead."), this._updateRange;
  }
  setUsage(e) {
    return this.usage = e, this;
  }
  addUpdateRange(e, t) {
    this.updateRanges.push({ start: e, count: t });
  }
  clearUpdateRanges() {
    this.updateRanges.length = 0;
  }
  copy(e) {
    return this.name = e.name, this.array = new e.array.constructor(e.array), this.itemSize = e.itemSize, this.count = e.count, this.normalized = e.normalized, this.usage = e.usage, this.gpuType = e.gpuType, this;
  }
  copyAt(e, t, n) {
    e *= this.itemSize, n *= t.itemSize;
    for (let i = 0, o = this.itemSize; i < o; i++)
      this.array[e + i] = t.array[n + i];
    return this;
  }
  copyArray(e) {
    return this.array.set(e), this;
  }
  applyMatrix3(e) {
    if (this.itemSize === 2)
      for (let t = 0, n = this.count; t < n; t++)
        Yc.fromBufferAttribute(this, t), Yc.applyMatrix3(e), this.setXY(t, Yc.x, Yc.y);
    else if (this.itemSize === 3)
      for (let t = 0, n = this.count; t < n; t++)
        dn.fromBufferAttribute(this, t), dn.applyMatrix3(e), this.setXYZ(t, dn.x, dn.y, dn.z);
    return this;
  }
  applyMatrix4(e) {
    for (let t = 0, n = this.count; t < n; t++)
      dn.fromBufferAttribute(this, t), dn.applyMatrix4(e), this.setXYZ(t, dn.x, dn.y, dn.z);
    return this;
  }
  applyNormalMatrix(e) {
    for (let t = 0, n = this.count; t < n; t++)
      dn.fromBufferAttribute(this, t), dn.applyNormalMatrix(e), this.setXYZ(t, dn.x, dn.y, dn.z);
    return this;
  }
  transformDirection(e) {
    for (let t = 0, n = this.count; t < n; t++)
      dn.fromBufferAttribute(this, t), dn.transformDirection(e), this.setXYZ(t, dn.x, dn.y, dn.z);
    return this;
  }
  set(e, t = 0) {
    return this.array.set(e, t), this;
  }
  getComponent(e, t) {
    let n = this.array[e * this.itemSize + t];
    return this.normalized && (n = ei(n, this.array)), n;
  }
  setComponent(e, t, n) {
    return this.normalized && (n = _t(n, this.array)), this.array[e * this.itemSize + t] = n, this;
  }
  getX(e) {
    let t = this.array[e * this.itemSize];
    return this.normalized && (t = ei(t, this.array)), t;
  }
  setX(e, t) {
    return this.normalized && (t = _t(t, this.array)), this.array[e * this.itemSize] = t, this;
  }
  getY(e) {
    let t = this.array[e * this.itemSize + 1];
    return this.normalized && (t = ei(t, this.array)), t;
  }
  setY(e, t) {
    return this.normalized && (t = _t(t, this.array)), this.array[e * this.itemSize + 1] = t, this;
  }
  getZ(e) {
    let t = this.array[e * this.itemSize + 2];
    return this.normalized && (t = ei(t, this.array)), t;
  }
  setZ(e, t) {
    return this.normalized && (t = _t(t, this.array)), this.array[e * this.itemSize + 2] = t, this;
  }
  getW(e) {
    let t = this.array[e * this.itemSize + 3];
    return this.normalized && (t = ei(t, this.array)), t;
  }
  setW(e, t) {
    return this.normalized && (t = _t(t, this.array)), this.array[e * this.itemSize + 3] = t, this;
  }
  setXY(e, t, n) {
    return e *= this.itemSize, this.normalized && (t = _t(t, this.array), n = _t(n, this.array)), this.array[e + 0] = t, this.array[e + 1] = n, this;
  }
  setXYZ(e, t, n, i) {
    return e *= this.itemSize, this.normalized && (t = _t(t, this.array), n = _t(n, this.array), i = _t(i, this.array)), this.array[e + 0] = t, this.array[e + 1] = n, this.array[e + 2] = i, this;
  }
  setXYZW(e, t, n, i, o) {
    return e *= this.itemSize, this.normalized && (t = _t(t, this.array), n = _t(n, this.array), i = _t(i, this.array), o = _t(o, this.array)), this.array[e + 0] = t, this.array[e + 1] = n, this.array[e + 2] = i, this.array[e + 3] = o, this;
  }
  onUpload(e) {
    return this.onUploadCallback = e, this;
  }
  clone() {
    return new this.constructor(this.array, this.itemSize).copy(this);
  }
  toJSON() {
    const e = {
      itemSize: this.itemSize,
      type: this.array.constructor.name,
      array: Array.from(this.array),
      normalized: this.normalized
    };
    return this.name !== "" && (e.name = this.name), this.usage !== Dl && (e.usage = this.usage), e;
  }
}
class Zb extends zt {
  constructor(e, t, n) {
    super(new Int8Array(e), t, n);
  }
}
class Kb extends zt {
  constructor(e, t, n) {
    super(new Uint8Array(e), t, n);
  }
}
class Jb extends zt {
  constructor(e, t, n) {
    super(new Uint8ClampedArray(e), t, n);
  }
}
class Qb extends zt {
  constructor(e, t, n) {
    super(new Int16Array(e), t, n);
  }
}
class pm extends zt {
  constructor(e, t, n) {
    super(new Uint16Array(e), t, n);
  }
}
class $b extends zt {
  constructor(e, t, n) {
    super(new Int32Array(e), t, n);
  }
}
class mm extends zt {
  constructor(e, t, n) {
    super(new Uint32Array(e), t, n);
  }
}
class e1 extends zt {
  constructor(e, t, n) {
    super(new Uint16Array(e), t, n), this.isFloat16BufferAttribute = !0;
  }
  getX(e) {
    let t = pl(this.array[e * this.itemSize]);
    return this.normalized && (t = ei(t, this.array)), t;
  }
  setX(e, t) {
    return this.normalized && (t = _t(t, this.array)), this.array[e * this.itemSize] = Jn(t), this;
  }
  getY(e) {
    let t = pl(this.array[e * this.itemSize + 1]);
    return this.normalized && (t = ei(t, this.array)), t;
  }
  setY(e, t) {
    return this.normalized && (t = _t(t, this.array)), this.array[e * this.itemSize + 1] = Jn(t), this;
  }
  getZ(e) {
    let t = pl(this.array[e * this.itemSize + 2]);
    return this.normalized && (t = ei(t, this.array)), t;
  }
  setZ(e, t) {
    return this.normalized && (t = _t(t, this.array)), this.array[e * this.itemSize + 2] = Jn(t), this;
  }
  getW(e) {
    let t = pl(this.array[e * this.itemSize + 3]);
    return this.normalized && (t = ei(t, this.array)), t;
  }
  setW(e, t) {
    return this.normalized && (t = _t(t, this.array)), this.array[e * this.itemSize + 3] = Jn(t), this;
  }
  setXY(e, t, n) {
    return e *= this.itemSize, this.normalized && (t = _t(t, this.array), n = _t(n, this.array)), this.array[e + 0] = Jn(t), this.array[e + 1] = Jn(n), this;
  }
  setXYZ(e, t, n, i) {
    return e *= this.itemSize, this.normalized && (t = _t(t, this.array), n = _t(n, this.array), i = _t(i, this.array)), this.array[e + 0] = Jn(t), this.array[e + 1] = Jn(n), this.array[e + 2] = Jn(i), this;
  }
  setXYZW(e, t, n, i, o) {
    return e *= this.itemSize, this.normalized && (t = _t(t, this.array), n = _t(n, this.array), i = _t(i, this.array), o = _t(o, this.array)), this.array[e + 0] = Jn(t), this.array[e + 1] = Jn(n), this.array[e + 2] = Jn(i), this.array[e + 3] = Jn(o), this;
  }
}
class Ye extends zt {
  constructor(e, t, n) {
    super(new Float32Array(e), t, n);
  }
}
class t1 extends zt {
  constructor(e, t, n) {
    super(new Float64Array(e), t, n);
  }
}
let n1 = 0;
const Ti = /* @__PURE__ */ new rt(), md = /* @__PURE__ */ new Nt(), Yr = /* @__PURE__ */ new I(), di = /* @__PURE__ */ new kn(), rl = /* @__PURE__ */ new kn(), En = /* @__PURE__ */ new I();
class xt extends Cs {
  constructor() {
    super(), this.isBufferGeometry = !0, Object.defineProperty(this, "id", { value: n1++ }), this.uuid = mi(), this.name = "", this.type = "BufferGeometry", this.index = null, this.attributes = {}, this.morphAttributes = {}, this.morphTargetsRelative = !1, this.groups = [], this.boundingBox = null, this.boundingSphere = null, this.drawRange = { start: 0, count: 1 / 0 }, this.userData = {};
  }
  getIndex() {
    return this.index;
  }
  setIndex(e) {
    return Array.isArray(e) ? this.index = new (ix(e) ? mm : pm)(e, 1) : this.index = e, this;
  }
  getAttribute(e) {
    return this.attributes[e];
  }
  setAttribute(e, t) {
    return this.attributes[e] = t, this;
  }
  deleteAttribute(e) {
    return delete this.attributes[e], this;
  }
  hasAttribute(e) {
    return this.attributes[e] !== void 0;
  }
  addGroup(e, t, n = 0) {
    this.groups.push({
      start: e,
      count: t,
      materialIndex: n
    });
  }
  clearGroups() {
    this.groups = [];
  }
  setDrawRange(e, t) {
    this.drawRange.start = e, this.drawRange.count = t;
  }
  applyMatrix4(e) {
    const t = this.attributes.position;
    t !== void 0 && (t.applyMatrix4(e), t.needsUpdate = !0);
    const n = this.attributes.normal;
    if (n !== void 0) {
      const o = new yt().getNormalMatrix(e);
      n.applyNormalMatrix(o), n.needsUpdate = !0;
    }
    const i = this.attributes.tangent;
    return i !== void 0 && (i.transformDirection(e), i.needsUpdate = !0), this.boundingBox !== null && this.computeBoundingBox(), this.boundingSphere !== null && this.computeBoundingSphere(), this;
  }
  applyQuaternion(e) {
    return Ti.makeRotationFromQuaternion(e), this.applyMatrix4(Ti), this;
  }
  rotateX(e) {
    return Ti.makeRotationX(e), this.applyMatrix4(Ti), this;
  }
  rotateY(e) {
    return Ti.makeRotationY(e), this.applyMatrix4(Ti), this;
  }
  rotateZ(e) {
    return Ti.makeRotationZ(e), this.applyMatrix4(Ti), this;
  }
  translate(e, t, n) {
    return Ti.makeTranslation(e, t, n), this.applyMatrix4(Ti), this;
  }
  scale(e, t, n) {
    return Ti.makeScale(e, t, n), this.applyMatrix4(Ti), this;
  }
  lookAt(e) {
    return md.lookAt(e), md.updateMatrix(), this.applyMatrix4(md.matrix), this;
  }
  center() {
    return this.computeBoundingBox(), this.boundingBox.getCenter(Yr).negate(), this.translate(Yr.x, Yr.y, Yr.z), this;
  }
  setFromPoints(e) {
    const t = [];
    for (let n = 0, i = e.length; n < i; n++) {
      const o = e[n];
      t.push(o.x, o.y, o.z || 0);
    }
    return this.setAttribute("position", new Ye(t, 3)), this;
  }
  computeBoundingBox() {
    this.boundingBox === null && (this.boundingBox = new kn());
    const e = this.attributes.position, t = this.morphAttributes.position;
    if (e && e.isGLBufferAttribute) {
      console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".', this), this.boundingBox.set(
        new I(-1 / 0, -1 / 0, -1 / 0),
        new I(1 / 0, 1 / 0, 1 / 0)
      );
      return;
    }
    if (e !== void 0) {
      if (this.boundingBox.setFromBufferAttribute(e), t)
        for (let n = 0, i = t.length; n < i; n++) {
          const o = t[n];
          di.setFromBufferAttribute(o), this.morphTargetsRelative ? (En.addVectors(this.boundingBox.min, di.min), this.boundingBox.expandByPoint(En), En.addVectors(this.boundingBox.max, di.max), this.boundingBox.expandByPoint(En)) : (this.boundingBox.expandByPoint(di.min), this.boundingBox.expandByPoint(di.max));
        }
    } else
      this.boundingBox.makeEmpty();
    (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) && console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
  }
  computeBoundingSphere() {
    this.boundingSphere === null && (this.boundingSphere = new In());
    const e = this.attributes.position, t = this.morphAttributes.position;
    if (e && e.isGLBufferAttribute) {
      console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".', this), this.boundingSphere.set(new I(), 1 / 0);
      return;
    }
    if (e) {
      const n = this.boundingSphere.center;
      if (di.setFromBufferAttribute(e), t)
        for (let o = 0, l = t.length; o < l; o++) {
          const c = t[o];
          rl.setFromBufferAttribute(c), this.morphTargetsRelative ? (En.addVectors(di.min, rl.min), di.expandByPoint(En), En.addVectors(di.max, rl.max), di.expandByPoint(En)) : (di.expandByPoint(rl.min), di.expandByPoint(rl.max));
        }
      di.getCenter(n);
      let i = 0;
      for (let o = 0, l = e.count; o < l; o++)
        En.fromBufferAttribute(e, o), i = Math.max(i, n.distanceToSquared(En));
      if (t)
        for (let o = 0, l = t.length; o < l; o++) {
          const c = t[o], h = this.morphTargetsRelative;
          for (let f = 0, p = c.count; f < p; f++)
            En.fromBufferAttribute(c, f), h && (Yr.fromBufferAttribute(e, f), En.add(Yr)), i = Math.max(i, n.distanceToSquared(En));
        }
      this.boundingSphere.radius = Math.sqrt(i), isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
    }
  }
  computeTangents() {
    const e = this.index, t = this.attributes;
    if (e === null || t.position === void 0 || t.normal === void 0 || t.uv === void 0) {
      console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");
      return;
    }
    const n = e.array, i = t.position.array, o = t.normal.array, l = t.uv.array, c = i.length / 3;
    this.hasAttribute("tangent") === !1 && this.setAttribute("tangent", new zt(new Float32Array(4 * c), 4));
    const h = this.getAttribute("tangent").array, f = [], p = [];
    for (let C = 0; C < c; C++)
      f[C] = new I(), p[C] = new I();
    const m = new I(), g = new I(), v = new I(), x = new de(), E = new de(), S = new de(), y = new I(), T = new I();
    function b(C, X, ne) {
      m.fromArray(i, C * 3), g.fromArray(i, X * 3), v.fromArray(i, ne * 3), x.fromArray(l, C * 2), E.fromArray(l, X * 2), S.fromArray(l, ne * 2), g.sub(m), v.sub(m), E.sub(x), S.sub(x);
      const ae = 1 / (E.x * S.y - S.x * E.y);
      isFinite(ae) && (y.copy(g).multiplyScalar(S.y).addScaledVector(v, -E.y).multiplyScalar(ae), T.copy(v).multiplyScalar(E.x).addScaledVector(g, -S.x).multiplyScalar(ae), f[C].add(y), f[X].add(y), f[ne].add(y), p[C].add(T), p[X].add(T), p[ne].add(T));
    }
    let A = this.groups;
    A.length === 0 && (A = [{
      start: 0,
      count: n.length
    }]);
    for (let C = 0, X = A.length; C < X; ++C) {
      const ne = A[C], ae = ne.start, z = ne.count;
      for (let q = ae, W = ae + z; q < W; q += 3)
        b(
          n[q + 0],
          n[q + 1],
          n[q + 2]
        );
    }
    const N = new I(), R = new I(), P = new I(), H = new I();
    function w(C) {
      P.fromArray(o, C * 3), H.copy(P);
      const X = f[C];
      N.copy(X), N.sub(P.multiplyScalar(P.dot(X))).normalize(), R.crossVectors(H, X);
      const ae = R.dot(p[C]) < 0 ? -1 : 1;
      h[C * 4] = N.x, h[C * 4 + 1] = N.y, h[C * 4 + 2] = N.z, h[C * 4 + 3] = ae;
    }
    for (let C = 0, X = A.length; C < X; ++C) {
      const ne = A[C], ae = ne.start, z = ne.count;
      for (let q = ae, W = ae + z; q < W; q += 3)
        w(n[q + 0]), w(n[q + 1]), w(n[q + 2]);
    }
  }
  computeVertexNormals() {
    const e = this.index, t = this.getAttribute("position");
    if (t !== void 0) {
      let n = this.getAttribute("normal");
      if (n === void 0)
        n = new zt(new Float32Array(t.count * 3), 3), this.setAttribute("normal", n);
      else
        for (let g = 0, v = n.count; g < v; g++)
          n.setXYZ(g, 0, 0, 0);
      const i = new I(), o = new I(), l = new I(), c = new I(), h = new I(), f = new I(), p = new I(), m = new I();
      if (e)
        for (let g = 0, v = e.count; g < v; g += 3) {
          const x = e.getX(g + 0), E = e.getX(g + 1), S = e.getX(g + 2);
          i.fromBufferAttribute(t, x), o.fromBufferAttribute(t, E), l.fromBufferAttribute(t, S), p.subVectors(l, o), m.subVectors(i, o), p.cross(m), c.fromBufferAttribute(n, x), h.fromBufferAttribute(n, E), f.fromBufferAttribute(n, S), c.add(p), h.add(p), f.add(p), n.setXYZ(x, c.x, c.y, c.z), n.setXYZ(E, h.x, h.y, h.z), n.setXYZ(S, f.x, f.y, f.z);
        }
      else
        for (let g = 0, v = t.count; g < v; g += 3)
          i.fromBufferAttribute(t, g + 0), o.fromBufferAttribute(t, g + 1), l.fromBufferAttribute(t, g + 2), p.subVectors(l, o), m.subVectors(i, o), p.cross(m), n.setXYZ(g + 0, p.x, p.y, p.z), n.setXYZ(g + 1, p.x, p.y, p.z), n.setXYZ(g + 2, p.x, p.y, p.z);
      this.normalizeNormals(), n.needsUpdate = !0;
    }
  }
  normalizeNormals() {
    const e = this.attributes.normal;
    for (let t = 0, n = e.count; t < n; t++)
      En.fromBufferAttribute(e, t), En.normalize(), e.setXYZ(t, En.x, En.y, En.z);
  }
  toNonIndexed() {
    function e(c, h) {
      const f = c.array, p = c.itemSize, m = c.normalized, g = new f.constructor(h.length * p);
      let v = 0, x = 0;
      for (let E = 0, S = h.length; E < S; E++) {
        c.isInterleavedBufferAttribute ? v = h[E] * c.data.stride + c.offset : v = h[E] * p;
        for (let y = 0; y < p; y++)
          g[x++] = f[v++];
      }
      return new zt(g, p, m);
    }
    if (this.index === null)
      return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."), this;
    const t = new xt(), n = this.index.array, i = this.attributes;
    for (const c in i) {
      const h = i[c], f = e(h, n);
      t.setAttribute(c, f);
    }
    const o = this.morphAttributes;
    for (const c in o) {
      const h = [], f = o[c];
      for (let p = 0, m = f.length; p < m; p++) {
        const g = f[p], v = e(g, n);
        h.push(v);
      }
      t.morphAttributes[c] = h;
    }
    t.morphTargetsRelative = this.morphTargetsRelative;
    const l = this.groups;
    for (let c = 0, h = l.length; c < h; c++) {
      const f = l[c];
      t.addGroup(f.start, f.count, f.materialIndex);
    }
    return t;
  }
  toJSON() {
    const e = {
      metadata: {
        version: 4.6,
        type: "BufferGeometry",
        generator: "BufferGeometry.toJSON"
      }
    };
    if (e.uuid = this.uuid, e.type = this.type, this.name !== "" && (e.name = this.name), Object.keys(this.userData).length > 0 && (e.userData = this.userData), this.parameters !== void 0) {
      const h = this.parameters;
      for (const f in h)
        h[f] !== void 0 && (e[f] = h[f]);
      return e;
    }
    e.data = { attributes: {} };
    const t = this.index;
    t !== null && (e.data.index = {
      type: t.array.constructor.name,
      array: Array.prototype.slice.call(t.array)
    });
    const n = this.attributes;
    for (const h in n) {
      const f = n[h];
      e.data.attributes[h] = f.toJSON(e.data);
    }
    const i = {};
    let o = !1;
    for (const h in this.morphAttributes) {
      const f = this.morphAttributes[h], p = [];
      for (let m = 0, g = f.length; m < g; m++) {
        const v = f[m];
        p.push(v.toJSON(e.data));
      }
      p.length > 0 && (i[h] = p, o = !0);
    }
    o && (e.data.morphAttributes = i, e.data.morphTargetsRelative = this.morphTargetsRelative);
    const l = this.groups;
    l.length > 0 && (e.data.groups = JSON.parse(JSON.stringify(l)));
    const c = this.boundingSphere;
    return c !== null && (e.data.boundingSphere = {
      center: c.center.toArray(),
      radius: c.radius
    }), e;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    this.index = null, this.attributes = {}, this.morphAttributes = {}, this.groups = [], this.boundingBox = null, this.boundingSphere = null;
    const t = {};
    this.name = e.name;
    const n = e.index;
    n !== null && this.setIndex(n.clone(t));
    const i = e.attributes;
    for (const f in i) {
      const p = i[f];
      this.setAttribute(f, p.clone(t));
    }
    const o = e.morphAttributes;
    for (const f in o) {
      const p = [], m = o[f];
      for (let g = 0, v = m.length; g < v; g++)
        p.push(m[g].clone(t));
      this.morphAttributes[f] = p;
    }
    this.morphTargetsRelative = e.morphTargetsRelative;
    const l = e.groups;
    for (let f = 0, p = l.length; f < p; f++) {
      const m = l[f];
      this.addGroup(m.start, m.count, m.materialIndex);
    }
    const c = e.boundingBox;
    c !== null && (this.boundingBox = c.clone());
    const h = e.boundingSphere;
    return h !== null && (this.boundingSphere = h.clone()), this.drawRange.start = e.drawRange.start, this.drawRange.count = e.drawRange.count, this.userData = e.userData, this;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
}
const v0 = /* @__PURE__ */ new rt(), Pa = /* @__PURE__ */ new rr(), jc = /* @__PURE__ */ new In(), _0 = /* @__PURE__ */ new I(), jr = /* @__PURE__ */ new I(), Zr = /* @__PURE__ */ new I(), Kr = /* @__PURE__ */ new I(), gd = /* @__PURE__ */ new I(), Zc = /* @__PURE__ */ new I(), Kc = /* @__PURE__ */ new de(), Jc = /* @__PURE__ */ new de(), Qc = /* @__PURE__ */ new de(), y0 = /* @__PURE__ */ new I(), x0 = /* @__PURE__ */ new I(), S0 = /* @__PURE__ */ new I(), $c = /* @__PURE__ */ new I(), eu = /* @__PURE__ */ new I();
class pn extends Nt {
  constructor(e = new xt(), t = new oa()) {
    super(), this.isMesh = !0, this.type = "Mesh", this.geometry = e, this.material = t, this.updateMorphTargets();
  }
  copy(e, t) {
    return super.copy(e, t), e.morphTargetInfluences !== void 0 && (this.morphTargetInfluences = e.morphTargetInfluences.slice()), e.morphTargetDictionary !== void 0 && (this.morphTargetDictionary = Object.assign({}, e.morphTargetDictionary)), this.material = Array.isArray(e.material) ? e.material.slice() : e.material, this.geometry = e.geometry, this;
  }
  updateMorphTargets() {
    const t = this.geometry.morphAttributes, n = Object.keys(t);
    if (n.length > 0) {
      const i = t[n[0]];
      if (i !== void 0) {
        this.morphTargetInfluences = [], this.morphTargetDictionary = {};
        for (let o = 0, l = i.length; o < l; o++) {
          const c = i[o].name || String(o);
          this.morphTargetInfluences.push(0), this.morphTargetDictionary[c] = o;
        }
      }
    }
  }
  getVertexPosition(e, t) {
    const n = this.geometry, i = n.attributes.position, o = n.morphAttributes.position, l = n.morphTargetsRelative;
    t.fromBufferAttribute(i, e);
    const c = this.morphTargetInfluences;
    if (o && c) {
      Zc.set(0, 0, 0);
      for (let h = 0, f = o.length; h < f; h++) {
        const p = c[h], m = o[h];
        p !== 0 && (gd.fromBufferAttribute(m, e), l ? Zc.addScaledVector(gd, p) : Zc.addScaledVector(gd.sub(t), p));
      }
      t.add(Zc);
    }
    return t;
  }
  raycast(e, t) {
    const n = this.geometry, i = this.material, o = this.matrixWorld;
    i !== void 0 && (n.boundingSphere === null && n.computeBoundingSphere(), jc.copy(n.boundingSphere), jc.applyMatrix4(o), Pa.copy(e.ray).recast(e.near), !(jc.containsPoint(Pa.origin) === !1 && (Pa.intersectSphere(jc, _0) === null || Pa.origin.distanceToSquared(_0) > (e.far - e.near) ** 2)) && (v0.copy(o).invert(), Pa.copy(e.ray).applyMatrix4(v0), !(n.boundingBox !== null && Pa.intersectsBox(n.boundingBox) === !1) && this._computeIntersections(e, t, Pa)));
  }
  _computeIntersections(e, t, n) {
    let i;
    const o = this.geometry, l = this.material, c = o.index, h = o.attributes.position, f = o.attributes.uv, p = o.attributes.uv1, m = o.attributes.normal, g = o.groups, v = o.drawRange;
    if (c !== null)
      if (Array.isArray(l))
        for (let x = 0, E = g.length; x < E; x++) {
          const S = g[x], y = l[S.materialIndex], T = Math.max(S.start, v.start), b = Math.min(c.count, Math.min(S.start + S.count, v.start + v.count));
          for (let A = T, N = b; A < N; A += 3) {
            const R = c.getX(A), P = c.getX(A + 1), H = c.getX(A + 2);
            i = tu(this, y, e, n, f, p, m, R, P, H), i && (i.faceIndex = Math.floor(A / 3), i.face.materialIndex = S.materialIndex, t.push(i));
          }
        }
      else {
        const x = Math.max(0, v.start), E = Math.min(c.count, v.start + v.count);
        for (let S = x, y = E; S < y; S += 3) {
          const T = c.getX(S), b = c.getX(S + 1), A = c.getX(S + 2);
          i = tu(this, l, e, n, f, p, m, T, b, A), i && (i.faceIndex = Math.floor(S / 3), t.push(i));
        }
      }
    else if (h !== void 0)
      if (Array.isArray(l))
        for (let x = 0, E = g.length; x < E; x++) {
          const S = g[x], y = l[S.materialIndex], T = Math.max(S.start, v.start), b = Math.min(h.count, Math.min(S.start + S.count, v.start + v.count));
          for (let A = T, N = b; A < N; A += 3) {
            const R = A, P = A + 1, H = A + 2;
            i = tu(this, y, e, n, f, p, m, R, P, H), i && (i.faceIndex = Math.floor(A / 3), i.face.materialIndex = S.materialIndex, t.push(i));
          }
        }
      else {
        const x = Math.max(0, v.start), E = Math.min(h.count, v.start + v.count);
        for (let S = x, y = E; S < y; S += 3) {
          const T = S, b = S + 1, A = S + 2;
          i = tu(this, l, e, n, f, p, m, T, b, A), i && (i.faceIndex = Math.floor(S / 3), t.push(i));
        }
      }
  }
}
function i1(a, e, t, n, i, o, l, c) {
  let h;
  if (e.side === Xn ? h = n.intersectTriangle(l, o, i, !0, c) : h = n.intersectTriangle(i, o, l, e.side === As, c), h === null) return null;
  eu.copy(c), eu.applyMatrix4(a.matrixWorld);
  const f = t.ray.origin.distanceTo(eu);
  return f < t.near || f > t.far ? null : {
    distance: f,
    point: eu.clone(),
    object: a
  };
}
function tu(a, e, t, n, i, o, l, c, h, f) {
  a.getVertexPosition(c, jr), a.getVertexPosition(h, Zr), a.getVertexPosition(f, Kr);
  const p = i1(a, e, t, n, jr, Zr, Kr, $c);
  if (p) {
    i && (Kc.fromBufferAttribute(i, c), Jc.fromBufferAttribute(i, h), Qc.fromBufferAttribute(i, f), p.uv = $n.getInterpolation($c, jr, Zr, Kr, Kc, Jc, Qc, new de())), o && (Kc.fromBufferAttribute(o, c), Jc.fromBufferAttribute(o, h), Qc.fromBufferAttribute(o, f), p.uv1 = $n.getInterpolation($c, jr, Zr, Kr, Kc, Jc, Qc, new de()), p.uv2 = p.uv1), l && (y0.fromBufferAttribute(l, c), x0.fromBufferAttribute(l, h), S0.fromBufferAttribute(l, f), p.normal = $n.getInterpolation($c, jr, Zr, Kr, y0, x0, S0, new I()), p.normal.dot(n.direction) > 0 && p.normal.multiplyScalar(-1));
    const m = {
      a: c,
      b: h,
      c: f,
      normal: new I(),
      materialIndex: 0
    };
    $n.getNormal(jr, Zr, Kr, m.normal), p.face = m;
  }
  return p;
}
class or extends xt {
  constructor(e = 1, t = 1, n = 1, i = 1, o = 1, l = 1) {
    super(), this.type = "BoxGeometry", this.parameters = {
      width: e,
      height: t,
      depth: n,
      widthSegments: i,
      heightSegments: o,
      depthSegments: l
    };
    const c = this;
    i = Math.floor(i), o = Math.floor(o), l = Math.floor(l);
    const h = [], f = [], p = [], m = [];
    let g = 0, v = 0;
    x("z", "y", "x", -1, -1, n, t, e, l, o, 0), x("z", "y", "x", 1, -1, n, t, -e, l, o, 1), x("x", "z", "y", 1, 1, e, n, t, i, l, 2), x("x", "z", "y", 1, -1, e, n, -t, i, l, 3), x("x", "y", "z", 1, -1, e, t, n, i, o, 4), x("x", "y", "z", -1, -1, e, t, -n, i, o, 5), this.setIndex(h), this.setAttribute("position", new Ye(f, 3)), this.setAttribute("normal", new Ye(p, 3)), this.setAttribute("uv", new Ye(m, 2));
    function x(E, S, y, T, b, A, N, R, P, H, w) {
      const C = A / P, X = N / H, ne = A / 2, ae = N / 2, z = R / 2, q = P + 1, W = H + 1;
      let Q = 0, Z = 0;
      const K = new I();
      for (let le = 0; le < W; le++) {
        const oe = le * X - ae;
        for (let ge = 0; ge < q; ge++) {
          const ee = ge * C - ne;
          K[E] = ee * T, K[S] = oe * b, K[y] = z, f.push(K.x, K.y, K.z), K[E] = 0, K[S] = 0, K[y] = R > 0 ? 1 : -1, p.push(K.x, K.y, K.z), m.push(ge / P), m.push(1 - le / H), Q += 1;
        }
      }
      for (let le = 0; le < H; le++)
        for (let oe = 0; oe < P; oe++) {
          const ge = g + oe + q * le, ee = g + oe + q * (le + 1), ce = g + (oe + 1) + q * (le + 1), be = g + (oe + 1) + q * le;
          h.push(ge, ee, be), h.push(ee, ce, be), Z += 6;
        }
      c.addGroup(v, Z, w), v += Z, g += Q;
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new or(e.width, e.height, e.depth, e.widthSegments, e.heightSegments, e.depthSegments);
  }
}
function xo(a) {
  const e = {};
  for (const t in a) {
    e[t] = {};
    for (const n in a[t]) {
      const i = a[t][n];
      i && (i.isColor || i.isMatrix3 || i.isMatrix4 || i.isVector2 || i.isVector3 || i.isVector4 || i.isTexture || i.isQuaternion) ? i.isRenderTargetTexture ? (console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."), e[t][n] = null) : e[t][n] = i.clone() : Array.isArray(i) ? e[t][n] = i.slice() : e[t][n] = i;
    }
  }
  return e;
}
function Gn(a) {
  const e = {};
  for (let t = 0; t < a.length; t++) {
    const n = xo(a[t]);
    for (const i in n)
      e[i] = n[i];
  }
  return e;
}
function s1(a) {
  const e = [];
  for (let t = 0; t < a.length; t++)
    e.push(a[t].clone());
  return e;
}
function ox(a) {
  return a.getRenderTarget() === null ? a.outputColorSpace : Dt.workingColorSpace;
}
const lx = { clone: xo, merge: Gn };
var a1 = `void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`, r1 = `void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;
class Gi extends zn {
  constructor(e) {
    super(), this.isShaderMaterial = !0, this.type = "ShaderMaterial", this.defines = {}, this.uniforms = {}, this.uniformsGroups = [], this.vertexShader = a1, this.fragmentShader = r1, this.linewidth = 1, this.wireframe = !1, this.wireframeLinewidth = 1, this.fog = !1, this.lights = !1, this.clipping = !1, this.forceSinglePass = !0, this.extensions = {
      derivatives: !1,
      // set to use derivatives
      fragDepth: !1,
      // set to use fragment depth values
      drawBuffers: !1,
      // set to use draw buffers
      shaderTextureLOD: !1,
      // set to use shader texture LOD
      clipCullDistance: !1
      // set to use vertex shader clipping
    }, this.defaultAttributeValues = {
      color: [1, 1, 1],
      uv: [0, 0],
      uv1: [0, 0]
    }, this.index0AttributeName = void 0, this.uniformsNeedUpdate = !1, this.glslVersion = null, e !== void 0 && this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.fragmentShader = e.fragmentShader, this.vertexShader = e.vertexShader, this.uniforms = xo(e.uniforms), this.uniformsGroups = s1(e.uniformsGroups), this.defines = Object.assign({}, e.defines), this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.fog = e.fog, this.lights = e.lights, this.clipping = e.clipping, this.extensions = Object.assign({}, e.extensions), this.glslVersion = e.glslVersion, this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    t.glslVersion = this.glslVersion, t.uniforms = {};
    for (const i in this.uniforms) {
      const l = this.uniforms[i].value;
      l && l.isTexture ? t.uniforms[i] = {
        type: "t",
        value: l.toJSON(e).uuid
      } : l && l.isColor ? t.uniforms[i] = {
        type: "c",
        value: l.getHex()
      } : l && l.isVector2 ? t.uniforms[i] = {
        type: "v2",
        value: l.toArray()
      } : l && l.isVector3 ? t.uniforms[i] = {
        type: "v3",
        value: l.toArray()
      } : l && l.isVector4 ? t.uniforms[i] = {
        type: "v4",
        value: l.toArray()
      } : l && l.isMatrix3 ? t.uniforms[i] = {
        type: "m3",
        value: l.toArray()
      } : l && l.isMatrix4 ? t.uniforms[i] = {
        type: "m4",
        value: l.toArray()
      } : t.uniforms[i] = {
        value: l
      };
    }
    Object.keys(this.defines).length > 0 && (t.defines = this.defines), t.vertexShader = this.vertexShader, t.fragmentShader = this.fragmentShader, t.lights = this.lights, t.clipping = this.clipping;
    const n = {};
    for (const i in this.extensions)
      this.extensions[i] === !0 && (n[i] = !0);
    return Object.keys(n).length > 0 && (t.extensions = n), t;
  }
}
class oh extends Nt {
  constructor() {
    super(), this.isCamera = !0, this.type = "Camera", this.matrixWorldInverse = new rt(), this.projectionMatrix = new rt(), this.projectionMatrixInverse = new rt(), this.coordinateSystem = Fi;
  }
  copy(e, t) {
    return super.copy(e, t), this.matrixWorldInverse.copy(e.matrixWorldInverse), this.projectionMatrix.copy(e.projectionMatrix), this.projectionMatrixInverse.copy(e.projectionMatrixInverse), this.coordinateSystem = e.coordinateSystem, this;
  }
  getWorldDirection(e) {
    return super.getWorldDirection(e).negate();
  }
  updateMatrixWorld(e) {
    super.updateMatrixWorld(e), this.matrixWorldInverse.copy(this.matrixWorld).invert();
  }
  updateWorldMatrix(e, t) {
    super.updateWorldMatrix(e, t), this.matrixWorldInverse.copy(this.matrixWorld).invert();
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
class cn extends oh {
  constructor(e = 50, t = 1, n = 0.1, i = 2e3) {
    super(), this.isPerspectiveCamera = !0, this.type = "PerspectiveCamera", this.fov = e, this.zoom = 1, this.near = n, this.far = i, this.focus = 10, this.aspect = t, this.view = null, this.filmGauge = 35, this.filmOffset = 0, this.updateProjectionMatrix();
  }
  copy(e, t) {
    return super.copy(e, t), this.fov = e.fov, this.zoom = e.zoom, this.near = e.near, this.far = e.far, this.focus = e.focus, this.aspect = e.aspect, this.view = e.view === null ? null : Object.assign({}, e.view), this.filmGauge = e.filmGauge, this.filmOffset = e.filmOffset, this;
  }
  /**
   * Sets the FOV by focal length in respect to the current .filmGauge.
   *
   * The default film gauge is 35, so that the focal length can be specified for
   * a 35mm (full frame) camera.
   *
   * Values for focal length and film gauge must have the same unit.
   */
  setFocalLength(e) {
    const t = 0.5 * this.getFilmHeight() / e;
    this.fov = _o * 2 * Math.atan(t), this.updateProjectionMatrix();
  }
  /**
   * Calculates the focal length from the current .fov and .filmGauge.
   */
  getFocalLength() {
    const e = Math.tan($a * 0.5 * this.fov);
    return 0.5 * this.getFilmHeight() / e;
  }
  getEffectiveFOV() {
    return _o * 2 * Math.atan(
      Math.tan($a * 0.5 * this.fov) / this.zoom
    );
  }
  getFilmWidth() {
    return this.filmGauge * Math.min(this.aspect, 1);
  }
  getFilmHeight() {
    return this.filmGauge / Math.max(this.aspect, 1);
  }
  /**
   * Sets an offset in a larger frustum. This is useful for multi-window or
   * multi-monitor/multi-machine setups.
   *
   * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
   * the monitors are in grid like this
   *
   *   +---+---+---+
   *   | A | B | C |
   *   +---+---+---+
   *   | D | E | F |
   *   +---+---+---+
   *
   * then for each monitor you would call it like this
   *
   *   const w = 1920;
   *   const h = 1080;
   *   const fullWidth = w * 3;
   *   const fullHeight = h * 2;
   *
   *   --A--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
   *   --B--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
   *   --C--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
   *   --D--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
   *   --E--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
   *   --F--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
   *
   *   Note there is no reason monitors have to be the same size or in a grid.
   */
  setViewOffset(e, t, n, i, o, l) {
    this.aspect = e / t, this.view === null && (this.view = {
      enabled: !0,
      fullWidth: 1,
      fullHeight: 1,
      offsetX: 0,
      offsetY: 0,
      width: 1,
      height: 1
    }), this.view.enabled = !0, this.view.fullWidth = e, this.view.fullHeight = t, this.view.offsetX = n, this.view.offsetY = i, this.view.width = o, this.view.height = l, this.updateProjectionMatrix();
  }
  clearViewOffset() {
    this.view !== null && (this.view.enabled = !1), this.updateProjectionMatrix();
  }
  updateProjectionMatrix() {
    const e = this.near;
    let t = e * Math.tan($a * 0.5 * this.fov) / this.zoom, n = 2 * t, i = this.aspect * n, o = -0.5 * i;
    const l = this.view;
    if (this.view !== null && this.view.enabled) {
      const h = l.fullWidth, f = l.fullHeight;
      o += l.offsetX * i / h, t -= l.offsetY * n / f, i *= l.width / h, n *= l.height / f;
    }
    const c = this.filmOffset;
    c !== 0 && (o += e * c / this.getFilmWidth()), this.projectionMatrix.makePerspective(o, o + i, t, t - n, e, this.far, this.coordinateSystem), this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.object.fov = this.fov, t.object.zoom = this.zoom, t.object.near = this.near, t.object.far = this.far, t.object.focus = this.focus, t.object.aspect = this.aspect, this.view !== null && (t.object.view = Object.assign({}, this.view)), t.object.filmGauge = this.filmGauge, t.object.filmOffset = this.filmOffset, t;
  }
}
const Jr = -90, Qr = 1;
class cx extends Nt {
  constructor(e, t, n) {
    super(), this.type = "CubeCamera", this.renderTarget = n, this.coordinateSystem = null, this.activeMipmapLevel = 0;
    const i = new cn(Jr, Qr, e, t);
    i.layers = this.layers, this.add(i);
    const o = new cn(Jr, Qr, e, t);
    o.layers = this.layers, this.add(o);
    const l = new cn(Jr, Qr, e, t);
    l.layers = this.layers, this.add(l);
    const c = new cn(Jr, Qr, e, t);
    c.layers = this.layers, this.add(c);
    const h = new cn(Jr, Qr, e, t);
    h.layers = this.layers, this.add(h);
    const f = new cn(Jr, Qr, e, t);
    f.layers = this.layers, this.add(f);
  }
  updateCoordinateSystem() {
    const e = this.coordinateSystem, t = this.children.concat(), [n, i, o, l, c, h] = t;
    for (const f of t) this.remove(f);
    if (e === Fi)
      n.up.set(0, 1, 0), n.lookAt(1, 0, 0), i.up.set(0, 1, 0), i.lookAt(-1, 0, 0), o.up.set(0, 0, -1), o.lookAt(0, 1, 0), l.up.set(0, 0, 1), l.lookAt(0, -1, 0), c.up.set(0, 1, 0), c.lookAt(0, 0, 1), h.up.set(0, 1, 0), h.lookAt(0, 0, -1);
    else if (e === vo)
      n.up.set(0, -1, 0), n.lookAt(-1, 0, 0), i.up.set(0, -1, 0), i.lookAt(1, 0, 0), o.up.set(0, 0, 1), o.lookAt(0, 1, 0), l.up.set(0, 0, -1), l.lookAt(0, -1, 0), c.up.set(0, -1, 0), c.lookAt(0, 0, 1), h.up.set(0, -1, 0), h.lookAt(0, 0, -1);
    else
      throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: " + e);
    for (const f of t)
      this.add(f), f.updateMatrixWorld();
  }
  update(e, t) {
    this.parent === null && this.updateMatrixWorld();
    const { renderTarget: n, activeMipmapLevel: i } = this;
    this.coordinateSystem !== e.coordinateSystem && (this.coordinateSystem = e.coordinateSystem, this.updateCoordinateSystem());
    const [o, l, c, h, f, p] = this.children, m = e.getRenderTarget(), g = e.getActiveCubeFace(), v = e.getActiveMipmapLevel(), x = e.xr.enabled;
    e.xr.enabled = !1;
    const E = n.texture.generateMipmaps;
    n.texture.generateMipmaps = !1, e.setRenderTarget(n, 0, i), e.render(t, o), e.setRenderTarget(n, 1, i), e.render(t, l), e.setRenderTarget(n, 2, i), e.render(t, c), e.setRenderTarget(n, 3, i), e.render(t, h), e.setRenderTarget(n, 4, i), e.render(t, f), n.texture.generateMipmaps = E, e.setRenderTarget(n, 5, i), e.render(t, p), e.setRenderTarget(m, g, v), e.xr.enabled = x, n.texture.needsPMREMUpdate = !0;
  }
}
class Yl extends un {
  constructor(e, t, n, i, o, l, c, h, f, p) {
    e = e !== void 0 ? e : [], t = t !== void 0 ? t : ws, super(e, t, n, i, o, l, c, h, f, p), this.isCubeTexture = !0, this.flipY = !1;
  }
  get images() {
    return this.image;
  }
  set images(e) {
    this.image = e;
  }
}
class ux extends wi {
  constructor(e = 1, t = {}) {
    super(e, e, t), this.isWebGLCubeRenderTarget = !0;
    const n = { width: e, height: e, depth: 1 }, i = [n, n, n, n, n, n];
    t.encoding !== void 0 && (_l("THREE.WebGLCubeRenderTarget: option.encoding has been replaced by option.colorSpace."), t.colorSpace = t.encoding === na ? nn : pi), this.texture = new Yl(i, t.mapping, t.wrapS, t.wrapT, t.magFilter, t.minFilter, t.format, t.type, t.anisotropy, t.colorSpace), this.texture.isRenderTargetTexture = !0, this.texture.generateMipmaps = t.generateMipmaps !== void 0 ? t.generateMipmaps : !1, this.texture.minFilter = t.minFilter !== void 0 ? t.minFilter : ln;
  }
  fromEquirectangularTexture(e, t) {
    this.texture.type = t.type, this.texture.colorSpace = t.colorSpace, this.texture.generateMipmaps = t.generateMipmaps, this.texture.minFilter = t.minFilter, this.texture.magFilter = t.magFilter;
    const n = {
      uniforms: {
        tEquirect: { value: null }
      },
      vertexShader: (
        /* glsl */
        `

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`
      ),
      fragmentShader: (
        /* glsl */
        `

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`
      )
    }, i = new or(5, 5, 5), o = new Gi({
      name: "CubemapFromEquirect",
      uniforms: xo(n.uniforms),
      vertexShader: n.vertexShader,
      fragmentShader: n.fragmentShader,
      side: Xn,
      blending: bs
    });
    o.uniforms.tEquirect.value = t;
    const l = new pn(i, o), c = t.minFilter;
    return t.minFilter === sa && (t.minFilter = ln), new cx(1, 10, this).update(e, l), t.minFilter = c, l.geometry.dispose(), l.material.dispose(), this;
  }
  clear(e, t, n, i) {
    const o = e.getRenderTarget();
    for (let l = 0; l < 6; l++)
      e.setRenderTarget(this, l), e.clear(t, n, i);
    e.setRenderTarget(o);
  }
}
const vd = /* @__PURE__ */ new I(), o1 = /* @__PURE__ */ new I(), l1 = /* @__PURE__ */ new yt();
let xs = class {
  constructor(e = new I(1, 0, 0), t = 0) {
    this.isPlane = !0, this.normal = e, this.constant = t;
  }
  set(e, t) {
    return this.normal.copy(e), this.constant = t, this;
  }
  setComponents(e, t, n, i) {
    return this.normal.set(e, t, n), this.constant = i, this;
  }
  setFromNormalAndCoplanarPoint(e, t) {
    return this.normal.copy(e), this.constant = -t.dot(this.normal), this;
  }
  setFromCoplanarPoints(e, t, n) {
    const i = vd.subVectors(n, t).cross(o1.subVectors(e, t)).normalize();
    return this.setFromNormalAndCoplanarPoint(i, e), this;
  }
  copy(e) {
    return this.normal.copy(e.normal), this.constant = e.constant, this;
  }
  normalize() {
    const e = 1 / this.normal.length();
    return this.normal.multiplyScalar(e), this.constant *= e, this;
  }
  negate() {
    return this.constant *= -1, this.normal.negate(), this;
  }
  distanceToPoint(e) {
    return this.normal.dot(e) + this.constant;
  }
  distanceToSphere(e) {
    return this.distanceToPoint(e.center) - e.radius;
  }
  projectPoint(e, t) {
    return t.copy(e).addScaledVector(this.normal, -this.distanceToPoint(e));
  }
  intersectLine(e, t) {
    const n = e.delta(vd), i = this.normal.dot(n);
    if (i === 0)
      return this.distanceToPoint(e.start) === 0 ? t.copy(e.start) : null;
    const o = -(e.start.dot(this.normal) + this.constant) / i;
    return o < 0 || o > 1 ? null : t.copy(e.start).addScaledVector(n, o);
  }
  intersectsLine(e) {
    const t = this.distanceToPoint(e.start), n = this.distanceToPoint(e.end);
    return t < 0 && n > 0 || n < 0 && t > 0;
  }
  intersectsBox(e) {
    return e.intersectsPlane(this);
  }
  intersectsSphere(e) {
    return e.intersectsPlane(this);
  }
  coplanarPoint(e) {
    return e.copy(this.normal).multiplyScalar(-this.constant);
  }
  applyMatrix4(e, t) {
    const n = t || l1.getNormalMatrix(e), i = this.coplanarPoint(vd).applyMatrix4(e), o = this.normal.applyMatrix3(n).normalize();
    return this.constant = -i.dot(o), this;
  }
  translate(e) {
    return this.constant -= e.dot(this.normal), this;
  }
  equals(e) {
    return e.normal.equals(this.normal) && e.constant === this.constant;
  }
  clone() {
    return new this.constructor().copy(this);
  }
};
const Oa = /* @__PURE__ */ new In(), nu = /* @__PURE__ */ new I();
class jl {
  constructor(e = new xs(), t = new xs(), n = new xs(), i = new xs(), o = new xs(), l = new xs()) {
    this.planes = [e, t, n, i, o, l];
  }
  set(e, t, n, i, o, l) {
    const c = this.planes;
    return c[0].copy(e), c[1].copy(t), c[2].copy(n), c[3].copy(i), c[4].copy(o), c[5].copy(l), this;
  }
  copy(e) {
    const t = this.planes;
    for (let n = 0; n < 6; n++)
      t[n].copy(e.planes[n]);
    return this;
  }
  setFromProjectionMatrix(e, t = Fi) {
    const n = this.planes, i = e.elements, o = i[0], l = i[1], c = i[2], h = i[3], f = i[4], p = i[5], m = i[6], g = i[7], v = i[8], x = i[9], E = i[10], S = i[11], y = i[12], T = i[13], b = i[14], A = i[15];
    if (n[0].setComponents(h - o, g - f, S - v, A - y).normalize(), n[1].setComponents(h + o, g + f, S + v, A + y).normalize(), n[2].setComponents(h + l, g + p, S + x, A + T).normalize(), n[3].setComponents(h - l, g - p, S - x, A - T).normalize(), n[4].setComponents(h - c, g - m, S - E, A - b).normalize(), t === Fi)
      n[5].setComponents(h + c, g + m, S + E, A + b).normalize();
    else if (t === vo)
      n[5].setComponents(c, m, E, b).normalize();
    else
      throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: " + t);
    return this;
  }
  intersectsObject(e) {
    if (e.boundingSphere !== void 0)
      e.boundingSphere === null && e.computeBoundingSphere(), Oa.copy(e.boundingSphere).applyMatrix4(e.matrixWorld);
    else {
      const t = e.geometry;
      t.boundingSphere === null && t.computeBoundingSphere(), Oa.copy(t.boundingSphere).applyMatrix4(e.matrixWorld);
    }
    return this.intersectsSphere(Oa);
  }
  intersectsSprite(e) {
    return Oa.center.set(0, 0, 0), Oa.radius = 0.7071067811865476, Oa.applyMatrix4(e.matrixWorld), this.intersectsSphere(Oa);
  }
  intersectsSphere(e) {
    const t = this.planes, n = e.center, i = -e.radius;
    for (let o = 0; o < 6; o++)
      if (t[o].distanceToPoint(n) < i)
        return !1;
    return !0;
  }
  intersectsBox(e) {
    const t = this.planes;
    for (let n = 0; n < 6; n++) {
      const i = t[n];
      if (nu.x = i.normal.x > 0 ? e.max.x : e.min.x, nu.y = i.normal.y > 0 ? e.max.y : e.min.y, nu.z = i.normal.z > 0 ? e.max.z : e.min.z, i.distanceToPoint(nu) < 0)
        return !1;
    }
    return !0;
  }
  containsPoint(e) {
    const t = this.planes;
    for (let n = 0; n < 6; n++)
      if (t[n].distanceToPoint(e) < 0)
        return !1;
    return !0;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
function hx() {
  let a = null, e = !1, t = null, n = null;
  function i(o, l) {
    t(o, l), n = a.requestAnimationFrame(i);
  }
  return {
    start: function() {
      e !== !0 && t !== null && (n = a.requestAnimationFrame(i), e = !0);
    },
    stop: function() {
      a.cancelAnimationFrame(n), e = !1;
    },
    setAnimationLoop: function(o) {
      t = o;
    },
    setContext: function(o) {
      a = o;
    }
  };
}
function c1(a, e) {
  const t = e.isWebGL2, n = /* @__PURE__ */ new WeakMap();
  function i(f, p) {
    const m = f.array, g = f.usage, v = m.byteLength, x = a.createBuffer();
    a.bindBuffer(p, x), a.bufferData(p, m, g), f.onUploadCallback();
    let E;
    if (m instanceof Float32Array)
      E = a.FLOAT;
    else if (m instanceof Uint16Array)
      if (f.isFloat16BufferAttribute)
        if (t)
          E = a.HALF_FLOAT;
        else
          throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");
      else
        E = a.UNSIGNED_SHORT;
    else if (m instanceof Int16Array)
      E = a.SHORT;
    else if (m instanceof Uint32Array)
      E = a.UNSIGNED_INT;
    else if (m instanceof Int32Array)
      E = a.INT;
    else if (m instanceof Int8Array)
      E = a.BYTE;
    else if (m instanceof Uint8Array)
      E = a.UNSIGNED_BYTE;
    else if (m instanceof Uint8ClampedArray)
      E = a.UNSIGNED_BYTE;
    else
      throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: " + m);
    return {
      buffer: x,
      type: E,
      bytesPerElement: m.BYTES_PER_ELEMENT,
      version: f.version,
      size: v
    };
  }
  function o(f, p, m) {
    const g = p.array, v = p._updateRange, x = p.updateRanges;
    if (a.bindBuffer(m, f), v.count === -1 && x.length === 0 && a.bufferSubData(m, 0, g), x.length !== 0) {
      for (let E = 0, S = x.length; E < S; E++) {
        const y = x[E];
        t ? a.bufferSubData(
          m,
          y.start * g.BYTES_PER_ELEMENT,
          g,
          y.start,
          y.count
        ) : a.bufferSubData(
          m,
          y.start * g.BYTES_PER_ELEMENT,
          g.subarray(y.start, y.start + y.count)
        );
      }
      p.clearUpdateRanges();
    }
    v.count !== -1 && (t ? a.bufferSubData(
      m,
      v.offset * g.BYTES_PER_ELEMENT,
      g,
      v.offset,
      v.count
    ) : a.bufferSubData(
      m,
      v.offset * g.BYTES_PER_ELEMENT,
      g.subarray(v.offset, v.offset + v.count)
    ), v.count = -1), p.onUploadCallback();
  }
  function l(f) {
    return f.isInterleavedBufferAttribute && (f = f.data), n.get(f);
  }
  function c(f) {
    f.isInterleavedBufferAttribute && (f = f.data);
    const p = n.get(f);
    p && (a.deleteBuffer(p.buffer), n.delete(f));
  }
  function h(f, p) {
    if (f.isGLBufferAttribute) {
      const g = n.get(f);
      (!g || g.version < f.version) && n.set(f, {
        buffer: f.buffer,
        type: f.type,
        bytesPerElement: f.elementSize,
        version: f.version
      });
      return;
    }
    f.isInterleavedBufferAttribute && (f = f.data);
    const m = n.get(f);
    if (m === void 0)
      n.set(f, i(f, p));
    else if (m.version < f.version) {
      if (m.size !== f.array.byteLength)
        throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");
      o(m.buffer, f, p), m.version = f.version;
    }
  }
  return {
    get: l,
    remove: c,
    update: h
  };
}
class bo extends xt {
  constructor(e = 1, t = 1, n = 1, i = 1) {
    super(), this.type = "PlaneGeometry", this.parameters = {
      width: e,
      height: t,
      widthSegments: n,
      heightSegments: i
    };
    const o = e / 2, l = t / 2, c = Math.floor(n), h = Math.floor(i), f = c + 1, p = h + 1, m = e / c, g = t / h, v = [], x = [], E = [], S = [];
    for (let y = 0; y < p; y++) {
      const T = y * g - l;
      for (let b = 0; b < f; b++) {
        const A = b * m - o;
        x.push(A, -T, 0), E.push(0, 0, 1), S.push(b / c), S.push(1 - y / h);
      }
    }
    for (let y = 0; y < h; y++)
      for (let T = 0; T < c; T++) {
        const b = T + f * y, A = T + f * (y + 1), N = T + 1 + f * (y + 1), R = T + 1 + f * y;
        v.push(b, A, R), v.push(A, N, R);
      }
    this.setIndex(v), this.setAttribute("position", new Ye(x, 3)), this.setAttribute("normal", new Ye(E, 3)), this.setAttribute("uv", new Ye(S, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new bo(e.width, e.height, e.widthSegments, e.heightSegments);
  }
}
var u1 = `#ifdef USE_ALPHAHASH
	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;
#endif`, h1 = `#ifdef USE_ALPHAHASH
	const float ALPHA_HASH_SCALE = 0.05;
	float hash2D( vec2 value ) {
		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );
	}
	float hash3D( vec3 value ) {
		return hash2D( vec2( hash2D( value.xy ), value.z ) );
	}
	float getAlphaHashThreshold( vec3 position ) {
		float maxDeriv = max(
			length( dFdx( position.xyz ) ),
			length( dFdy( position.xyz ) )
		);
		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );
		vec2 pixScales = vec2(
			exp2( floor( log2( pixScale ) ) ),
			exp2( ceil( log2( pixScale ) ) )
		);
		vec2 alpha = vec2(
			hash3D( floor( pixScales.x * position.xyz ) ),
			hash3D( floor( pixScales.y * position.xyz ) )
		);
		float lerpFactor = fract( log2( pixScale ) );
		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;
		float a = min( lerpFactor, 1.0 - lerpFactor );
		vec3 cases = vec3(
			x * x / ( 2.0 * a * ( 1.0 - a ) ),
			( x - 0.5 * a ) / ( 1.0 - a ),
			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )
		);
		float threshold = ( x < ( 1.0 - a ) )
			? ( ( x < a ) ? cases.x : cases.y )
			: cases.z;
		return clamp( threshold , 1.0e-6, 1.0 );
	}
#endif`, f1 = `#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`, d1 = `#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`, p1 = `#ifdef USE_ALPHATEST
	if ( diffuseColor.a < alphaTest ) discard;
#endif`, m1 = `#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`, g1 = `#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_CLEARCOAT ) 
		clearcoatSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_SHEEN ) 
		sheenSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`, v1 = `#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`, _1 = `#ifdef USE_BATCHING
	attribute float batchId;
	uniform highp sampler2D batchingTexture;
	mat4 getBatchingMatrix( const in float i ) {
		int size = textureSize( batchingTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
#endif`, y1 = `#ifdef USE_BATCHING
	mat4 batchingMatrix = getBatchingMatrix( batchId );
#endif`, x1 = `vec3 transformed = vec3( position );
#ifdef USE_ALPHAHASH
	vPosition = vec3( position );
#endif`, S1 = `vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`, M1 = `float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`, E1 = `#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`, b1 = `#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );
		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`, T1 = `#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#pragma unroll_loop_start
	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
		plane = clippingPlanes[ i ];
		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
	}
	#pragma unroll_loop_end
	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
		bool clipped = true;
		#pragma unroll_loop_start
		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
		}
		#pragma unroll_loop_end
		if ( clipped ) discard;
	#endif
#endif`, A1 = `#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`, w1 = `#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`, R1 = `#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`, C1 = `#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`, L1 = `#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`, U1 = `#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	varying vec3 vColor;
#endif`, N1 = `#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif`, D1 = `#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
#ifdef USE_ALPHAHASH
	varying vec3 vPosition;
#endif
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
float luminance( const in vec3 rgb ) {
	const vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );
	return dot( weights, rgb );
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`, P1 = `#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`, O1 = `vec3 transformedNormal = objectNormal;
#ifdef USE_TANGENT
	vec3 transformedTangent = objectTangent;
#endif
#ifdef USE_BATCHING
	mat3 bm = mat3( batchingMatrix );
	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );
	transformedNormal = bm * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = bm * transformedTangent;
	#endif
#endif
#ifdef USE_INSTANCING
	mat3 im = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );
	transformedNormal = im * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = im * transformedTangent;
	#endif
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`, I1 = `#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`, z1 = `#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`, B1 = `#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`, H1 = `#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`, F1 = "gl_FragColor = linearToOutputTexel( gl_FragColor );", V1 = `
const mat3 LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = mat3(
	vec3( 0.8224621, 0.177538, 0.0 ),
	vec3( 0.0331941, 0.9668058, 0.0 ),
	vec3( 0.0170827, 0.0723974, 0.9105199 )
);
const mat3 LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = mat3(
	vec3( 1.2249401, - 0.2249404, 0.0 ),
	vec3( - 0.0420569, 1.0420571, 0.0 ),
	vec3( - 0.0196376, - 0.0786361, 1.0982735 )
);
vec4 LinearSRGBToLinearDisplayP3( in vec4 value ) {
	return vec4( value.rgb * LINEAR_SRGB_TO_LINEAR_DISPLAY_P3, value.a );
}
vec4 LinearDisplayP3ToLinearSRGB( in vec4 value ) {
	return vec4( value.rgb * LINEAR_DISPLAY_P3_TO_LINEAR_SRGB, value.a );
}
vec4 LinearTransferOETF( in vec4 value ) {
	return value;
}
vec4 sRGBTransferOETF( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}
vec4 LinearToLinear( in vec4 value ) {
	return value;
}
vec4 LinearTosRGB( in vec4 value ) {
	return sRGBTransferOETF( value );
}`, G1 = `#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`, W1 = `#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`, X1 = `#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`, k1 = `#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`, q1 = `#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`, Y1 = `#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`, j1 = `#ifdef USE_FOG
	varying float vFogDepth;
#endif`, Z1 = `#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`, K1 = `#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`, J1 = `#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`, Q1 = `#ifdef USE_LIGHTMAP
	vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
	vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
	reflectedLight.indirectDiffuse += lightMapIrradiance;
#endif`, $1 = `#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`, eT = `LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`, tT = `varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`, nT = `uniform bool receiveShadow;
uniform vec3 ambientLightColor;
#if defined( USE_LIGHT_PROBES )
	uniform vec3 lightProbe[ 9 ];
#endif
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	#if defined ( LEGACY_LIGHTS )
		if ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {
			return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );
		}
		return 1.0;
	#else
		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
		if ( cutoffDistance > 0.0 ) {
			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
		}
		return distanceFalloff;
	#endif
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`, iT = `#ifdef USE_ENVMAP
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	#ifdef USE_ANISOTROPY
		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {
			#ifdef ENVMAP_TYPE_CUBE_UV
				vec3 bentNormal = cross( bitangent, viewDir );
				bentNormal = normalize( cross( bentNormal, bitangent ) );
				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );
				return getIBLRadiance( viewDir, bentNormal, roughness );
			#else
				return vec3( 0.0 );
			#endif
		}
	#endif
#endif`, sT = `ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`, aT = `varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`, rT = `BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`, oT = `varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`, lT = `PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif
#ifdef USE_ANISOTROPY
	#ifdef USE_ANISOTROPYMAP
		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );
		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;
		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;
	#else
		vec2 anisotropyV = anisotropyVector;
	#endif
	material.anisotropy = length( anisotropyV );
	if( material.anisotropy == 0.0 ) {
		anisotropyV = vec2( 1.0, 0.0 );
	} else {
		anisotropyV /= material.anisotropy;
		material.anisotropy = saturate( material.anisotropy );
	}
	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );
	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;
	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;
#endif`, cT = `struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
	#ifdef USE_ANISOTROPY
		float anisotropy;
		float alphaT;
		vec3 anisotropyT;
		vec3 anisotropyB;
	#endif
};
vec3 clearcoatSpecularDirect = vec3( 0.0 );
vec3 clearcoatSpecularIndirect = vec3( 0.0 );
vec3 sheenSpecularDirect = vec3( 0.0 );
vec3 sheenSpecularIndirect = vec3(0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_ANISOTROPY
	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {
		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );
		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );
		float v = 0.5 / ( gv + gl );
		return saturate(v);
	}
	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {
		float a2 = alphaT * alphaB;
		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );
		highp float v2 = dot( v, v );
		float w2 = a2 / v2;
		return RECIPROCAL_PI * a2 * pow2 ( w2 );
	}
#endif
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	#ifdef USE_ANISOTROPY
		float dotTL = dot( material.anisotropyT, lightDir );
		float dotTV = dot( material.anisotropyT, viewDir );
		float dotTH = dot( material.anisotropyT, halfDir );
		float dotBL = dot( material.anisotropyB, lightDir );
		float dotBV = dot( material.anisotropyB, viewDir );
		float dotBH = dot( material.anisotropyB, halfDir );
		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );
		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );
	#else
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
	#endif
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometryNormal;
		vec3 viewDir = geometryViewDir;
		vec3 position = geometryPosition;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`, uT = `
vec3 geometryPosition = - vViewPosition;
vec3 geometryNormal = normal;
vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
vec3 geometryClearcoatNormal = vec3( 0.0 );
#ifdef USE_CLEARCOAT
	geometryClearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometryViewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometryPosition, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometryPosition, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	#if defined( USE_LIGHT_PROBES )
		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );
	#endif
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`, hT = `#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometryNormal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	#ifdef USE_ANISOTROPY
		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );
	#else
		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );
	#endif
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`, fT = `#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif`, dT = `#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`, pT = `#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`, mT = `#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		varying float vFragDepth;
		varying float vIsPerspective;
	#else
		uniform float logDepthBufFC;
	#endif
#endif`, gT = `#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		vFragDepth = 1.0 + gl_Position.w;
		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
	#else
		if ( isPerspectiveMatrix( projectionMatrix ) ) {
			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;
			gl_Position.z *= gl_Position.w;
		}
	#endif
#endif`, vT = `#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vMapUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );
	
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`, _T = `#ifdef USE_MAP
	uniform sampler2D map;
#endif`, yT = `#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`, xT = `#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`, ST = `float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`, MT = `#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`, ET = `#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`, bT = `#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
		}
	#else
		objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];
		objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];
		objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];
		objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];
	#endif
#endif`, TT = `#ifdef USE_MORPHTARGETS
	uniform float morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
		uniform sampler2DArray morphTargetsTexture;
		uniform ivec2 morphTargetsTextureSize;
		vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
			int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
			int y = texelIndex / morphTargetsTextureSize.x;
			int x = texelIndex - y * morphTargetsTextureSize.x;
			ivec3 morphUV = ivec3( x, y, morphTargetIndex );
			return texelFetch( morphTargetsTexture, morphUV, 0 );
		}
	#else
		#ifndef USE_MORPHNORMALS
			uniform float morphTargetInfluences[ 8 ];
		#else
			uniform float morphTargetInfluences[ 4 ];
		#endif
	#endif
#endif`, AT = `#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
		}
	#else
		transformed += morphTarget0 * morphTargetInfluences[ 0 ];
		transformed += morphTarget1 * morphTargetInfluences[ 1 ];
		transformed += morphTarget2 * morphTargetInfluences[ 2 ];
		transformed += morphTarget3 * morphTargetInfluences[ 3 ];
		#ifndef USE_MORPHNORMALS
			transformed += morphTarget4 * morphTargetInfluences[ 4 ];
			transformed += morphTarget5 * morphTargetInfluences[ 5 ];
			transformed += morphTarget6 * morphTargetInfluences[ 6 ];
			transformed += morphTarget7 * morphTargetInfluences[ 7 ];
		#endif
	#endif
#endif`, wT = `float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal,
		#if defined( USE_NORMALMAP )
			vNormalMapUv
		#elif defined( USE_CLEARCOAT_NORMALMAP )
			vClearcoatNormalMapUv
		#else
			vUv
		#endif
		);
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 nonPerturbedNormal = normal;`, RT = `#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`, CT = `#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`, LT = `#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`, UT = `#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`, NT = `#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`, DT = `#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = nonPerturbedNormal;
#endif`, PT = `#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`, OT = `#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`, IT = `#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`, zT = `#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`, BT = `vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;
const vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );
const vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );
const float ShiftRight8 = 1. / 256.;
vec4 packDepthToRGBA( const in float v ) {
	vec4 r = vec4( fract( v * PackFactors ), v );
	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors );
}
vec2 packDepthToRG( in highp float v ) {
	return packDepthToRGBA( v ).yx;
}
float unpackRGToDepth( const in highp vec2 v ) {
	return unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );
}
vec4 pack2HalfToRGBA( vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`, HT = `#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`, FT = `vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_BATCHING
	mvPosition = batchingMatrix * mvPosition;
#endif
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`, VT = `#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`, GT = `#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`, WT = `float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`, XT = `#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`, kT = `#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return shadow;
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
		vec3 lightToPosition = shadowCoord.xyz;
		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;
		vec3 bd3D = normalize( lightToPosition );
		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
			return (
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
			) * ( 1.0 / 9.0 );
		#else
			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
		#endif
	}
#endif`, qT = `#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`, YT = `#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`, jT = `float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`, ZT = `#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`, KT = `#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	mat4 getBoneMatrix( const in float i ) {
		int size = textureSize( boneTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
#endif`, JT = `#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`, QT = `#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`, $T = `float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`, eA = `#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`, tA = `#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`, nA = `#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return saturate( toneMappingExposure * color );
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 OptimizedCineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
const mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(
	vec3( 1.6605, - 0.1246, - 0.0182 ),
	vec3( - 0.5876, 1.1329, - 0.1006 ),
	vec3( - 0.0728, - 0.0083, 1.1187 )
);
const mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(
	vec3( 0.6274, 0.0691, 0.0164 ),
	vec3( 0.3293, 0.9195, 0.0880 ),
	vec3( 0.0433, 0.0113, 0.8956 )
);
vec3 agxDefaultContrastApprox( vec3 x ) {
	vec3 x2 = x * x;
	vec3 x4 = x2 * x2;
	return + 15.5 * x4 * x2
		- 40.14 * x4 * x
		+ 31.96 * x4
		- 6.868 * x2 * x
		+ 0.4298 * x2
		+ 0.1191 * x
		- 0.00232;
}
vec3 AgXToneMapping( vec3 color ) {
	const mat3 AgXInsetMatrix = mat3(
		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),
		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),
		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )
	);
	const mat3 AgXOutsetMatrix = mat3(
		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),
		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),
		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )
	);
	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;
	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;
	color *= toneMappingExposure;
	color = AgXInsetMatrix * color;
	color = max( color, 1e-10 );	color = log2( color );
	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );
	color = clamp( color, 0.0, 1.0 );
	color = agxDefaultContrastApprox( color );
	color = AgXOutsetMatrix * color;
	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );
	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;
	return color;
}
vec3 CustomToneMapping( vec3 color ) { return color; }`, iA = `#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmitted = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );
#endif`, sA = `#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return vec3( 1.0 );
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
		vec3 refractedRayExit = position + transmissionRay;
		vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
		vec2 refractionCoords = ndcPos.xy / ndcPos.w;
		refractionCoords += 1.0;
		refractionCoords /= 2.0;
		vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
		vec3 transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );
		vec3 attenuatedColor = transmittance * transmittedLight.rgb;
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;
		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );
	}
#endif`, aA = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`, rA = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	uniform mat3 anisotropyMapTransform;
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`, oA = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ANISOTROPYMAP
	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`, lA = `#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_BATCHING
		worldPosition = batchingMatrix * worldPosition;
	#endif
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;
const cA = `varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`, uA = `uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, hA = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`, fA = `#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, dA = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`, pA = `uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, mA = `#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`, gA = `#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#endif
}`, vA = `#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`, _A = `#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`, yA = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`, xA = `uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, SA = `uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`, MA = `uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`, EA = `#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`, bA = `uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, TA = `#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, AA = `#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, wA = `#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`, RA = `#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, CA = `#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`, LA = `#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`, UA = `#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, NA = `#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, DA = `#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`, PA = `#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
#ifdef USE_ANISOTROPY
	uniform vec2 anisotropyVector;
	#ifdef USE_ANISOTROPYMAP
		uniform sampler2D anisotropyMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;
	#endif
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, OA = `#define TOON
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, IA = `#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, zA = `uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`, BA = `uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`, HA = `#include <common>
#include <batching_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, FA = `uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`, VA = `uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );
	vec2 scale;
	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );
	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`, GA = `uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`, vt = {
  alphahash_fragment: u1,
  alphahash_pars_fragment: h1,
  alphamap_fragment: f1,
  alphamap_pars_fragment: d1,
  alphatest_fragment: p1,
  alphatest_pars_fragment: m1,
  aomap_fragment: g1,
  aomap_pars_fragment: v1,
  batching_pars_vertex: _1,
  batching_vertex: y1,
  begin_vertex: x1,
  beginnormal_vertex: S1,
  bsdfs: M1,
  iridescence_fragment: E1,
  bumpmap_pars_fragment: b1,
  clipping_planes_fragment: T1,
  clipping_planes_pars_fragment: A1,
  clipping_planes_pars_vertex: w1,
  clipping_planes_vertex: R1,
  color_fragment: C1,
  color_pars_fragment: L1,
  color_pars_vertex: U1,
  color_vertex: N1,
  common: D1,
  cube_uv_reflection_fragment: P1,
  defaultnormal_vertex: O1,
  displacementmap_pars_vertex: I1,
  displacementmap_vertex: z1,
  emissivemap_fragment: B1,
  emissivemap_pars_fragment: H1,
  colorspace_fragment: F1,
  colorspace_pars_fragment: V1,
  envmap_fragment: G1,
  envmap_common_pars_fragment: W1,
  envmap_pars_fragment: X1,
  envmap_pars_vertex: k1,
  envmap_physical_pars_fragment: iT,
  envmap_vertex: q1,
  fog_vertex: Y1,
  fog_pars_vertex: j1,
  fog_fragment: Z1,
  fog_pars_fragment: K1,
  gradientmap_pars_fragment: J1,
  lightmap_fragment: Q1,
  lightmap_pars_fragment: $1,
  lights_lambert_fragment: eT,
  lights_lambert_pars_fragment: tT,
  lights_pars_begin: nT,
  lights_toon_fragment: sT,
  lights_toon_pars_fragment: aT,
  lights_phong_fragment: rT,
  lights_phong_pars_fragment: oT,
  lights_physical_fragment: lT,
  lights_physical_pars_fragment: cT,
  lights_fragment_begin: uT,
  lights_fragment_maps: hT,
  lights_fragment_end: fT,
  logdepthbuf_fragment: dT,
  logdepthbuf_pars_fragment: pT,
  logdepthbuf_pars_vertex: mT,
  logdepthbuf_vertex: gT,
  map_fragment: vT,
  map_pars_fragment: _T,
  map_particle_fragment: yT,
  map_particle_pars_fragment: xT,
  metalnessmap_fragment: ST,
  metalnessmap_pars_fragment: MT,
  morphcolor_vertex: ET,
  morphnormal_vertex: bT,
  morphtarget_pars_vertex: TT,
  morphtarget_vertex: AT,
  normal_fragment_begin: wT,
  normal_fragment_maps: RT,
  normal_pars_fragment: CT,
  normal_pars_vertex: LT,
  normal_vertex: UT,
  normalmap_pars_fragment: NT,
  clearcoat_normal_fragment_begin: DT,
  clearcoat_normal_fragment_maps: PT,
  clearcoat_pars_fragment: OT,
  iridescence_pars_fragment: IT,
  opaque_fragment: zT,
  packing: BT,
  premultiplied_alpha_fragment: HT,
  project_vertex: FT,
  dithering_fragment: VT,
  dithering_pars_fragment: GT,
  roughnessmap_fragment: WT,
  roughnessmap_pars_fragment: XT,
  shadowmap_pars_fragment: kT,
  shadowmap_pars_vertex: qT,
  shadowmap_vertex: YT,
  shadowmask_pars_fragment: jT,
  skinbase_vertex: ZT,
  skinning_pars_vertex: KT,
  skinning_vertex: JT,
  skinnormal_vertex: QT,
  specularmap_fragment: $T,
  specularmap_pars_fragment: eA,
  tonemapping_fragment: tA,
  tonemapping_pars_fragment: nA,
  transmission_fragment: iA,
  transmission_pars_fragment: sA,
  uv_pars_fragment: aA,
  uv_pars_vertex: rA,
  uv_vertex: oA,
  worldpos_vertex: lA,
  background_vert: cA,
  background_frag: uA,
  backgroundCube_vert: hA,
  backgroundCube_frag: fA,
  cube_vert: dA,
  cube_frag: pA,
  depth_vert: mA,
  depth_frag: gA,
  distanceRGBA_vert: vA,
  distanceRGBA_frag: _A,
  equirect_vert: yA,
  equirect_frag: xA,
  linedashed_vert: SA,
  linedashed_frag: MA,
  meshbasic_vert: EA,
  meshbasic_frag: bA,
  meshlambert_vert: TA,
  meshlambert_frag: AA,
  meshmatcap_vert: wA,
  meshmatcap_frag: RA,
  meshnormal_vert: CA,
  meshnormal_frag: LA,
  meshphong_vert: UA,
  meshphong_frag: NA,
  meshphysical_vert: DA,
  meshphysical_frag: PA,
  meshtoon_vert: OA,
  meshtoon_frag: IA,
  points_vert: zA,
  points_frag: BA,
  shadow_vert: HA,
  shadow_frag: FA,
  sprite_vert: VA,
  sprite_frag: GA
}, Re = {
  common: {
    diffuse: { value: /* @__PURE__ */ new Fe(16777215) },
    opacity: { value: 1 },
    map: { value: null },
    mapTransform: { value: /* @__PURE__ */ new yt() },
    alphaMap: { value: null },
    alphaMapTransform: { value: /* @__PURE__ */ new yt() },
    alphaTest: { value: 0 }
  },
  specularmap: {
    specularMap: { value: null },
    specularMapTransform: { value: /* @__PURE__ */ new yt() }
  },
  envmap: {
    envMap: { value: null },
    flipEnvMap: { value: -1 },
    reflectivity: { value: 1 },
    // basic, lambert, phong
    ior: { value: 1.5 },
    // physical
    refractionRatio: { value: 0.98 }
    // basic, lambert, phong
  },
  aomap: {
    aoMap: { value: null },
    aoMapIntensity: { value: 1 },
    aoMapTransform: { value: /* @__PURE__ */ new yt() }
  },
  lightmap: {
    lightMap: { value: null },
    lightMapIntensity: { value: 1 },
    lightMapTransform: { value: /* @__PURE__ */ new yt() }
  },
  bumpmap: {
    bumpMap: { value: null },
    bumpMapTransform: { value: /* @__PURE__ */ new yt() },
    bumpScale: { value: 1 }
  },
  normalmap: {
    normalMap: { value: null },
    normalMapTransform: { value: /* @__PURE__ */ new yt() },
    normalScale: { value: /* @__PURE__ */ new de(1, 1) }
  },
  displacementmap: {
    displacementMap: { value: null },
    displacementMapTransform: { value: /* @__PURE__ */ new yt() },
    displacementScale: { value: 1 },
    displacementBias: { value: 0 }
  },
  emissivemap: {
    emissiveMap: { value: null },
    emissiveMapTransform: { value: /* @__PURE__ */ new yt() }
  },
  metalnessmap: {
    metalnessMap: { value: null },
    metalnessMapTransform: { value: /* @__PURE__ */ new yt() }
  },
  roughnessmap: {
    roughnessMap: { value: null },
    roughnessMapTransform: { value: /* @__PURE__ */ new yt() }
  },
  gradientmap: {
    gradientMap: { value: null }
  },
  fog: {
    fogDensity: { value: 25e-5 },
    fogNear: { value: 1 },
    fogFar: { value: 2e3 },
    fogColor: { value: /* @__PURE__ */ new Fe(16777215) }
  },
  lights: {
    ambientLightColor: { value: [] },
    lightProbe: { value: [] },
    directionalLights: { value: [], properties: {
      direction: {},
      color: {}
    } },
    directionalLightShadows: { value: [], properties: {
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {}
    } },
    directionalShadowMap: { value: [] },
    directionalShadowMatrix: { value: [] },
    spotLights: { value: [], properties: {
      color: {},
      position: {},
      direction: {},
      distance: {},
      coneCos: {},
      penumbraCos: {},
      decay: {}
    } },
    spotLightShadows: { value: [], properties: {
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {}
    } },
    spotLightMap: { value: [] },
    spotShadowMap: { value: [] },
    spotLightMatrix: { value: [] },
    pointLights: { value: [], properties: {
      color: {},
      position: {},
      decay: {},
      distance: {}
    } },
    pointLightShadows: { value: [], properties: {
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {},
      shadowCameraNear: {},
      shadowCameraFar: {}
    } },
    pointShadowMap: { value: [] },
    pointShadowMatrix: { value: [] },
    hemisphereLights: { value: [], properties: {
      direction: {},
      skyColor: {},
      groundColor: {}
    } },
    // TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
    rectAreaLights: { value: [], properties: {
      color: {},
      position: {},
      width: {},
      height: {}
    } },
    ltc_1: { value: null },
    ltc_2: { value: null }
  },
  points: {
    diffuse: { value: /* @__PURE__ */ new Fe(16777215) },
    opacity: { value: 1 },
    size: { value: 1 },
    scale: { value: 1 },
    map: { value: null },
    alphaMap: { value: null },
    alphaMapTransform: { value: /* @__PURE__ */ new yt() },
    alphaTest: { value: 0 },
    uvTransform: { value: /* @__PURE__ */ new yt() }
  },
  sprite: {
    diffuse: { value: /* @__PURE__ */ new Fe(16777215) },
    opacity: { value: 1 },
    center: { value: /* @__PURE__ */ new de(0.5, 0.5) },
    rotation: { value: 0 },
    map: { value: null },
    mapTransform: { value: /* @__PURE__ */ new yt() },
    alphaMap: { value: null },
    alphaMapTransform: { value: /* @__PURE__ */ new yt() },
    alphaTest: { value: 0 }
  }
}, Bi = {
  basic: {
    uniforms: /* @__PURE__ */ Gn([
      Re.common,
      Re.specularmap,
      Re.envmap,
      Re.aomap,
      Re.lightmap,
      Re.fog
    ]),
    vertexShader: vt.meshbasic_vert,
    fragmentShader: vt.meshbasic_frag
  },
  lambert: {
    uniforms: /* @__PURE__ */ Gn([
      Re.common,
      Re.specularmap,
      Re.envmap,
      Re.aomap,
      Re.lightmap,
      Re.emissivemap,
      Re.bumpmap,
      Re.normalmap,
      Re.displacementmap,
      Re.fog,
      Re.lights,
      {
        emissive: { value: /* @__PURE__ */ new Fe(0) }
      }
    ]),
    vertexShader: vt.meshlambert_vert,
    fragmentShader: vt.meshlambert_frag
  },
  phong: {
    uniforms: /* @__PURE__ */ Gn([
      Re.common,
      Re.specularmap,
      Re.envmap,
      Re.aomap,
      Re.lightmap,
      Re.emissivemap,
      Re.bumpmap,
      Re.normalmap,
      Re.displacementmap,
      Re.fog,
      Re.lights,
      {
        emissive: { value: /* @__PURE__ */ new Fe(0) },
        specular: { value: /* @__PURE__ */ new Fe(1118481) },
        shininess: { value: 30 }
      }
    ]),
    vertexShader: vt.meshphong_vert,
    fragmentShader: vt.meshphong_frag
  },
  standard: {
    uniforms: /* @__PURE__ */ Gn([
      Re.common,
      Re.envmap,
      Re.aomap,
      Re.lightmap,
      Re.emissivemap,
      Re.bumpmap,
      Re.normalmap,
      Re.displacementmap,
      Re.roughnessmap,
      Re.metalnessmap,
      Re.fog,
      Re.lights,
      {
        emissive: { value: /* @__PURE__ */ new Fe(0) },
        roughness: { value: 1 },
        metalness: { value: 0 },
        envMapIntensity: { value: 1 }
        // temporary
      }
    ]),
    vertexShader: vt.meshphysical_vert,
    fragmentShader: vt.meshphysical_frag
  },
  toon: {
    uniforms: /* @__PURE__ */ Gn([
      Re.common,
      Re.aomap,
      Re.lightmap,
      Re.emissivemap,
      Re.bumpmap,
      Re.normalmap,
      Re.displacementmap,
      Re.gradientmap,
      Re.fog,
      Re.lights,
      {
        emissive: { value: /* @__PURE__ */ new Fe(0) }
      }
    ]),
    vertexShader: vt.meshtoon_vert,
    fragmentShader: vt.meshtoon_frag
  },
  matcap: {
    uniforms: /* @__PURE__ */ Gn([
      Re.common,
      Re.bumpmap,
      Re.normalmap,
      Re.displacementmap,
      Re.fog,
      {
        matcap: { value: null }
      }
    ]),
    vertexShader: vt.meshmatcap_vert,
    fragmentShader: vt.meshmatcap_frag
  },
  points: {
    uniforms: /* @__PURE__ */ Gn([
      Re.points,
      Re.fog
    ]),
    vertexShader: vt.points_vert,
    fragmentShader: vt.points_frag
  },
  dashed: {
    uniforms: /* @__PURE__ */ Gn([
      Re.common,
      Re.fog,
      {
        scale: { value: 1 },
        dashSize: { value: 1 },
        totalSize: { value: 2 }
      }
    ]),
    vertexShader: vt.linedashed_vert,
    fragmentShader: vt.linedashed_frag
  },
  depth: {
    uniforms: /* @__PURE__ */ Gn([
      Re.common,
      Re.displacementmap
    ]),
    vertexShader: vt.depth_vert,
    fragmentShader: vt.depth_frag
  },
  normal: {
    uniforms: /* @__PURE__ */ Gn([
      Re.common,
      Re.bumpmap,
      Re.normalmap,
      Re.displacementmap,
      {
        opacity: { value: 1 }
      }
    ]),
    vertexShader: vt.meshnormal_vert,
    fragmentShader: vt.meshnormal_frag
  },
  sprite: {
    uniforms: /* @__PURE__ */ Gn([
      Re.sprite,
      Re.fog
    ]),
    vertexShader: vt.sprite_vert,
    fragmentShader: vt.sprite_frag
  },
  background: {
    uniforms: {
      uvTransform: { value: /* @__PURE__ */ new yt() },
      t2D: { value: null },
      backgroundIntensity: { value: 1 }
    },
    vertexShader: vt.background_vert,
    fragmentShader: vt.background_frag
  },
  backgroundCube: {
    uniforms: {
      envMap: { value: null },
      flipEnvMap: { value: -1 },
      backgroundBlurriness: { value: 0 },
      backgroundIntensity: { value: 1 }
    },
    vertexShader: vt.backgroundCube_vert,
    fragmentShader: vt.backgroundCube_frag
  },
  cube: {
    uniforms: {
      tCube: { value: null },
      tFlip: { value: -1 },
      opacity: { value: 1 }
    },
    vertexShader: vt.cube_vert,
    fragmentShader: vt.cube_frag
  },
  equirect: {
    uniforms: {
      tEquirect: { value: null }
    },
    vertexShader: vt.equirect_vert,
    fragmentShader: vt.equirect_frag
  },
  distanceRGBA: {
    uniforms: /* @__PURE__ */ Gn([
      Re.common,
      Re.displacementmap,
      {
        referencePosition: { value: /* @__PURE__ */ new I() },
        nearDistance: { value: 1 },
        farDistance: { value: 1e3 }
      }
    ]),
    vertexShader: vt.distanceRGBA_vert,
    fragmentShader: vt.distanceRGBA_frag
  },
  shadow: {
    uniforms: /* @__PURE__ */ Gn([
      Re.lights,
      Re.fog,
      {
        color: { value: /* @__PURE__ */ new Fe(0) },
        opacity: { value: 1 }
      }
    ]),
    vertexShader: vt.shadow_vert,
    fragmentShader: vt.shadow_frag
  }
};
Bi.physical = {
  uniforms: /* @__PURE__ */ Gn([
    Bi.standard.uniforms,
    {
      clearcoat: { value: 0 },
      clearcoatMap: { value: null },
      clearcoatMapTransform: { value: /* @__PURE__ */ new yt() },
      clearcoatNormalMap: { value: null },
      clearcoatNormalMapTransform: { value: /* @__PURE__ */ new yt() },
      clearcoatNormalScale: { value: /* @__PURE__ */ new de(1, 1) },
      clearcoatRoughness: { value: 0 },
      clearcoatRoughnessMap: { value: null },
      clearcoatRoughnessMapTransform: { value: /* @__PURE__ */ new yt() },
      iridescence: { value: 0 },
      iridescenceMap: { value: null },
      iridescenceMapTransform: { value: /* @__PURE__ */ new yt() },
      iridescenceIOR: { value: 1.3 },
      iridescenceThicknessMinimum: { value: 100 },
      iridescenceThicknessMaximum: { value: 400 },
      iridescenceThicknessMap: { value: null },
      iridescenceThicknessMapTransform: { value: /* @__PURE__ */ new yt() },
      sheen: { value: 0 },
      sheenColor: { value: /* @__PURE__ */ new Fe(0) },
      sheenColorMap: { value: null },
      sheenColorMapTransform: { value: /* @__PURE__ */ new yt() },
      sheenRoughness: { value: 1 },
      sheenRoughnessMap: { value: null },
      sheenRoughnessMapTransform: { value: /* @__PURE__ */ new yt() },
      transmission: { value: 0 },
      transmissionMap: { value: null },
      transmissionMapTransform: { value: /* @__PURE__ */ new yt() },
      transmissionSamplerSize: { value: /* @__PURE__ */ new de() },
      transmissionSamplerMap: { value: null },
      thickness: { value: 0 },
      thicknessMap: { value: null },
      thicknessMapTransform: { value: /* @__PURE__ */ new yt() },
      attenuationDistance: { value: 0 },
      attenuationColor: { value: /* @__PURE__ */ new Fe(0) },
      specularColor: { value: /* @__PURE__ */ new Fe(1, 1, 1) },
      specularColorMap: { value: null },
      specularColorMapTransform: { value: /* @__PURE__ */ new yt() },
      specularIntensity: { value: 1 },
      specularIntensityMap: { value: null },
      specularIntensityMapTransform: { value: /* @__PURE__ */ new yt() },
      anisotropyVector: { value: /* @__PURE__ */ new de() },
      anisotropyMap: { value: null },
      anisotropyMapTransform: { value: /* @__PURE__ */ new yt() }
    }
  ]),
  vertexShader: vt.meshphysical_vert,
  fragmentShader: vt.meshphysical_frag
};
const iu = { r: 0, b: 0, g: 0 };
function WA(a, e, t, n, i, o, l) {
  const c = new Fe(0);
  let h = o === !0 ? 0 : 1, f, p, m = null, g = 0, v = null;
  function x(S, y) {
    let T = !1, b = y.isScene === !0 ? y.background : null;
    b && b.isTexture && (b = (y.backgroundBlurriness > 0 ? t : e).get(b)), b === null ? E(c, h) : b && b.isColor && (E(b, 1), T = !0);
    const A = a.xr.getEnvironmentBlendMode();
    A === "additive" ? n.buffers.color.setClear(0, 0, 0, 1, l) : A === "alpha-blend" && n.buffers.color.setClear(0, 0, 0, 0, l), (a.autoClear || T) && a.clear(a.autoClearColor, a.autoClearDepth, a.autoClearStencil), b && (b.isCubeTexture || b.mapping === Eo) ? (p === void 0 && (p = new pn(
      new or(1, 1, 1),
      new Gi({
        name: "BackgroundCubeMaterial",
        uniforms: xo(Bi.backgroundCube.uniforms),
        vertexShader: Bi.backgroundCube.vertexShader,
        fragmentShader: Bi.backgroundCube.fragmentShader,
        side: Xn,
        depthTest: !1,
        depthWrite: !1,
        fog: !1
      })
    ), p.geometry.deleteAttribute("normal"), p.geometry.deleteAttribute("uv"), p.onBeforeRender = function(N, R, P) {
      this.matrixWorld.copyPosition(P.matrixWorld);
    }, Object.defineProperty(p.material, "envMap", {
      get: function() {
        return this.uniforms.envMap.value;
      }
    }), i.update(p)), p.material.uniforms.envMap.value = b, p.material.uniforms.flipEnvMap.value = b.isCubeTexture && b.isRenderTargetTexture === !1 ? -1 : 1, p.material.uniforms.backgroundBlurriness.value = y.backgroundBlurriness, p.material.uniforms.backgroundIntensity.value = y.backgroundIntensity, p.material.toneMapped = Dt.getTransfer(b.colorSpace) !== Wt, (m !== b || g !== b.version || v !== a.toneMapping) && (p.material.needsUpdate = !0, m = b, g = b.version, v = a.toneMapping), p.layers.enableAll(), S.unshift(p, p.geometry, p.material, 0, 0, null)) : b && b.isTexture && (f === void 0 && (f = new pn(
      new bo(2, 2),
      new Gi({
        name: "BackgroundMaterial",
        uniforms: xo(Bi.background.uniforms),
        vertexShader: Bi.background.vertexShader,
        fragmentShader: Bi.background.fragmentShader,
        side: As,
        depthTest: !1,
        depthWrite: !1,
        fog: !1
      })
    ), f.geometry.deleteAttribute("normal"), Object.defineProperty(f.material, "map", {
      get: function() {
        return this.uniforms.t2D.value;
      }
    }), i.update(f)), f.material.uniforms.t2D.value = b, f.material.uniforms.backgroundIntensity.value = y.backgroundIntensity, f.material.toneMapped = Dt.getTransfer(b.colorSpace) !== Wt, b.matrixAutoUpdate === !0 && b.updateMatrix(), f.material.uniforms.uvTransform.value.copy(b.matrix), (m !== b || g !== b.version || v !== a.toneMapping) && (f.material.needsUpdate = !0, m = b, g = b.version, v = a.toneMapping), f.layers.enableAll(), S.unshift(f, f.geometry, f.material, 0, 0, null));
  }
  function E(S, y) {
    S.getRGB(iu, ox(a)), n.buffers.color.setClear(iu.r, iu.g, iu.b, y, l);
  }
  return {
    getClearColor: function() {
      return c;
    },
    setClearColor: function(S, y = 1) {
      c.set(S), h = y, E(c, h);
    },
    getClearAlpha: function() {
      return h;
    },
    setClearAlpha: function(S) {
      h = S, E(c, h);
    },
    render: x
  };
}
function XA(a, e, t, n) {
  const i = a.getParameter(a.MAX_VERTEX_ATTRIBS), o = n.isWebGL2 ? null : e.get("OES_vertex_array_object"), l = n.isWebGL2 || o !== null, c = {}, h = S(null);
  let f = h, p = !1;
  function m(z, q, W, Q, Z) {
    let K = !1;
    if (l) {
      const le = E(Q, W, q);
      f !== le && (f = le, v(f.object)), K = y(z, Q, W, Z), K && T(z, Q, W, Z);
    } else {
      const le = q.wireframe === !0;
      (f.geometry !== Q.id || f.program !== W.id || f.wireframe !== le) && (f.geometry = Q.id, f.program = W.id, f.wireframe = le, K = !0);
    }
    Z !== null && t.update(Z, a.ELEMENT_ARRAY_BUFFER), (K || p) && (p = !1, H(z, q, W, Q), Z !== null && a.bindBuffer(a.ELEMENT_ARRAY_BUFFER, t.get(Z).buffer));
  }
  function g() {
    return n.isWebGL2 ? a.createVertexArray() : o.createVertexArrayOES();
  }
  function v(z) {
    return n.isWebGL2 ? a.bindVertexArray(z) : o.bindVertexArrayOES(z);
  }
  function x(z) {
    return n.isWebGL2 ? a.deleteVertexArray(z) : o.deleteVertexArrayOES(z);
  }
  function E(z, q, W) {
    const Q = W.wireframe === !0;
    let Z = c[z.id];
    Z === void 0 && (Z = {}, c[z.id] = Z);
    let K = Z[q.id];
    K === void 0 && (K = {}, Z[q.id] = K);
    let le = K[Q];
    return le === void 0 && (le = S(g()), K[Q] = le), le;
  }
  function S(z) {
    const q = [], W = [], Q = [];
    for (let Z = 0; Z < i; Z++)
      q[Z] = 0, W[Z] = 0, Q[Z] = 0;
    return {
      // for backward compatibility on non-VAO support browser
      geometry: null,
      program: null,
      wireframe: !1,
      newAttributes: q,
      enabledAttributes: W,
      attributeDivisors: Q,
      object: z,
      attributes: {},
      index: null
    };
  }
  function y(z, q, W, Q) {
    const Z = f.attributes, K = q.attributes;
    let le = 0;
    const oe = W.getAttributes();
    for (const ge in oe)
      if (oe[ge].location >= 0) {
        const ce = Z[ge];
        let be = K[ge];
        if (be === void 0 && (ge === "instanceMatrix" && z.instanceMatrix && (be = z.instanceMatrix), ge === "instanceColor" && z.instanceColor && (be = z.instanceColor)), ce === void 0 || ce.attribute !== be || be && ce.data !== be.data) return !0;
        le++;
      }
    return f.attributesNum !== le || f.index !== Q;
  }
  function T(z, q, W, Q) {
    const Z = {}, K = q.attributes;
    let le = 0;
    const oe = W.getAttributes();
    for (const ge in oe)
      if (oe[ge].location >= 0) {
        let ce = K[ge];
        ce === void 0 && (ge === "instanceMatrix" && z.instanceMatrix && (ce = z.instanceMatrix), ge === "instanceColor" && z.instanceColor && (ce = z.instanceColor));
        const be = {};
        be.attribute = ce, ce && ce.data && (be.data = ce.data), Z[ge] = be, le++;
      }
    f.attributes = Z, f.attributesNum = le, f.index = Q;
  }
  function b() {
    const z = f.newAttributes;
    for (let q = 0, W = z.length; q < W; q++)
      z[q] = 0;
  }
  function A(z) {
    N(z, 0);
  }
  function N(z, q) {
    const W = f.newAttributes, Q = f.enabledAttributes, Z = f.attributeDivisors;
    W[z] = 1, Q[z] === 0 && (a.enableVertexAttribArray(z), Q[z] = 1), Z[z] !== q && ((n.isWebGL2 ? a : e.get("ANGLE_instanced_arrays"))[n.isWebGL2 ? "vertexAttribDivisor" : "vertexAttribDivisorANGLE"](z, q), Z[z] = q);
  }
  function R() {
    const z = f.newAttributes, q = f.enabledAttributes;
    for (let W = 0, Q = q.length; W < Q; W++)
      q[W] !== z[W] && (a.disableVertexAttribArray(W), q[W] = 0);
  }
  function P(z, q, W, Q, Z, K, le) {
    le === !0 ? a.vertexAttribIPointer(z, q, W, Z, K) : a.vertexAttribPointer(z, q, W, Q, Z, K);
  }
  function H(z, q, W, Q) {
    if (n.isWebGL2 === !1 && (z.isInstancedMesh || Q.isInstancedBufferGeometry) && e.get("ANGLE_instanced_arrays") === null)
      return;
    b();
    const Z = Q.attributes, K = W.getAttributes(), le = q.defaultAttributeValues;
    for (const oe in K) {
      const ge = K[oe];
      if (ge.location >= 0) {
        let ee = Z[oe];
        if (ee === void 0 && (oe === "instanceMatrix" && z.instanceMatrix && (ee = z.instanceMatrix), oe === "instanceColor" && z.instanceColor && (ee = z.instanceColor)), ee !== void 0) {
          const ce = ee.normalized, be = ee.itemSize, Ve = t.get(ee);
          if (Ve === void 0) continue;
          const Ie = Ve.buffer, je = Ve.type, st = Ve.bytesPerElement, qe = n.isWebGL2 === !0 && (je === a.INT || je === a.UNSIGNED_INT || ee.gpuType === tm);
          if (ee.isInterleavedBufferAttribute) {
            const nt = ee.data, F = nt.stride, Ee = ee.offset;
            if (nt.isInstancedInterleavedBuffer) {
              for (let ue = 0; ue < ge.locationSize; ue++)
                N(ge.location + ue, nt.meshPerAttribute);
              z.isInstancedMesh !== !0 && Q._maxInstanceCount === void 0 && (Q._maxInstanceCount = nt.meshPerAttribute * nt.count);
            } else
              for (let ue = 0; ue < ge.locationSize; ue++)
                A(ge.location + ue);
            a.bindBuffer(a.ARRAY_BUFFER, Ie);
            for (let ue = 0; ue < ge.locationSize; ue++)
              P(
                ge.location + ue,
                be / ge.locationSize,
                je,
                ce,
                F * st,
                (Ee + be / ge.locationSize * ue) * st,
                qe
              );
          } else {
            if (ee.isInstancedBufferAttribute) {
              for (let nt = 0; nt < ge.locationSize; nt++)
                N(ge.location + nt, ee.meshPerAttribute);
              z.isInstancedMesh !== !0 && Q._maxInstanceCount === void 0 && (Q._maxInstanceCount = ee.meshPerAttribute * ee.count);
            } else
              for (let nt = 0; nt < ge.locationSize; nt++)
                A(ge.location + nt);
            a.bindBuffer(a.ARRAY_BUFFER, Ie);
            for (let nt = 0; nt < ge.locationSize; nt++)
              P(
                ge.location + nt,
                be / ge.locationSize,
                je,
                ce,
                be * st,
                be / ge.locationSize * nt * st,
                qe
              );
          }
        } else if (le !== void 0) {
          const ce = le[oe];
          if (ce !== void 0)
            switch (ce.length) {
              case 2:
                a.vertexAttrib2fv(ge.location, ce);
                break;
              case 3:
                a.vertexAttrib3fv(ge.location, ce);
                break;
              case 4:
                a.vertexAttrib4fv(ge.location, ce);
                break;
              default:
                a.vertexAttrib1fv(ge.location, ce);
            }
        }
      }
    }
    R();
  }
  function w() {
    ne();
    for (const z in c) {
      const q = c[z];
      for (const W in q) {
        const Q = q[W];
        for (const Z in Q)
          x(Q[Z].object), delete Q[Z];
        delete q[W];
      }
      delete c[z];
    }
  }
  function C(z) {
    if (c[z.id] === void 0) return;
    const q = c[z.id];
    for (const W in q) {
      const Q = q[W];
      for (const Z in Q)
        x(Q[Z].object), delete Q[Z];
      delete q[W];
    }
    delete c[z.id];
  }
  function X(z) {
    for (const q in c) {
      const W = c[q];
      if (W[z.id] === void 0) continue;
      const Q = W[z.id];
      for (const Z in Q)
        x(Q[Z].object), delete Q[Z];
      delete W[z.id];
    }
  }
  function ne() {
    ae(), p = !0, f !== h && (f = h, v(f.object));
  }
  function ae() {
    h.geometry = null, h.program = null, h.wireframe = !1;
  }
  return {
    setup: m,
    reset: ne,
    resetDefaultState: ae,
    dispose: w,
    releaseStatesOfGeometry: C,
    releaseStatesOfProgram: X,
    initAttributes: b,
    enableAttribute: A,
    disableUnusedAttributes: R
  };
}
function kA(a, e, t, n) {
  const i = n.isWebGL2;
  let o;
  function l(p) {
    o = p;
  }
  function c(p, m) {
    a.drawArrays(o, p, m), t.update(m, o, 1);
  }
  function h(p, m, g) {
    if (g === 0) return;
    let v, x;
    if (i)
      v = a, x = "drawArraysInstanced";
    else if (v = e.get("ANGLE_instanced_arrays"), x = "drawArraysInstancedANGLE", v === null) {
      console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
      return;
    }
    v[x](o, p, m, g), t.update(m, o, g);
  }
  function f(p, m, g) {
    if (g === 0) return;
    const v = e.get("WEBGL_multi_draw");
    if (v === null)
      for (let x = 0; x < g; x++)
        this.render(p[x], m[x]);
    else {
      v.multiDrawArraysWEBGL(o, p, 0, m, 0, g);
      let x = 0;
      for (let E = 0; E < g; E++)
        x += m[E];
      t.update(x, o, 1);
    }
  }
  this.setMode = l, this.render = c, this.renderInstances = h, this.renderMultiDraw = f;
}
function qA(a, e, t) {
  let n;
  function i() {
    if (n !== void 0) return n;
    if (e.has("EXT_texture_filter_anisotropic") === !0) {
      const P = e.get("EXT_texture_filter_anisotropic");
      n = a.getParameter(P.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
    } else
      n = 0;
    return n;
  }
  function o(P) {
    if (P === "highp") {
      if (a.getShaderPrecisionFormat(a.VERTEX_SHADER, a.HIGH_FLOAT).precision > 0 && a.getShaderPrecisionFormat(a.FRAGMENT_SHADER, a.HIGH_FLOAT).precision > 0)
        return "highp";
      P = "mediump";
    }
    return P === "mediump" && a.getShaderPrecisionFormat(a.VERTEX_SHADER, a.MEDIUM_FLOAT).precision > 0 && a.getShaderPrecisionFormat(a.FRAGMENT_SHADER, a.MEDIUM_FLOAT).precision > 0 ? "mediump" : "lowp";
  }
  const l = typeof WebGL2RenderingContext < "u" && a.constructor.name === "WebGL2RenderingContext";
  let c = t.precision !== void 0 ? t.precision : "highp";
  const h = o(c);
  h !== c && (console.warn("THREE.WebGLRenderer:", c, "not supported, using", h, "instead."), c = h);
  const f = l || e.has("WEBGL_draw_buffers"), p = t.logarithmicDepthBuffer === !0, m = a.getParameter(a.MAX_TEXTURE_IMAGE_UNITS), g = a.getParameter(a.MAX_VERTEX_TEXTURE_IMAGE_UNITS), v = a.getParameter(a.MAX_TEXTURE_SIZE), x = a.getParameter(a.MAX_CUBE_MAP_TEXTURE_SIZE), E = a.getParameter(a.MAX_VERTEX_ATTRIBS), S = a.getParameter(a.MAX_VERTEX_UNIFORM_VECTORS), y = a.getParameter(a.MAX_VARYING_VECTORS), T = a.getParameter(a.MAX_FRAGMENT_UNIFORM_VECTORS), b = g > 0, A = l || e.has("OES_texture_float"), N = b && A, R = l ? a.getParameter(a.MAX_SAMPLES) : 0;
  return {
    isWebGL2: l,
    drawBuffers: f,
    getMaxAnisotropy: i,
    getMaxPrecision: o,
    precision: c,
    logarithmicDepthBuffer: p,
    maxTextures: m,
    maxVertexTextures: g,
    maxTextureSize: v,
    maxCubemapSize: x,
    maxAttributes: E,
    maxVertexUniforms: S,
    maxVaryings: y,
    maxFragmentUniforms: T,
    vertexTextures: b,
    floatFragmentTextures: A,
    floatVertexTextures: N,
    maxSamples: R
  };
}
function YA(a) {
  const e = this;
  let t = null, n = 0, i = !1, o = !1;
  const l = new xs(), c = new yt(), h = { value: null, needsUpdate: !1 };
  this.uniform = h, this.numPlanes = 0, this.numIntersection = 0, this.init = function(m, g) {
    const v = m.length !== 0 || g || // enable state of previous frame - the clipping code has to
    // run another frame in order to reset the state:
    n !== 0 || i;
    return i = g, n = m.length, v;
  }, this.beginShadows = function() {
    o = !0, p(null);
  }, this.endShadows = function() {
    o = !1;
  }, this.setGlobalState = function(m, g) {
    t = p(m, g, 0);
  }, this.setState = function(m, g, v) {
    const x = m.clippingPlanes, E = m.clipIntersection, S = m.clipShadows, y = a.get(m);
    if (!i || x === null || x.length === 0 || o && !S)
      o ? p(null) : f();
    else {
      const T = o ? 0 : n, b = T * 4;
      let A = y.clippingState || null;
      h.value = A, A = p(x, g, b, v);
      for (let N = 0; N !== b; ++N)
        A[N] = t[N];
      y.clippingState = A, this.numIntersection = E ? this.numPlanes : 0, this.numPlanes += T;
    }
  };
  function f() {
    h.value !== t && (h.value = t, h.needsUpdate = n > 0), e.numPlanes = n, e.numIntersection = 0;
  }
  function p(m, g, v, x) {
    const E = m !== null ? m.length : 0;
    let S = null;
    if (E !== 0) {
      if (S = h.value, x !== !0 || S === null) {
        const y = v + E * 4, T = g.matrixWorldInverse;
        c.getNormalMatrix(T), (S === null || S.length < y) && (S = new Float32Array(y));
        for (let b = 0, A = v; b !== E; ++b, A += 4)
          l.copy(m[b]).applyMatrix4(T, c), l.normal.toArray(S, A), S[A + 3] = l.constant;
      }
      h.value = S, h.needsUpdate = !0;
    }
    return e.numPlanes = E, e.numIntersection = 0, S;
  }
}
function jA(a) {
  let e = /* @__PURE__ */ new WeakMap();
  function t(l, c) {
    return c === El ? l.mapping = ws : c === bl && (l.mapping = ia), l;
  }
  function n(l) {
    if (l && l.isTexture) {
      const c = l.mapping;
      if (c === El || c === bl)
        if (e.has(l)) {
          const h = e.get(l).texture;
          return t(h, l.mapping);
        } else {
          const h = l.image;
          if (h && h.height > 0) {
            const f = new ux(h.height / 2);
            return f.fromEquirectangularTexture(a, l), e.set(l, f), l.addEventListener("dispose", i), t(f.texture, l.mapping);
          } else
            return null;
        }
    }
    return l;
  }
  function i(l) {
    const c = l.target;
    c.removeEventListener("dispose", i);
    const h = e.get(c);
    h !== void 0 && (e.delete(c), h.dispose());
  }
  function o() {
    e = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: n,
    dispose: o
  };
}
class Ts extends oh {
  constructor(e = -1, t = 1, n = 1, i = -1, o = 0.1, l = 2e3) {
    super(), this.isOrthographicCamera = !0, this.type = "OrthographicCamera", this.zoom = 1, this.view = null, this.left = e, this.right = t, this.top = n, this.bottom = i, this.near = o, this.far = l, this.updateProjectionMatrix();
  }
  copy(e, t) {
    return super.copy(e, t), this.left = e.left, this.right = e.right, this.top = e.top, this.bottom = e.bottom, this.near = e.near, this.far = e.far, this.zoom = e.zoom, this.view = e.view === null ? null : Object.assign({}, e.view), this;
  }
  setViewOffset(e, t, n, i, o, l) {
    this.view === null && (this.view = {
      enabled: !0,
      fullWidth: 1,
      fullHeight: 1,
      offsetX: 0,
      offsetY: 0,
      width: 1,
      height: 1
    }), this.view.enabled = !0, this.view.fullWidth = e, this.view.fullHeight = t, this.view.offsetX = n, this.view.offsetY = i, this.view.width = o, this.view.height = l, this.updateProjectionMatrix();
  }
  clearViewOffset() {
    this.view !== null && (this.view.enabled = !1), this.updateProjectionMatrix();
  }
  updateProjectionMatrix() {
    const e = (this.right - this.left) / (2 * this.zoom), t = (this.top - this.bottom) / (2 * this.zoom), n = (this.right + this.left) / 2, i = (this.top + this.bottom) / 2;
    let o = n - e, l = n + e, c = i + t, h = i - t;
    if (this.view !== null && this.view.enabled) {
      const f = (this.right - this.left) / this.view.fullWidth / this.zoom, p = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
      o += f * this.view.offsetX, l = o + f * this.view.width, c -= p * this.view.offsetY, h = c - p * this.view.height;
    }
    this.projectionMatrix.makeOrthographic(o, l, c, h, this.near, this.far, this.coordinateSystem), this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.object.zoom = this.zoom, t.object.left = this.left, t.object.right = this.right, t.object.top = this.top, t.object.bottom = this.bottom, t.object.near = this.near, t.object.far = this.far, this.view !== null && (t.object.view = Object.assign({}, this.view)), t;
  }
}
const uo = 4, M0 = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582], qa = 20, _d = /* @__PURE__ */ new Ts(), E0 = /* @__PURE__ */ new Fe();
let yd = null, xd = 0, Sd = 0;
const ka = (1 + Math.sqrt(5)) / 2, $r = 1 / ka, b0 = [
  /* @__PURE__ */ new I(1, 1, 1),
  /* @__PURE__ */ new I(-1, 1, 1),
  /* @__PURE__ */ new I(1, 1, -1),
  /* @__PURE__ */ new I(-1, 1, -1),
  /* @__PURE__ */ new I(0, ka, $r),
  /* @__PURE__ */ new I(0, ka, -$r),
  /* @__PURE__ */ new I($r, 0, ka),
  /* @__PURE__ */ new I(-$r, 0, ka),
  /* @__PURE__ */ new I(ka, $r, 0),
  /* @__PURE__ */ new I(-ka, $r, 0)
];
class Ip {
  constructor(e) {
    this._renderer = e, this._pingPongRenderTarget = null, this._lodMax = 0, this._cubeSize = 0, this._lodPlanes = [], this._sizeLods = [], this._sigmas = [], this._blurMaterial = null, this._cubemapMaterial = null, this._equirectMaterial = null, this._compileMaterial(this._blurMaterial);
  }
  /**
   * Generates a PMREM from a supplied Scene, which can be faster than using an
   * image if networking bandwidth is low. Optional sigma specifies a blur radius
   * in radians to be applied to the scene before PMREM generation. Optional near
   * and far planes ensure the scene is rendered in its entirety (the cubeCamera
   * is placed at the origin).
   */
  fromScene(e, t = 0, n = 0.1, i = 100) {
    yd = this._renderer.getRenderTarget(), xd = this._renderer.getActiveCubeFace(), Sd = this._renderer.getActiveMipmapLevel(), this._setSize(256);
    const o = this._allocateTargets();
    return o.depthBuffer = !0, this._sceneToCubeUV(e, n, i, o), t > 0 && this._blur(o, 0, 0, t), this._applyPMREM(o), this._cleanup(o), o;
  }
  /**
   * Generates a PMREM from an equirectangular texture, which can be either LDR
   * or HDR. The ideal input image size is 1k (1024 x 512),
   * as this matches best with the 256 x 256 cubemap output.
   */
  fromEquirectangular(e, t = null) {
    return this._fromTexture(e, t);
  }
  /**
   * Generates a PMREM from an cubemap texture, which can be either LDR
   * or HDR. The ideal input cube size is 256 x 256,
   * as this matches best with the 256 x 256 cubemap output.
   */
  fromCubemap(e, t = null) {
    return this._fromTexture(e, t);
  }
  /**
   * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
   * your texture's network fetch for increased concurrency.
   */
  compileCubemapShader() {
    this._cubemapMaterial === null && (this._cubemapMaterial = w0(), this._compileMaterial(this._cubemapMaterial));
  }
  /**
   * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
   * your texture's network fetch for increased concurrency.
   */
  compileEquirectangularShader() {
    this._equirectMaterial === null && (this._equirectMaterial = A0(), this._compileMaterial(this._equirectMaterial));
  }
  /**
   * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
   * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
   * one of them will cause any others to also become unusable.
   */
  dispose() {
    this._dispose(), this._cubemapMaterial !== null && this._cubemapMaterial.dispose(), this._equirectMaterial !== null && this._equirectMaterial.dispose();
  }
  // private interface
  _setSize(e) {
    this._lodMax = Math.floor(Math.log2(e)), this._cubeSize = Math.pow(2, this._lodMax);
  }
  _dispose() {
    this._blurMaterial !== null && this._blurMaterial.dispose(), this._pingPongRenderTarget !== null && this._pingPongRenderTarget.dispose();
    for (let e = 0; e < this._lodPlanes.length; e++)
      this._lodPlanes[e].dispose();
  }
  _cleanup(e) {
    this._renderer.setRenderTarget(yd, xd, Sd), e.scissorTest = !1, su(e, 0, 0, e.width, e.height);
  }
  _fromTexture(e, t) {
    e.mapping === ws || e.mapping === ia ? this._setSize(e.image.length === 0 ? 16 : e.image[0].width || e.image[0].image.width) : this._setSize(e.image.width / 4), yd = this._renderer.getRenderTarget(), xd = this._renderer.getActiveCubeFace(), Sd = this._renderer.getActiveMipmapLevel();
    const n = t || this._allocateTargets();
    return this._textureToCubeUV(e, n), this._applyPMREM(n), this._cleanup(n), n;
  }
  _allocateTargets() {
    const e = 3 * Math.max(this._cubeSize, 112), t = 4 * this._cubeSize, n = {
      magFilter: ln,
      minFilter: ln,
      generateMipmaps: !1,
      type: go,
      format: Wn,
      colorSpace: Vi,
      depthBuffer: !1
    }, i = T0(e, t, n);
    if (this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== e || this._pingPongRenderTarget.height !== t) {
      this._pingPongRenderTarget !== null && this._dispose(), this._pingPongRenderTarget = T0(e, t, n);
      const { _lodMax: o } = this;
      ({ sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = ZA(o)), this._blurMaterial = KA(o, e, t);
    }
    return i;
  }
  _compileMaterial(e) {
    const t = new pn(this._lodPlanes[0], e);
    this._renderer.compile(t, _d);
  }
  _sceneToCubeUV(e, t, n, i) {
    const c = new cn(90, 1, t, n), h = [1, -1, 1, 1, 1, 1], f = [1, 1, 1, -1, -1, -1], p = this._renderer, m = p.autoClear, g = p.toneMapping;
    p.getClearColor(E0), p.toneMapping = Ji, p.autoClear = !1;
    const v = new oa({
      name: "PMREM.Background",
      side: Xn,
      depthWrite: !1,
      depthTest: !1
    }), x = new pn(new or(), v);
    let E = !1;
    const S = e.background;
    S ? S.isColor && (v.color.copy(S), e.background = null, E = !0) : (v.color.copy(E0), E = !0);
    for (let y = 0; y < 6; y++) {
      const T = y % 3;
      T === 0 ? (c.up.set(0, h[y], 0), c.lookAt(f[y], 0, 0)) : T === 1 ? (c.up.set(0, 0, h[y]), c.lookAt(0, f[y], 0)) : (c.up.set(0, h[y], 0), c.lookAt(0, 0, f[y]));
      const b = this._cubeSize;
      su(i, T * b, y > 2 ? b : 0, b, b), p.setRenderTarget(i), E && p.render(x, c), p.render(e, c);
    }
    x.geometry.dispose(), x.material.dispose(), p.toneMapping = g, p.autoClear = m, e.background = S;
  }
  _textureToCubeUV(e, t) {
    const n = this._renderer, i = e.mapping === ws || e.mapping === ia;
    i ? (this._cubemapMaterial === null && (this._cubemapMaterial = w0()), this._cubemapMaterial.uniforms.flipEnvMap.value = e.isRenderTargetTexture === !1 ? -1 : 1) : this._equirectMaterial === null && (this._equirectMaterial = A0());
    const o = i ? this._cubemapMaterial : this._equirectMaterial, l = new pn(this._lodPlanes[0], o), c = o.uniforms;
    c.envMap.value = e;
    const h = this._cubeSize;
    su(t, 0, 0, 3 * h, 2 * h), n.setRenderTarget(t), n.render(l, _d);
  }
  _applyPMREM(e) {
    const t = this._renderer, n = t.autoClear;
    t.autoClear = !1;
    for (let i = 1; i < this._lodPlanes.length; i++) {
      const o = Math.sqrt(this._sigmas[i] * this._sigmas[i] - this._sigmas[i - 1] * this._sigmas[i - 1]), l = b0[(i - 1) % b0.length];
      this._blur(e, i - 1, i, o, l);
    }
    t.autoClear = n;
  }
  /**
   * This is a two-pass Gaussian blur for a cubemap. Normally this is done
   * vertically and horizontally, but this breaks down on a cube. Here we apply
   * the blur latitudinally (around the poles), and then longitudinally (towards
   * the poles) to approximate the orthogonally-separable blur. It is least
   * accurate at the poles, but still does a decent job.
   */
  _blur(e, t, n, i, o) {
    const l = this._pingPongRenderTarget;
    this._halfBlur(
      e,
      l,
      t,
      n,
      i,
      "latitudinal",
      o
    ), this._halfBlur(
      l,
      e,
      n,
      n,
      i,
      "longitudinal",
      o
    );
  }
  _halfBlur(e, t, n, i, o, l, c) {
    const h = this._renderer, f = this._blurMaterial;
    l !== "latitudinal" && l !== "longitudinal" && console.error(
      "blur direction must be either latitudinal or longitudinal!"
    );
    const p = 3, m = new pn(this._lodPlanes[i], f), g = f.uniforms, v = this._sizeLods[n] - 1, x = isFinite(o) ? Math.PI / (2 * v) : 2 * Math.PI / (2 * qa - 1), E = o / x, S = isFinite(o) ? 1 + Math.floor(p * E) : qa;
    S > qa && console.warn(`sigmaRadians, ${o}, is too large and will clip, as it requested ${S} samples when the maximum is set to ${qa}`);
    const y = [];
    let T = 0;
    for (let P = 0; P < qa; ++P) {
      const H = P / E, w = Math.exp(-H * H / 2);
      y.push(w), P === 0 ? T += w : P < S && (T += 2 * w);
    }
    for (let P = 0; P < y.length; P++)
      y[P] = y[P] / T;
    g.envMap.value = e.texture, g.samples.value = S, g.weights.value = y, g.latitudinal.value = l === "latitudinal", c && (g.poleAxis.value = c);
    const { _lodMax: b } = this;
    g.dTheta.value = x, g.mipInt.value = b - n;
    const A = this._sizeLods[i], N = 3 * A * (i > b - uo ? i - b + uo : 0), R = 4 * (this._cubeSize - A);
    su(t, N, R, 3 * A, 2 * A), h.setRenderTarget(t), h.render(m, _d);
  }
}
function ZA(a) {
  const e = [], t = [], n = [];
  let i = a;
  const o = a - uo + 1 + M0.length;
  for (let l = 0; l < o; l++) {
    const c = Math.pow(2, i);
    t.push(c);
    let h = 1 / c;
    l > a - uo ? h = M0[l - a + uo - 1] : l === 0 && (h = 0), n.push(h);
    const f = 1 / (c - 2), p = -f, m = 1 + f, g = [p, p, m, p, m, m, p, p, m, m, p, m], v = 6, x = 6, E = 3, S = 2, y = 1, T = new Float32Array(E * x * v), b = new Float32Array(S * x * v), A = new Float32Array(y * x * v);
    for (let R = 0; R < v; R++) {
      const P = R % 3 * 2 / 3 - 1, H = R > 2 ? 0 : -1, w = [
        P,
        H,
        0,
        P + 2 / 3,
        H,
        0,
        P + 2 / 3,
        H + 1,
        0,
        P,
        H,
        0,
        P + 2 / 3,
        H + 1,
        0,
        P,
        H + 1,
        0
      ];
      T.set(w, E * x * R), b.set(g, S * x * R);
      const C = [R, R, R, R, R, R];
      A.set(C, y * x * R);
    }
    const N = new xt();
    N.setAttribute("position", new zt(T, E)), N.setAttribute("uv", new zt(b, S)), N.setAttribute("faceIndex", new zt(A, y)), e.push(N), i > uo && i--;
  }
  return { lodPlanes: e, sizeLods: t, sigmas: n };
}
function T0(a, e, t) {
  const n = new wi(a, e, t);
  return n.texture.mapping = Eo, n.texture.name = "PMREM.cubeUv", n.scissorTest = !0, n;
}
function su(a, e, t, n, i) {
  a.viewport.set(e, t, n, i), a.scissor.set(e, t, n, i);
}
function KA(a, e, t) {
  const n = new Float32Array(qa), i = new I(0, 1, 0);
  return new Gi({
    name: "SphericalGaussianBlur",
    defines: {
      n: qa,
      CUBEUV_TEXEL_WIDTH: 1 / e,
      CUBEUV_TEXEL_HEIGHT: 1 / t,
      CUBEUV_MAX_MIP: `${a}.0`
    },
    uniforms: {
      envMap: { value: null },
      samples: { value: 1 },
      weights: { value: n },
      latitudinal: { value: !1 },
      dTheta: { value: 0 },
      mipInt: { value: 0 },
      poleAxis: { value: i }
    },
    vertexShader: gm(),
    fragmentShader: (
      /* glsl */
      `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`
    ),
    blending: bs,
    depthTest: !1,
    depthWrite: !1
  });
}
function A0() {
  return new Gi({
    name: "EquirectangularToCubeUV",
    uniforms: {
      envMap: { value: null }
    },
    vertexShader: gm(),
    fragmentShader: (
      /* glsl */
      `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`
    ),
    blending: bs,
    depthTest: !1,
    depthWrite: !1
  });
}
function w0() {
  return new Gi({
    name: "CubemapToCubeUV",
    uniforms: {
      envMap: { value: null },
      flipEnvMap: { value: -1 }
    },
    vertexShader: gm(),
    fragmentShader: (
      /* glsl */
      `

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`
    ),
    blending: bs,
    depthTest: !1,
    depthWrite: !1
  });
}
function gm() {
  return (
    /* glsl */
    `

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`
  );
}
function JA(a) {
  let e = /* @__PURE__ */ new WeakMap(), t = null;
  function n(c) {
    if (c && c.isTexture) {
      const h = c.mapping, f = h === El || h === bl, p = h === ws || h === ia;
      if (f || p)
        if (c.isRenderTargetTexture && c.needsPMREMUpdate === !0) {
          c.needsPMREMUpdate = !1;
          let m = e.get(c);
          return t === null && (t = new Ip(a)), m = f ? t.fromEquirectangular(c, m) : t.fromCubemap(c, m), e.set(c, m), m.texture;
        } else {
          if (e.has(c))
            return e.get(c).texture;
          {
            const m = c.image;
            if (f && m && m.height > 0 || p && m && i(m)) {
              t === null && (t = new Ip(a));
              const g = f ? t.fromEquirectangular(c) : t.fromCubemap(c);
              return e.set(c, g), c.addEventListener("dispose", o), g.texture;
            } else
              return null;
          }
        }
    }
    return c;
  }
  function i(c) {
    let h = 0;
    const f = 6;
    for (let p = 0; p < f; p++)
      c[p] !== void 0 && h++;
    return h === f;
  }
  function o(c) {
    const h = c.target;
    h.removeEventListener("dispose", o);
    const f = e.get(h);
    f !== void 0 && (e.delete(h), f.dispose());
  }
  function l() {
    e = /* @__PURE__ */ new WeakMap(), t !== null && (t.dispose(), t = null);
  }
  return {
    get: n,
    dispose: l
  };
}
function QA(a) {
  const e = {};
  function t(n) {
    if (e[n] !== void 0)
      return e[n];
    let i;
    switch (n) {
      case "WEBGL_depth_texture":
        i = a.getExtension("WEBGL_depth_texture") || a.getExtension("MOZ_WEBGL_depth_texture") || a.getExtension("WEBKIT_WEBGL_depth_texture");
        break;
      case "EXT_texture_filter_anisotropic":
        i = a.getExtension("EXT_texture_filter_anisotropic") || a.getExtension("MOZ_EXT_texture_filter_anisotropic") || a.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
        break;
      case "WEBGL_compressed_texture_s3tc":
        i = a.getExtension("WEBGL_compressed_texture_s3tc") || a.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || a.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
        break;
      case "WEBGL_compressed_texture_pvrtc":
        i = a.getExtension("WEBGL_compressed_texture_pvrtc") || a.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
        break;
      default:
        i = a.getExtension(n);
    }
    return e[n] = i, i;
  }
  return {
    has: function(n) {
      return t(n) !== null;
    },
    init: function(n) {
      n.isWebGL2 ? (t("EXT_color_buffer_float"), t("WEBGL_clip_cull_distance")) : (t("WEBGL_depth_texture"), t("OES_texture_float"), t("OES_texture_half_float"), t("OES_texture_half_float_linear"), t("OES_standard_derivatives"), t("OES_element_index_uint"), t("OES_vertex_array_object"), t("ANGLE_instanced_arrays")), t("OES_texture_float_linear"), t("EXT_color_buffer_half_float"), t("WEBGL_multisampled_render_to_texture");
    },
    get: function(n) {
      const i = t(n);
      return i === null && console.warn("THREE.WebGLRenderer: " + n + " extension not supported."), i;
    }
  };
}
function $A(a, e, t, n) {
  const i = {}, o = /* @__PURE__ */ new WeakMap();
  function l(m) {
    const g = m.target;
    g.index !== null && e.remove(g.index);
    for (const x in g.attributes)
      e.remove(g.attributes[x]);
    for (const x in g.morphAttributes) {
      const E = g.morphAttributes[x];
      for (let S = 0, y = E.length; S < y; S++)
        e.remove(E[S]);
    }
    g.removeEventListener("dispose", l), delete i[g.id];
    const v = o.get(g);
    v && (e.remove(v), o.delete(g)), n.releaseStatesOfGeometry(g), g.isInstancedBufferGeometry === !0 && delete g._maxInstanceCount, t.memory.geometries--;
  }
  function c(m, g) {
    return i[g.id] === !0 || (g.addEventListener("dispose", l), i[g.id] = !0, t.memory.geometries++), g;
  }
  function h(m) {
    const g = m.attributes;
    for (const x in g)
      e.update(g[x], a.ARRAY_BUFFER);
    const v = m.morphAttributes;
    for (const x in v) {
      const E = v[x];
      for (let S = 0, y = E.length; S < y; S++)
        e.update(E[S], a.ARRAY_BUFFER);
    }
  }
  function f(m) {
    const g = [], v = m.index, x = m.attributes.position;
    let E = 0;
    if (v !== null) {
      const T = v.array;
      E = v.version;
      for (let b = 0, A = T.length; b < A; b += 3) {
        const N = T[b + 0], R = T[b + 1], P = T[b + 2];
        g.push(N, R, R, P, P, N);
      }
    } else if (x !== void 0) {
      const T = x.array;
      E = x.version;
      for (let b = 0, A = T.length / 3 - 1; b < A; b += 3) {
        const N = b + 0, R = b + 1, P = b + 2;
        g.push(N, R, R, P, P, N);
      }
    } else
      return;
    const S = new (ix(g) ? mm : pm)(g, 1);
    S.version = E;
    const y = o.get(m);
    y && e.remove(y), o.set(m, S);
  }
  function p(m) {
    const g = o.get(m);
    if (g) {
      const v = m.index;
      v !== null && g.version < v.version && f(m);
    } else
      f(m);
    return o.get(m);
  }
  return {
    get: c,
    update: h,
    getWireframeAttribute: p
  };
}
function ew(a, e, t, n) {
  const i = n.isWebGL2;
  let o;
  function l(v) {
    o = v;
  }
  let c, h;
  function f(v) {
    c = v.type, h = v.bytesPerElement;
  }
  function p(v, x) {
    a.drawElements(o, x, c, v * h), t.update(x, o, 1);
  }
  function m(v, x, E) {
    if (E === 0) return;
    let S, y;
    if (i)
      S = a, y = "drawElementsInstanced";
    else if (S = e.get("ANGLE_instanced_arrays"), y = "drawElementsInstancedANGLE", S === null) {
      console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
      return;
    }
    S[y](o, x, c, v * h, E), t.update(x, o, E);
  }
  function g(v, x, E) {
    if (E === 0) return;
    const S = e.get("WEBGL_multi_draw");
    if (S === null)
      for (let y = 0; y < E; y++)
        this.render(v[y] / h, x[y]);
    else {
      S.multiDrawElementsWEBGL(o, x, 0, c, v, 0, E);
      let y = 0;
      for (let T = 0; T < E; T++)
        y += x[T];
      t.update(y, o, 1);
    }
  }
  this.setMode = l, this.setIndex = f, this.render = p, this.renderInstances = m, this.renderMultiDraw = g;
}
function tw(a) {
  const e = {
    geometries: 0,
    textures: 0
  }, t = {
    frame: 0,
    calls: 0,
    triangles: 0,
    points: 0,
    lines: 0
  };
  function n(o, l, c) {
    switch (t.calls++, l) {
      case a.TRIANGLES:
        t.triangles += c * (o / 3);
        break;
      case a.LINES:
        t.lines += c * (o / 2);
        break;
      case a.LINE_STRIP:
        t.lines += c * (o - 1);
        break;
      case a.LINE_LOOP:
        t.lines += c * o;
        break;
      case a.POINTS:
        t.points += c * o;
        break;
      default:
        console.error("THREE.WebGLInfo: Unknown draw mode:", l);
        break;
    }
  }
  function i() {
    t.calls = 0, t.triangles = 0, t.points = 0, t.lines = 0;
  }
  return {
    memory: e,
    render: t,
    programs: null,
    autoReset: !0,
    reset: i,
    update: n
  };
}
function nw(a, e) {
  return a[0] - e[0];
}
function iw(a, e) {
  return Math.abs(e[1]) - Math.abs(a[1]);
}
function sw(a, e, t) {
  const n = {}, i = new Float32Array(8), o = /* @__PURE__ */ new WeakMap(), l = new It(), c = [];
  for (let f = 0; f < 8; f++)
    c[f] = [f, 0];
  function h(f, p, m) {
    const g = f.morphTargetInfluences;
    if (e.isWebGL2 === !0) {
      const v = p.morphAttributes.position || p.morphAttributes.normal || p.morphAttributes.color, x = v !== void 0 ? v.length : 0;
      let E = o.get(p);
      if (E === void 0 || E.count !== x) {
        let T = function() {
          ae.dispose(), o.delete(p), p.removeEventListener("dispose", T);
        };
        E !== void 0 && E.texture.dispose();
        const b = p.morphAttributes.position !== void 0, A = p.morphAttributes.normal !== void 0, N = p.morphAttributes.color !== void 0, R = p.morphAttributes.position || [], P = p.morphAttributes.normal || [], H = p.morphAttributes.color || [];
        let w = 0;
        b === !0 && (w = 1), A === !0 && (w = 2), N === !0 && (w = 3);
        let C = p.attributes.position.count * w, X = 1;
        C > e.maxTextureSize && (X = Math.ceil(C / e.maxTextureSize), C = e.maxTextureSize);
        const ne = new Float32Array(C * X * 4 * x), ae = new rh(ne, C, X, x);
        ae.type = Hi, ae.needsUpdate = !0;
        const z = w * 4;
        for (let q = 0; q < x; q++) {
          const W = R[q], Q = P[q], Z = H[q], K = C * X * 4 * q;
          for (let le = 0; le < W.count; le++) {
            const oe = le * z;
            b === !0 && (l.fromBufferAttribute(W, le), ne[K + oe + 0] = l.x, ne[K + oe + 1] = l.y, ne[K + oe + 2] = l.z, ne[K + oe + 3] = 0), A === !0 && (l.fromBufferAttribute(Q, le), ne[K + oe + 4] = l.x, ne[K + oe + 5] = l.y, ne[K + oe + 6] = l.z, ne[K + oe + 7] = 0), N === !0 && (l.fromBufferAttribute(Z, le), ne[K + oe + 8] = l.x, ne[K + oe + 9] = l.y, ne[K + oe + 10] = l.z, ne[K + oe + 11] = Z.itemSize === 4 ? l.w : 1);
          }
        }
        E = {
          count: x,
          texture: ae,
          size: new de(C, X)
        }, o.set(p, E), p.addEventListener("dispose", T);
      }
      let S = 0;
      for (let T = 0; T < g.length; T++)
        S += g[T];
      const y = p.morphTargetsRelative ? 1 : 1 - S;
      m.getUniforms().setValue(a, "morphTargetBaseInfluence", y), m.getUniforms().setValue(a, "morphTargetInfluences", g), m.getUniforms().setValue(a, "morphTargetsTexture", E.texture, t), m.getUniforms().setValue(a, "morphTargetsTextureSize", E.size);
    } else {
      const v = g === void 0 ? 0 : g.length;
      let x = n[p.id];
      if (x === void 0 || x.length !== v) {
        x = [];
        for (let b = 0; b < v; b++)
          x[b] = [b, 0];
        n[p.id] = x;
      }
      for (let b = 0; b < v; b++) {
        const A = x[b];
        A[0] = b, A[1] = g[b];
      }
      x.sort(iw);
      for (let b = 0; b < 8; b++)
        b < v && x[b][1] ? (c[b][0] = x[b][0], c[b][1] = x[b][1]) : (c[b][0] = Number.MAX_SAFE_INTEGER, c[b][1] = 0);
      c.sort(nw);
      const E = p.morphAttributes.position, S = p.morphAttributes.normal;
      let y = 0;
      for (let b = 0; b < 8; b++) {
        const A = c[b], N = A[0], R = A[1];
        N !== Number.MAX_SAFE_INTEGER && R ? (E && p.getAttribute("morphTarget" + b) !== E[N] && p.setAttribute("morphTarget" + b, E[N]), S && p.getAttribute("morphNormal" + b) !== S[N] && p.setAttribute("morphNormal" + b, S[N]), i[b] = R, y += R) : (E && p.hasAttribute("morphTarget" + b) === !0 && p.deleteAttribute("morphTarget" + b), S && p.hasAttribute("morphNormal" + b) === !0 && p.deleteAttribute("morphNormal" + b), i[b] = 0);
      }
      const T = p.morphTargetsRelative ? 1 : 1 - y;
      m.getUniforms().setValue(a, "morphTargetBaseInfluence", T), m.getUniforms().setValue(a, "morphTargetInfluences", i);
    }
  }
  return {
    update: h
  };
}
function aw(a, e, t, n) {
  let i = /* @__PURE__ */ new WeakMap();
  function o(h) {
    const f = n.render.frame, p = h.geometry, m = e.get(h, p);
    if (i.get(m) !== f && (e.update(m), i.set(m, f)), h.isInstancedMesh && (h.hasEventListener("dispose", c) === !1 && h.addEventListener("dispose", c), i.get(h) !== f && (t.update(h.instanceMatrix, a.ARRAY_BUFFER), h.instanceColor !== null && t.update(h.instanceColor, a.ARRAY_BUFFER), i.set(h, f))), h.isSkinnedMesh) {
      const g = h.skeleton;
      i.get(g) !== f && (g.update(), i.set(g, f));
    }
    return m;
  }
  function l() {
    i = /* @__PURE__ */ new WeakMap();
  }
  function c(h) {
    const f = h.target;
    f.removeEventListener("dispose", c), t.remove(f.instanceMatrix), f.instanceColor !== null && t.remove(f.instanceColor);
  }
  return {
    update: o,
    dispose: l
  };
}
class vm extends un {
  constructor(e, t, n, i, o, l, c, h, f, p) {
    if (p = p !== void 0 ? p : ta, p !== ta && p !== nr)
      throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
    n === void 0 && p === ta && (n = Ms), n === void 0 && p === nr && (n = ea), super(null, i, o, l, c, h, p, n, f), this.isDepthTexture = !0, this.image = { width: e, height: t }, this.magFilter = c !== void 0 ? c : on, this.minFilter = h !== void 0 ? h : on, this.flipY = !1, this.generateMipmaps = !1, this.compareFunction = null;
  }
  copy(e) {
    return super.copy(e), this.compareFunction = e.compareFunction, this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return this.compareFunction !== null && (t.compareFunction = this.compareFunction), t;
  }
}
const fx = /* @__PURE__ */ new un(), dx = /* @__PURE__ */ new vm(1, 1);
dx.compareFunction = um;
const px = /* @__PURE__ */ new rh(), mx = /* @__PURE__ */ new dm(), gx = /* @__PURE__ */ new Yl(), R0 = [], C0 = [], L0 = new Float32Array(16), U0 = new Float32Array(9), N0 = new Float32Array(4);
function To(a, e, t) {
  const n = a[0];
  if (n <= 0 || n > 0) return a;
  const i = e * t;
  let o = R0[i];
  if (o === void 0 && (o = new Float32Array(i), R0[i] = o), e !== 0) {
    n.toArray(o, 0);
    for (let l = 1, c = 0; l !== e; ++l)
      c += t, a[l].toArray(o, c);
  }
  return o;
}
function vn(a, e) {
  if (a.length !== e.length) return !1;
  for (let t = 0, n = a.length; t < n; t++)
    if (a[t] !== e[t]) return !1;
  return !0;
}
function _n(a, e) {
  for (let t = 0, n = e.length; t < n; t++)
    a[t] = e[t];
}
function lh(a, e) {
  let t = C0[e];
  t === void 0 && (t = new Int32Array(e), C0[e] = t);
  for (let n = 0; n !== e; ++n)
    t[n] = a.allocateTextureUnit();
  return t;
}
function rw(a, e) {
  const t = this.cache;
  t[0] !== e && (a.uniform1f(this.addr, e), t[0] = e);
}
function ow(a, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y) && (a.uniform2f(this.addr, e.x, e.y), t[0] = e.x, t[1] = e.y);
  else {
    if (vn(t, e)) return;
    a.uniform2fv(this.addr, e), _n(t, e);
  }
}
function lw(a, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) && (a.uniform3f(this.addr, e.x, e.y, e.z), t[0] = e.x, t[1] = e.y, t[2] = e.z);
  else if (e.r !== void 0)
    (t[0] !== e.r || t[1] !== e.g || t[2] !== e.b) && (a.uniform3f(this.addr, e.r, e.g, e.b), t[0] = e.r, t[1] = e.g, t[2] = e.b);
  else {
    if (vn(t, e)) return;
    a.uniform3fv(this.addr, e), _n(t, e);
  }
}
function cw(a, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) && (a.uniform4f(this.addr, e.x, e.y, e.z, e.w), t[0] = e.x, t[1] = e.y, t[2] = e.z, t[3] = e.w);
  else {
    if (vn(t, e)) return;
    a.uniform4fv(this.addr, e), _n(t, e);
  }
}
function uw(a, e) {
  const t = this.cache, n = e.elements;
  if (n === void 0) {
    if (vn(t, e)) return;
    a.uniformMatrix2fv(this.addr, !1, e), _n(t, e);
  } else {
    if (vn(t, n)) return;
    N0.set(n), a.uniformMatrix2fv(this.addr, !1, N0), _n(t, n);
  }
}
function hw(a, e) {
  const t = this.cache, n = e.elements;
  if (n === void 0) {
    if (vn(t, e)) return;
    a.uniformMatrix3fv(this.addr, !1, e), _n(t, e);
  } else {
    if (vn(t, n)) return;
    U0.set(n), a.uniformMatrix3fv(this.addr, !1, U0), _n(t, n);
  }
}
function fw(a, e) {
  const t = this.cache, n = e.elements;
  if (n === void 0) {
    if (vn(t, e)) return;
    a.uniformMatrix4fv(this.addr, !1, e), _n(t, e);
  } else {
    if (vn(t, n)) return;
    L0.set(n), a.uniformMatrix4fv(this.addr, !1, L0), _n(t, n);
  }
}
function dw(a, e) {
  const t = this.cache;
  t[0] !== e && (a.uniform1i(this.addr, e), t[0] = e);
}
function pw(a, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y) && (a.uniform2i(this.addr, e.x, e.y), t[0] = e.x, t[1] = e.y);
  else {
    if (vn(t, e)) return;
    a.uniform2iv(this.addr, e), _n(t, e);
  }
}
function mw(a, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) && (a.uniform3i(this.addr, e.x, e.y, e.z), t[0] = e.x, t[1] = e.y, t[2] = e.z);
  else {
    if (vn(t, e)) return;
    a.uniform3iv(this.addr, e), _n(t, e);
  }
}
function gw(a, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) && (a.uniform4i(this.addr, e.x, e.y, e.z, e.w), t[0] = e.x, t[1] = e.y, t[2] = e.z, t[3] = e.w);
  else {
    if (vn(t, e)) return;
    a.uniform4iv(this.addr, e), _n(t, e);
  }
}
function vw(a, e) {
  const t = this.cache;
  t[0] !== e && (a.uniform1ui(this.addr, e), t[0] = e);
}
function _w(a, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y) && (a.uniform2ui(this.addr, e.x, e.y), t[0] = e.x, t[1] = e.y);
  else {
    if (vn(t, e)) return;
    a.uniform2uiv(this.addr, e), _n(t, e);
  }
}
function yw(a, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) && (a.uniform3ui(this.addr, e.x, e.y, e.z), t[0] = e.x, t[1] = e.y, t[2] = e.z);
  else {
    if (vn(t, e)) return;
    a.uniform3uiv(this.addr, e), _n(t, e);
  }
}
function xw(a, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) && (a.uniform4ui(this.addr, e.x, e.y, e.z, e.w), t[0] = e.x, t[1] = e.y, t[2] = e.z, t[3] = e.w);
  else {
    if (vn(t, e)) return;
    a.uniform4uiv(this.addr, e), _n(t, e);
  }
}
function Sw(a, e, t) {
  const n = this.cache, i = t.allocateTextureUnit();
  n[0] !== i && (a.uniform1i(this.addr, i), n[0] = i);
  const o = this.type === a.SAMPLER_2D_SHADOW ? dx : fx;
  t.setTexture2D(e || o, i);
}
function Mw(a, e, t) {
  const n = this.cache, i = t.allocateTextureUnit();
  n[0] !== i && (a.uniform1i(this.addr, i), n[0] = i), t.setTexture3D(e || mx, i);
}
function Ew(a, e, t) {
  const n = this.cache, i = t.allocateTextureUnit();
  n[0] !== i && (a.uniform1i(this.addr, i), n[0] = i), t.setTextureCube(e || gx, i);
}
function bw(a, e, t) {
  const n = this.cache, i = t.allocateTextureUnit();
  n[0] !== i && (a.uniform1i(this.addr, i), n[0] = i), t.setTexture2DArray(e || px, i);
}
function Tw(a) {
  switch (a) {
    case 5126:
      return rw;
    // FLOAT
    case 35664:
      return ow;
    // _VEC2
    case 35665:
      return lw;
    // _VEC3
    case 35666:
      return cw;
    // _VEC4
    case 35674:
      return uw;
    // _MAT2
    case 35675:
      return hw;
    // _MAT3
    case 35676:
      return fw;
    // _MAT4
    case 5124:
    case 35670:
      return dw;
    // INT, BOOL
    case 35667:
    case 35671:
      return pw;
    // _VEC2
    case 35668:
    case 35672:
      return mw;
    // _VEC3
    case 35669:
    case 35673:
      return gw;
    // _VEC4
    case 5125:
      return vw;
    // UINT
    case 36294:
      return _w;
    // _VEC2
    case 36295:
      return yw;
    // _VEC3
    case 36296:
      return xw;
    // _VEC4
    case 35678:
    // SAMPLER_2D
    case 36198:
    // SAMPLER_EXTERNAL_OES
    case 36298:
    // INT_SAMPLER_2D
    case 36306:
    // UNSIGNED_INT_SAMPLER_2D
    case 35682:
      return Sw;
    case 35679:
    // SAMPLER_3D
    case 36299:
    // INT_SAMPLER_3D
    case 36307:
      return Mw;
    case 35680:
    // SAMPLER_CUBE
    case 36300:
    // INT_SAMPLER_CUBE
    case 36308:
    // UNSIGNED_INT_SAMPLER_CUBE
    case 36293:
      return Ew;
    case 36289:
    // SAMPLER_2D_ARRAY
    case 36303:
    // INT_SAMPLER_2D_ARRAY
    case 36311:
    // UNSIGNED_INT_SAMPLER_2D_ARRAY
    case 36292:
      return bw;
  }
}
function Aw(a, e) {
  a.uniform1fv(this.addr, e);
}
function ww(a, e) {
  const t = To(e, this.size, 2);
  a.uniform2fv(this.addr, t);
}
function Rw(a, e) {
  const t = To(e, this.size, 3);
  a.uniform3fv(this.addr, t);
}
function Cw(a, e) {
  const t = To(e, this.size, 4);
  a.uniform4fv(this.addr, t);
}
function Lw(a, e) {
  const t = To(e, this.size, 4);
  a.uniformMatrix2fv(this.addr, !1, t);
}
function Uw(a, e) {
  const t = To(e, this.size, 9);
  a.uniformMatrix3fv(this.addr, !1, t);
}
function Nw(a, e) {
  const t = To(e, this.size, 16);
  a.uniformMatrix4fv(this.addr, !1, t);
}
function Dw(a, e) {
  a.uniform1iv(this.addr, e);
}
function Pw(a, e) {
  a.uniform2iv(this.addr, e);
}
function Ow(a, e) {
  a.uniform3iv(this.addr, e);
}
function Iw(a, e) {
  a.uniform4iv(this.addr, e);
}
function zw(a, e) {
  a.uniform1uiv(this.addr, e);
}
function Bw(a, e) {
  a.uniform2uiv(this.addr, e);
}
function Hw(a, e) {
  a.uniform3uiv(this.addr, e);
}
function Fw(a, e) {
  a.uniform4uiv(this.addr, e);
}
function Vw(a, e, t) {
  const n = this.cache, i = e.length, o = lh(t, i);
  vn(n, o) || (a.uniform1iv(this.addr, o), _n(n, o));
  for (let l = 0; l !== i; ++l)
    t.setTexture2D(e[l] || fx, o[l]);
}
function Gw(a, e, t) {
  const n = this.cache, i = e.length, o = lh(t, i);
  vn(n, o) || (a.uniform1iv(this.addr, o), _n(n, o));
  for (let l = 0; l !== i; ++l)
    t.setTexture3D(e[l] || mx, o[l]);
}
function Ww(a, e, t) {
  const n = this.cache, i = e.length, o = lh(t, i);
  vn(n, o) || (a.uniform1iv(this.addr, o), _n(n, o));
  for (let l = 0; l !== i; ++l)
    t.setTextureCube(e[l] || gx, o[l]);
}
function Xw(a, e, t) {
  const n = this.cache, i = e.length, o = lh(t, i);
  vn(n, o) || (a.uniform1iv(this.addr, o), _n(n, o));
  for (let l = 0; l !== i; ++l)
    t.setTexture2DArray(e[l] || px, o[l]);
}
function kw(a) {
  switch (a) {
    case 5126:
      return Aw;
    // FLOAT
    case 35664:
      return ww;
    // _VEC2
    case 35665:
      return Rw;
    // _VEC3
    case 35666:
      return Cw;
    // _VEC4
    case 35674:
      return Lw;
    // _MAT2
    case 35675:
      return Uw;
    // _MAT3
    case 35676:
      return Nw;
    // _MAT4
    case 5124:
    case 35670:
      return Dw;
    // INT, BOOL
    case 35667:
    case 35671:
      return Pw;
    // _VEC2
    case 35668:
    case 35672:
      return Ow;
    // _VEC3
    case 35669:
    case 35673:
      return Iw;
    // _VEC4
    case 5125:
      return zw;
    // UINT
    case 36294:
      return Bw;
    // _VEC2
    case 36295:
      return Hw;
    // _VEC3
    case 36296:
      return Fw;
    // _VEC4
    case 35678:
    // SAMPLER_2D
    case 36198:
    // SAMPLER_EXTERNAL_OES
    case 36298:
    // INT_SAMPLER_2D
    case 36306:
    // UNSIGNED_INT_SAMPLER_2D
    case 35682:
      return Vw;
    case 35679:
    // SAMPLER_3D
    case 36299:
    // INT_SAMPLER_3D
    case 36307:
      return Gw;
    case 35680:
    // SAMPLER_CUBE
    case 36300:
    // INT_SAMPLER_CUBE
    case 36308:
    // UNSIGNED_INT_SAMPLER_CUBE
    case 36293:
      return Ww;
    case 36289:
    // SAMPLER_2D_ARRAY
    case 36303:
    // INT_SAMPLER_2D_ARRAY
    case 36311:
    // UNSIGNED_INT_SAMPLER_2D_ARRAY
    case 36292:
      return Xw;
  }
}
class qw {
  constructor(e, t, n) {
    this.id = e, this.addr = n, this.cache = [], this.type = t.type, this.setValue = Tw(t.type);
  }
}
class Yw {
  constructor(e, t, n) {
    this.id = e, this.addr = n, this.cache = [], this.type = t.type, this.size = t.size, this.setValue = kw(t.type);
  }
}
class jw {
  constructor(e) {
    this.id = e, this.seq = [], this.map = {};
  }
  setValue(e, t, n) {
    const i = this.seq;
    for (let o = 0, l = i.length; o !== l; ++o) {
      const c = i[o];
      c.setValue(e, t[c.id], n);
    }
  }
}
const Md = /(\w+)(\])?(\[|\.)?/g;
function D0(a, e) {
  a.seq.push(e), a.map[e.id] = e;
}
function Zw(a, e, t) {
  const n = a.name, i = n.length;
  for (Md.lastIndex = 0; ; ) {
    const o = Md.exec(n), l = Md.lastIndex;
    let c = o[1];
    const h = o[2] === "]", f = o[3];
    if (h && (c = c | 0), f === void 0 || f === "[" && l + 2 === i) {
      D0(t, f === void 0 ? new qw(c, a, e) : new Yw(c, a, e));
      break;
    } else {
      let m = t.map[c];
      m === void 0 && (m = new jw(c), D0(t, m)), t = m;
    }
  }
}
class Fu {
  constructor(e, t) {
    this.seq = [], this.map = {};
    const n = e.getProgramParameter(t, e.ACTIVE_UNIFORMS);
    for (let i = 0; i < n; ++i) {
      const o = e.getActiveUniform(t, i), l = e.getUniformLocation(t, o.name);
      Zw(o, l, this);
    }
  }
  setValue(e, t, n, i) {
    const o = this.map[t];
    o !== void 0 && o.setValue(e, n, i);
  }
  setOptional(e, t, n) {
    const i = t[n];
    i !== void 0 && this.setValue(e, n, i);
  }
  static upload(e, t, n, i) {
    for (let o = 0, l = t.length; o !== l; ++o) {
      const c = t[o], h = n[c.id];
      h.needsUpdate !== !1 && c.setValue(e, h.value, i);
    }
  }
  static seqWithValue(e, t) {
    const n = [];
    for (let i = 0, o = e.length; i !== o; ++i) {
      const l = e[i];
      l.id in t && n.push(l);
    }
    return n;
  }
}
function P0(a, e, t) {
  const n = a.createShader(e);
  return a.shaderSource(n, t), a.compileShader(n), n;
}
const Kw = 37297;
let Jw = 0;
function Qw(a, e) {
  const t = a.split(`
`), n = [], i = Math.max(e - 6, 0), o = Math.min(e + 6, t.length);
  for (let l = i; l < o; l++) {
    const c = l + 1;
    n.push(`${c === e ? ">" : " "} ${c}: ${t[l]}`);
  }
  return n.join(`
`);
}
function $w(a) {
  const e = Dt.getPrimaries(Dt.workingColorSpace), t = Dt.getPrimaries(a);
  let n;
  switch (e === t ? n = "" : e === Nl && t === Ul ? n = "LinearDisplayP3ToLinearSRGB" : e === Ul && t === Nl && (n = "LinearSRGBToLinearDisplayP3"), a) {
    case Vi:
    case kl:
      return [n, "LinearTransferOETF"];
    case nn:
    case ah:
      return [n, "sRGBTransferOETF"];
    default:
      return console.warn("THREE.WebGLProgram: Unsupported color space:", a), [n, "LinearTransferOETF"];
  }
}
function O0(a, e, t) {
  const n = a.getShaderParameter(e, a.COMPILE_STATUS), i = a.getShaderInfoLog(e).trim();
  if (n && i === "") return "";
  const o = /ERROR: 0:(\d+)/.exec(i);
  if (o) {
    const l = parseInt(o[1]);
    return t.toUpperCase() + `

` + i + `

` + Qw(a.getShaderSource(e), l);
  } else
    return i;
}
function eR(a, e) {
  const t = $w(e);
  return `vec4 ${a}( vec4 value ) { return ${t[0]}( ${t[1]}( value ) ); }`;
}
function tR(a, e) {
  let t;
  switch (e) {
    case Qp:
      t = "Linear";
      break;
    case Uy:
      t = "Reinhard";
      break;
    case Ny:
      t = "OptimizedCineon";
      break;
    case $p:
      t = "ACESFilmic";
      break;
    case Py:
      t = "AgX";
      break;
    case Dy:
      t = "Custom";
      break;
    default:
      console.warn("THREE.WebGLProgram: Unsupported toneMapping:", e), t = "Linear";
  }
  return "vec3 " + a + "( vec3 color ) { return " + t + "ToneMapping( color ); }";
}
function nR(a) {
  return [
    a.extensionDerivatives || a.envMapCubeUVHeight || a.bumpMap || a.normalMapTangentSpace || a.clearcoatNormalMap || a.flatShading || a.shaderID === "physical" ? "#extension GL_OES_standard_derivatives : enable" : "",
    (a.extensionFragDepth || a.logarithmicDepthBuffer) && a.rendererExtensionFragDepth ? "#extension GL_EXT_frag_depth : enable" : "",
    a.extensionDrawBuffers && a.rendererExtensionDrawBuffers ? "#extension GL_EXT_draw_buffers : require" : "",
    (a.extensionShaderTextureLOD || a.envMap || a.transmission) && a.rendererExtensionShaderTextureLod ? "#extension GL_EXT_shader_texture_lod : enable" : ""
  ].filter(ho).join(`
`);
}
function iR(a) {
  return [
    a.extensionClipCullDistance ? "#extension GL_ANGLE_clip_cull_distance : require" : ""
  ].filter(ho).join(`
`);
}
function sR(a) {
  const e = [];
  for (const t in a) {
    const n = a[t];
    n !== !1 && e.push("#define " + t + " " + n);
  }
  return e.join(`
`);
}
function aR(a, e) {
  const t = {}, n = a.getProgramParameter(e, a.ACTIVE_ATTRIBUTES);
  for (let i = 0; i < n; i++) {
    const o = a.getActiveAttrib(e, i), l = o.name;
    let c = 1;
    o.type === a.FLOAT_MAT2 && (c = 2), o.type === a.FLOAT_MAT3 && (c = 3), o.type === a.FLOAT_MAT4 && (c = 4), t[l] = {
      type: o.type,
      location: a.getAttribLocation(e, l),
      locationSize: c
    };
  }
  return t;
}
function ho(a) {
  return a !== "";
}
function I0(a, e) {
  const t = e.numSpotLightShadows + e.numSpotLightMaps - e.numSpotLightShadowsWithMaps;
  return a.replace(/NUM_DIR_LIGHTS/g, e.numDirLights).replace(/NUM_SPOT_LIGHTS/g, e.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g, e.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g, t).replace(/NUM_RECT_AREA_LIGHTS/g, e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, e.numPointLights).replace(/NUM_HEMI_LIGHTS/g, e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, e.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g, e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, e.numPointLightShadows);
}
function z0(a, e) {
  return a.replace(/NUM_CLIPPING_PLANES/g, e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, e.numClippingPlanes - e.numClipIntersection);
}
const rR = /^[ \t]*#include +<([\w\d./]+)>/gm;
function zp(a) {
  return a.replace(rR, lR);
}
const oR = /* @__PURE__ */ new Map([
  ["encodings_fragment", "colorspace_fragment"],
  // @deprecated, r154
  ["encodings_pars_fragment", "colorspace_pars_fragment"],
  // @deprecated, r154
  ["output_fragment", "opaque_fragment"]
  // @deprecated, r154
]);
function lR(a, e) {
  let t = vt[e];
  if (t === void 0) {
    const n = oR.get(e);
    if (n !== void 0)
      t = vt[n], console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.', e, n);
    else
      throw new Error("Can not resolve #include <" + e + ">");
  }
  return zp(t);
}
const cR = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
function B0(a) {
  return a.replace(cR, uR);
}
function uR(a, e, t, n) {
  let i = "";
  for (let o = parseInt(e); o < parseInt(t); o++)
    i += n.replace(/\[\s*i\s*\]/g, "[ " + o + " ]").replace(/UNROLLED_LOOP_INDEX/g, o);
  return i;
}
function H0(a) {
  let e = "precision " + a.precision + ` float;
precision ` + a.precision + " int;";
  return a.precision === "highp" ? e += `
#define HIGH_PRECISION` : a.precision === "mediump" ? e += `
#define MEDIUM_PRECISION` : a.precision === "lowp" && (e += `
#define LOW_PRECISION`), e;
}
function hR(a) {
  let e = "SHADOWMAP_TYPE_BASIC";
  return a.shadowMapType === th ? e = "SHADOWMAP_TYPE_PCF" : a.shadowMapType === ml ? e = "SHADOWMAP_TYPE_PCF_SOFT" : a.shadowMapType === zi && (e = "SHADOWMAP_TYPE_VSM"), e;
}
function fR(a) {
  let e = "ENVMAP_TYPE_CUBE";
  if (a.envMap)
    switch (a.envMapMode) {
      case ws:
      case ia:
        e = "ENVMAP_TYPE_CUBE";
        break;
      case Eo:
        e = "ENVMAP_TYPE_CUBE_UV";
        break;
    }
  return e;
}
function dR(a) {
  let e = "ENVMAP_MODE_REFLECTION";
  if (a.envMap)
    switch (a.envMapMode) {
      case ia:
        e = "ENVMAP_MODE_REFRACTION";
        break;
    }
  return e;
}
function pR(a) {
  let e = "ENVMAP_BLENDING_NONE";
  if (a.envMap)
    switch (a.combine) {
      case Xl:
        e = "ENVMAP_BLENDING_MULTIPLY";
        break;
      case Cy:
        e = "ENVMAP_BLENDING_MIX";
        break;
      case Ly:
        e = "ENVMAP_BLENDING_ADD";
        break;
    }
  return e;
}
function mR(a) {
  const e = a.envMapCubeUVHeight;
  if (e === null) return null;
  const t = Math.log2(e) - 2, n = 1 / e;
  return { texelWidth: 1 / (3 * Math.max(Math.pow(2, t), 112)), texelHeight: n, maxMip: t };
}
function gR(a, e, t, n) {
  const i = a.getContext(), o = t.defines;
  let l = t.vertexShader, c = t.fragmentShader;
  const h = hR(t), f = fR(t), p = dR(t), m = pR(t), g = mR(t), v = t.isWebGL2 ? "" : nR(t), x = iR(t), E = sR(o), S = i.createProgram();
  let y, T, b = t.glslVersion ? "#version " + t.glslVersion + `
` : "";
  t.isRawShaderMaterial ? (y = [
    "#define SHADER_TYPE " + t.shaderType,
    "#define SHADER_NAME " + t.shaderName,
    E
  ].filter(ho).join(`
`), y.length > 0 && (y += `
`), T = [
    v,
    "#define SHADER_TYPE " + t.shaderType,
    "#define SHADER_NAME " + t.shaderName,
    E
  ].filter(ho).join(`
`), T.length > 0 && (T += `
`)) : (y = [
    H0(t),
    "#define SHADER_TYPE " + t.shaderType,
    "#define SHADER_NAME " + t.shaderName,
    E,
    t.extensionClipCullDistance ? "#define USE_CLIP_DISTANCE" : "",
    t.batching ? "#define USE_BATCHING" : "",
    t.instancing ? "#define USE_INSTANCING" : "",
    t.instancingColor ? "#define USE_INSTANCING_COLOR" : "",
    t.useFog && t.fog ? "#define USE_FOG" : "",
    t.useFog && t.fogExp2 ? "#define FOG_EXP2" : "",
    t.map ? "#define USE_MAP" : "",
    t.envMap ? "#define USE_ENVMAP" : "",
    t.envMap ? "#define " + p : "",
    t.lightMap ? "#define USE_LIGHTMAP" : "",
    t.aoMap ? "#define USE_AOMAP" : "",
    t.bumpMap ? "#define USE_BUMPMAP" : "",
    t.normalMap ? "#define USE_NORMALMAP" : "",
    t.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
    t.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
    t.displacementMap ? "#define USE_DISPLACEMENTMAP" : "",
    t.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
    t.anisotropy ? "#define USE_ANISOTROPY" : "",
    t.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
    t.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
    t.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
    t.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
    t.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
    t.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
    t.specularMap ? "#define USE_SPECULARMAP" : "",
    t.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
    t.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
    t.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
    t.metalnessMap ? "#define USE_METALNESSMAP" : "",
    t.alphaMap ? "#define USE_ALPHAMAP" : "",
    t.alphaHash ? "#define USE_ALPHAHASH" : "",
    t.transmission ? "#define USE_TRANSMISSION" : "",
    t.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
    t.thicknessMap ? "#define USE_THICKNESSMAP" : "",
    t.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
    t.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
    //
    t.mapUv ? "#define MAP_UV " + t.mapUv : "",
    t.alphaMapUv ? "#define ALPHAMAP_UV " + t.alphaMapUv : "",
    t.lightMapUv ? "#define LIGHTMAP_UV " + t.lightMapUv : "",
    t.aoMapUv ? "#define AOMAP_UV " + t.aoMapUv : "",
    t.emissiveMapUv ? "#define EMISSIVEMAP_UV " + t.emissiveMapUv : "",
    t.bumpMapUv ? "#define BUMPMAP_UV " + t.bumpMapUv : "",
    t.normalMapUv ? "#define NORMALMAP_UV " + t.normalMapUv : "",
    t.displacementMapUv ? "#define DISPLACEMENTMAP_UV " + t.displacementMapUv : "",
    t.metalnessMapUv ? "#define METALNESSMAP_UV " + t.metalnessMapUv : "",
    t.roughnessMapUv ? "#define ROUGHNESSMAP_UV " + t.roughnessMapUv : "",
    t.anisotropyMapUv ? "#define ANISOTROPYMAP_UV " + t.anisotropyMapUv : "",
    t.clearcoatMapUv ? "#define CLEARCOATMAP_UV " + t.clearcoatMapUv : "",
    t.clearcoatNormalMapUv ? "#define CLEARCOAT_NORMALMAP_UV " + t.clearcoatNormalMapUv : "",
    t.clearcoatRoughnessMapUv ? "#define CLEARCOAT_ROUGHNESSMAP_UV " + t.clearcoatRoughnessMapUv : "",
    t.iridescenceMapUv ? "#define IRIDESCENCEMAP_UV " + t.iridescenceMapUv : "",
    t.iridescenceThicknessMapUv ? "#define IRIDESCENCE_THICKNESSMAP_UV " + t.iridescenceThicknessMapUv : "",
    t.sheenColorMapUv ? "#define SHEEN_COLORMAP_UV " + t.sheenColorMapUv : "",
    t.sheenRoughnessMapUv ? "#define SHEEN_ROUGHNESSMAP_UV " + t.sheenRoughnessMapUv : "",
    t.specularMapUv ? "#define SPECULARMAP_UV " + t.specularMapUv : "",
    t.specularColorMapUv ? "#define SPECULAR_COLORMAP_UV " + t.specularColorMapUv : "",
    t.specularIntensityMapUv ? "#define SPECULAR_INTENSITYMAP_UV " + t.specularIntensityMapUv : "",
    t.transmissionMapUv ? "#define TRANSMISSIONMAP_UV " + t.transmissionMapUv : "",
    t.thicknessMapUv ? "#define THICKNESSMAP_UV " + t.thicknessMapUv : "",
    //
    t.vertexTangents && t.flatShading === !1 ? "#define USE_TANGENT" : "",
    t.vertexColors ? "#define USE_COLOR" : "",
    t.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
    t.vertexUv1s ? "#define USE_UV1" : "",
    t.vertexUv2s ? "#define USE_UV2" : "",
    t.vertexUv3s ? "#define USE_UV3" : "",
    t.pointsUvs ? "#define USE_POINTS_UV" : "",
    t.flatShading ? "#define FLAT_SHADED" : "",
    t.skinning ? "#define USE_SKINNING" : "",
    t.morphTargets ? "#define USE_MORPHTARGETS" : "",
    t.morphNormals && t.flatShading === !1 ? "#define USE_MORPHNORMALS" : "",
    t.morphColors && t.isWebGL2 ? "#define USE_MORPHCOLORS" : "",
    t.morphTargetsCount > 0 && t.isWebGL2 ? "#define MORPHTARGETS_TEXTURE" : "",
    t.morphTargetsCount > 0 && t.isWebGL2 ? "#define MORPHTARGETS_TEXTURE_STRIDE " + t.morphTextureStride : "",
    t.morphTargetsCount > 0 && t.isWebGL2 ? "#define MORPHTARGETS_COUNT " + t.morphTargetsCount : "",
    t.doubleSided ? "#define DOUBLE_SIDED" : "",
    t.flipSided ? "#define FLIP_SIDED" : "",
    t.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
    t.shadowMapEnabled ? "#define " + h : "",
    t.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",
    t.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "",
    t.useLegacyLights ? "#define LEGACY_LIGHTS" : "",
    t.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
    t.logarithmicDepthBuffer && t.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
    "uniform mat4 modelMatrix;",
    "uniform mat4 modelViewMatrix;",
    "uniform mat4 projectionMatrix;",
    "uniform mat4 viewMatrix;",
    "uniform mat3 normalMatrix;",
    "uniform vec3 cameraPosition;",
    "uniform bool isOrthographic;",
    "#ifdef USE_INSTANCING",
    "	attribute mat4 instanceMatrix;",
    "#endif",
    "#ifdef USE_INSTANCING_COLOR",
    "	attribute vec3 instanceColor;",
    "#endif",
    "attribute vec3 position;",
    "attribute vec3 normal;",
    "attribute vec2 uv;",
    "#ifdef USE_UV1",
    "	attribute vec2 uv1;",
    "#endif",
    "#ifdef USE_UV2",
    "	attribute vec2 uv2;",
    "#endif",
    "#ifdef USE_UV3",
    "	attribute vec2 uv3;",
    "#endif",
    "#ifdef USE_TANGENT",
    "	attribute vec4 tangent;",
    "#endif",
    "#if defined( USE_COLOR_ALPHA )",
    "	attribute vec4 color;",
    "#elif defined( USE_COLOR )",
    "	attribute vec3 color;",
    "#endif",
    "#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )",
    "	attribute vec3 morphTarget0;",
    "	attribute vec3 morphTarget1;",
    "	attribute vec3 morphTarget2;",
    "	attribute vec3 morphTarget3;",
    "	#ifdef USE_MORPHNORMALS",
    "		attribute vec3 morphNormal0;",
    "		attribute vec3 morphNormal1;",
    "		attribute vec3 morphNormal2;",
    "		attribute vec3 morphNormal3;",
    "	#else",
    "		attribute vec3 morphTarget4;",
    "		attribute vec3 morphTarget5;",
    "		attribute vec3 morphTarget6;",
    "		attribute vec3 morphTarget7;",
    "	#endif",
    "#endif",
    "#ifdef USE_SKINNING",
    "	attribute vec4 skinIndex;",
    "	attribute vec4 skinWeight;",
    "#endif",
    `
`
  ].filter(ho).join(`
`), T = [
    v,
    H0(t),
    "#define SHADER_TYPE " + t.shaderType,
    "#define SHADER_NAME " + t.shaderName,
    E,
    t.useFog && t.fog ? "#define USE_FOG" : "",
    t.useFog && t.fogExp2 ? "#define FOG_EXP2" : "",
    t.map ? "#define USE_MAP" : "",
    t.matcap ? "#define USE_MATCAP" : "",
    t.envMap ? "#define USE_ENVMAP" : "",
    t.envMap ? "#define " + f : "",
    t.envMap ? "#define " + p : "",
    t.envMap ? "#define " + m : "",
    g ? "#define CUBEUV_TEXEL_WIDTH " + g.texelWidth : "",
    g ? "#define CUBEUV_TEXEL_HEIGHT " + g.texelHeight : "",
    g ? "#define CUBEUV_MAX_MIP " + g.maxMip + ".0" : "",
    t.lightMap ? "#define USE_LIGHTMAP" : "",
    t.aoMap ? "#define USE_AOMAP" : "",
    t.bumpMap ? "#define USE_BUMPMAP" : "",
    t.normalMap ? "#define USE_NORMALMAP" : "",
    t.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
    t.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
    t.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
    t.anisotropy ? "#define USE_ANISOTROPY" : "",
    t.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
    t.clearcoat ? "#define USE_CLEARCOAT" : "",
    t.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
    t.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
    t.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
    t.iridescence ? "#define USE_IRIDESCENCE" : "",
    t.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
    t.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
    t.specularMap ? "#define USE_SPECULARMAP" : "",
    t.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
    t.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
    t.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
    t.metalnessMap ? "#define USE_METALNESSMAP" : "",
    t.alphaMap ? "#define USE_ALPHAMAP" : "",
    t.alphaTest ? "#define USE_ALPHATEST" : "",
    t.alphaHash ? "#define USE_ALPHAHASH" : "",
    t.sheen ? "#define USE_SHEEN" : "",
    t.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
    t.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
    t.transmission ? "#define USE_TRANSMISSION" : "",
    t.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
    t.thicknessMap ? "#define USE_THICKNESSMAP" : "",
    t.vertexTangents && t.flatShading === !1 ? "#define USE_TANGENT" : "",
    t.vertexColors || t.instancingColor ? "#define USE_COLOR" : "",
    t.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
    t.vertexUv1s ? "#define USE_UV1" : "",
    t.vertexUv2s ? "#define USE_UV2" : "",
    t.vertexUv3s ? "#define USE_UV3" : "",
    t.pointsUvs ? "#define USE_POINTS_UV" : "",
    t.gradientMap ? "#define USE_GRADIENTMAP" : "",
    t.flatShading ? "#define FLAT_SHADED" : "",
    t.doubleSided ? "#define DOUBLE_SIDED" : "",
    t.flipSided ? "#define FLIP_SIDED" : "",
    t.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
    t.shadowMapEnabled ? "#define " + h : "",
    t.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "",
    t.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "",
    t.useLegacyLights ? "#define LEGACY_LIGHTS" : "",
    t.decodeVideoTexture ? "#define DECODE_VIDEO_TEXTURE" : "",
    t.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
    t.logarithmicDepthBuffer && t.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
    "uniform mat4 viewMatrix;",
    "uniform vec3 cameraPosition;",
    "uniform bool isOrthographic;",
    t.toneMapping !== Ji ? "#define TONE_MAPPING" : "",
    t.toneMapping !== Ji ? vt.tonemapping_pars_fragment : "",
    // this code is required here because it is used by the toneMapping() function defined below
    t.toneMapping !== Ji ? tR("toneMapping", t.toneMapping) : "",
    t.dithering ? "#define DITHERING" : "",
    t.opaque ? "#define OPAQUE" : "",
    vt.colorspace_pars_fragment,
    // this code is required here because it is used by the various encoding/decoding function defined below
    eR("linearToOutputTexel", t.outputColorSpace),
    t.useDepthPacking ? "#define DEPTH_PACKING " + t.depthPacking : "",
    `
`
  ].filter(ho).join(`
`)), l = zp(l), l = I0(l, t), l = z0(l, t), c = zp(c), c = I0(c, t), c = z0(c, t), l = B0(l), c = B0(c), t.isWebGL2 && t.isRawShaderMaterial !== !0 && (b = `#version 300 es
`, y = [
    x,
    "precision mediump sampler2DArray;",
    "#define attribute in",
    "#define varying out",
    "#define texture2D texture"
  ].join(`
`) + `
` + y, T = [
    "precision mediump sampler2DArray;",
    "#define varying in",
    t.glslVersion === Pp ? "" : "layout(location = 0) out highp vec4 pc_fragColor;",
    t.glslVersion === Pp ? "" : "#define gl_FragColor pc_fragColor",
    "#define gl_FragDepthEXT gl_FragDepth",
    "#define texture2D texture",
    "#define textureCube texture",
    "#define texture2DProj textureProj",
    "#define texture2DLodEXT textureLod",
    "#define texture2DProjLodEXT textureProjLod",
    "#define textureCubeLodEXT textureLod",
    "#define texture2DGradEXT textureGrad",
    "#define texture2DProjGradEXT textureProjGrad",
    "#define textureCubeGradEXT textureGrad"
  ].join(`
`) + `
` + T);
  const A = b + y + l, N = b + T + c, R = P0(i, i.VERTEX_SHADER, A), P = P0(i, i.FRAGMENT_SHADER, N);
  i.attachShader(S, R), i.attachShader(S, P), t.index0AttributeName !== void 0 ? i.bindAttribLocation(S, 0, t.index0AttributeName) : t.morphTargets === !0 && i.bindAttribLocation(S, 0, "position"), i.linkProgram(S);
  function H(ne) {
    if (a.debug.checkShaderErrors) {
      const ae = i.getProgramInfoLog(S).trim(), z = i.getShaderInfoLog(R).trim(), q = i.getShaderInfoLog(P).trim();
      let W = !0, Q = !0;
      if (i.getProgramParameter(S, i.LINK_STATUS) === !1)
        if (W = !1, typeof a.debug.onShaderError == "function")
          a.debug.onShaderError(i, S, R, P);
        else {
          const Z = O0(i, R, "vertex"), K = O0(i, P, "fragment");
          console.error(
            "THREE.WebGLProgram: Shader Error " + i.getError() + " - VALIDATE_STATUS " + i.getProgramParameter(S, i.VALIDATE_STATUS) + `

Program Info Log: ` + ae + `
` + Z + `
` + K
          );
        }
      else ae !== "" ? console.warn("THREE.WebGLProgram: Program Info Log:", ae) : (z === "" || q === "") && (Q = !1);
      Q && (ne.diagnostics = {
        runnable: W,
        programLog: ae,
        vertexShader: {
          log: z,
          prefix: y
        },
        fragmentShader: {
          log: q,
          prefix: T
        }
      });
    }
    i.deleteShader(R), i.deleteShader(P), w = new Fu(i, S), C = aR(i, S);
  }
  let w;
  this.getUniforms = function() {
    return w === void 0 && H(this), w;
  };
  let C;
  this.getAttributes = function() {
    return C === void 0 && H(this), C;
  };
  let X = t.rendererExtensionParallelShaderCompile === !1;
  return this.isReady = function() {
    return X === !1 && (X = i.getProgramParameter(S, Kw)), X;
  }, this.destroy = function() {
    n.releaseStatesOfProgram(this), i.deleteProgram(S), this.program = void 0;
  }, this.type = t.shaderType, this.name = t.shaderName, this.id = Jw++, this.cacheKey = e, this.usedTimes = 1, this.program = S, this.vertexShader = R, this.fragmentShader = P, this;
}
let vR = 0;
class _R {
  constructor() {
    this.shaderCache = /* @__PURE__ */ new Map(), this.materialCache = /* @__PURE__ */ new Map();
  }
  update(e) {
    const t = e.vertexShader, n = e.fragmentShader, i = this._getShaderStage(t), o = this._getShaderStage(n), l = this._getShaderCacheForMaterial(e);
    return l.has(i) === !1 && (l.add(i), i.usedTimes++), l.has(o) === !1 && (l.add(o), o.usedTimes++), this;
  }
  remove(e) {
    const t = this.materialCache.get(e);
    for (const n of t)
      n.usedTimes--, n.usedTimes === 0 && this.shaderCache.delete(n.code);
    return this.materialCache.delete(e), this;
  }
  getVertexShaderID(e) {
    return this._getShaderStage(e.vertexShader).id;
  }
  getFragmentShaderID(e) {
    return this._getShaderStage(e.fragmentShader).id;
  }
  dispose() {
    this.shaderCache.clear(), this.materialCache.clear();
  }
  _getShaderCacheForMaterial(e) {
    const t = this.materialCache;
    let n = t.get(e);
    return n === void 0 && (n = /* @__PURE__ */ new Set(), t.set(e, n)), n;
  }
  _getShaderStage(e) {
    const t = this.shaderCache;
    let n = t.get(e);
    return n === void 0 && (n = new yR(e), t.set(e, n)), n;
  }
}
class yR {
  constructor(e) {
    this.id = vR++, this.code = e, this.usedTimes = 0;
  }
}
function xR(a, e, t, n, i, o, l) {
  const c = new yo(), h = new _R(), f = [], p = i.isWebGL2, m = i.logarithmicDepthBuffer, g = i.vertexTextures;
  let v = i.precision;
  const x = {
    MeshDepthMaterial: "depth",
    MeshDistanceMaterial: "distanceRGBA",
    MeshNormalMaterial: "normal",
    MeshBasicMaterial: "basic",
    MeshLambertMaterial: "lambert",
    MeshPhongMaterial: "phong",
    MeshToonMaterial: "toon",
    MeshStandardMaterial: "physical",
    MeshPhysicalMaterial: "physical",
    MeshMatcapMaterial: "matcap",
    LineBasicMaterial: "basic",
    LineDashedMaterial: "dashed",
    PointsMaterial: "points",
    ShadowMaterial: "shadow",
    SpriteMaterial: "sprite"
  };
  function E(w) {
    return w === 0 ? "uv" : `uv${w}`;
  }
  function S(w, C, X, ne, ae) {
    const z = ne.fog, q = ae.geometry, W = w.isMeshStandardMaterial ? ne.environment : null, Q = (w.isMeshStandardMaterial ? t : e).get(w.envMap || W), Z = Q && Q.mapping === Eo ? Q.image.height : null, K = x[w.type];
    w.precision !== null && (v = i.getMaxPrecision(w.precision), v !== w.precision && console.warn("THREE.WebGLProgram.getParameters:", w.precision, "not supported, using", v, "instead."));
    const le = q.morphAttributes.position || q.morphAttributes.normal || q.morphAttributes.color, oe = le !== void 0 ? le.length : 0;
    let ge = 0;
    q.morphAttributes.position !== void 0 && (ge = 1), q.morphAttributes.normal !== void 0 && (ge = 2), q.morphAttributes.color !== void 0 && (ge = 3);
    let ee, ce, be, Ve;
    if (K) {
      const Yt = Bi[K];
      ee = Yt.vertexShader, ce = Yt.fragmentShader;
    } else
      ee = w.vertexShader, ce = w.fragmentShader, h.update(w), be = h.getVertexShaderID(w), Ve = h.getFragmentShaderID(w);
    const Ie = a.getRenderTarget(), je = ae.isInstancedMesh === !0, st = ae.isBatchedMesh === !0, qe = !!w.map, nt = !!w.matcap, F = !!Q, Ee = !!w.aoMap, ue = !!w.lightMap, Se = !!w.bumpMap, he = !!w.normalMap, Ge = !!w.displacementMap, Ne = !!w.emissiveMap, D = !!w.metalnessMap, L = !!w.roughnessMap, j = w.anisotropy > 0, _e = w.clearcoat > 0, ve = w.iridescence > 0, me = w.sheen > 0, We = w.transmission > 0, Le = j && !!w.anisotropyMap, ze = _e && !!w.clearcoatMap, Ze = _e && !!w.clearcoatNormalMap, ot = _e && !!w.clearcoatRoughnessMap, ye = ve && !!w.iridescenceMap, Mt = ve && !!w.iridescenceThicknessMap, ht = me && !!w.sheenColorMap, Je = me && !!w.sheenRoughnessMap, Xe = !!w.specularMap, Be = !!w.specularColorMap, V = !!w.specularIntensityMap, pe = We && !!w.transmissionMap, De = We && !!w.thicknessMap, Pe = !!w.gradientMap, xe = !!w.alphaMap, G = w.alphaTest > 0, Ae = !!w.alphaHash, Ce = !!w.extensions, $e = !!q.attributes.uv1, ke = !!q.attributes.uv2, mt = !!q.attributes.uv3;
    let Et = Ji;
    return w.toneMapped && (Ie === null || Ie.isXRRenderTarget === !0) && (Et = a.toneMapping), {
      isWebGL2: p,
      shaderID: K,
      shaderType: w.type,
      shaderName: w.name,
      vertexShader: ee,
      fragmentShader: ce,
      defines: w.defines,
      customVertexShaderID: be,
      customFragmentShaderID: Ve,
      isRawShaderMaterial: w.isRawShaderMaterial === !0,
      glslVersion: w.glslVersion,
      precision: v,
      batching: st,
      instancing: je,
      instancingColor: je && ae.instanceColor !== null,
      supportsVertexTextures: g,
      outputColorSpace: Ie === null ? a.outputColorSpace : Ie.isXRRenderTarget === !0 ? Ie.texture.colorSpace : Vi,
      map: qe,
      matcap: nt,
      envMap: F,
      envMapMode: F && Q.mapping,
      envMapCubeUVHeight: Z,
      aoMap: Ee,
      lightMap: ue,
      bumpMap: Se,
      normalMap: he,
      displacementMap: g && Ge,
      emissiveMap: Ne,
      normalMapObjectSpace: he && w.normalMapType === Zy,
      normalMapTangentSpace: he && w.normalMapType === ra,
      metalnessMap: D,
      roughnessMap: L,
      anisotropy: j,
      anisotropyMap: Le,
      clearcoat: _e,
      clearcoatMap: ze,
      clearcoatNormalMap: Ze,
      clearcoatRoughnessMap: ot,
      iridescence: ve,
      iridescenceMap: ye,
      iridescenceThicknessMap: Mt,
      sheen: me,
      sheenColorMap: ht,
      sheenRoughnessMap: Je,
      specularMap: Xe,
      specularColorMap: Be,
      specularIntensityMap: V,
      transmission: We,
      transmissionMap: pe,
      thicknessMap: De,
      gradientMap: Pe,
      opaque: w.transparent === !1 && w.blending === Qa,
      alphaMap: xe,
      alphaTest: G,
      alphaHash: Ae,
      combine: w.combine,
      //
      mapUv: qe && E(w.map.channel),
      aoMapUv: Ee && E(w.aoMap.channel),
      lightMapUv: ue && E(w.lightMap.channel),
      bumpMapUv: Se && E(w.bumpMap.channel),
      normalMapUv: he && E(w.normalMap.channel),
      displacementMapUv: Ge && E(w.displacementMap.channel),
      emissiveMapUv: Ne && E(w.emissiveMap.channel),
      metalnessMapUv: D && E(w.metalnessMap.channel),
      roughnessMapUv: L && E(w.roughnessMap.channel),
      anisotropyMapUv: Le && E(w.anisotropyMap.channel),
      clearcoatMapUv: ze && E(w.clearcoatMap.channel),
      clearcoatNormalMapUv: Ze && E(w.clearcoatNormalMap.channel),
      clearcoatRoughnessMapUv: ot && E(w.clearcoatRoughnessMap.channel),
      iridescenceMapUv: ye && E(w.iridescenceMap.channel),
      iridescenceThicknessMapUv: Mt && E(w.iridescenceThicknessMap.channel),
      sheenColorMapUv: ht && E(w.sheenColorMap.channel),
      sheenRoughnessMapUv: Je && E(w.sheenRoughnessMap.channel),
      specularMapUv: Xe && E(w.specularMap.channel),
      specularColorMapUv: Be && E(w.specularColorMap.channel),
      specularIntensityMapUv: V && E(w.specularIntensityMap.channel),
      transmissionMapUv: pe && E(w.transmissionMap.channel),
      thicknessMapUv: De && E(w.thicknessMap.channel),
      alphaMapUv: xe && E(w.alphaMap.channel),
      //
      vertexTangents: !!q.attributes.tangent && (he || j),
      vertexColors: w.vertexColors,
      vertexAlphas: w.vertexColors === !0 && !!q.attributes.color && q.attributes.color.itemSize === 4,
      vertexUv1s: $e,
      vertexUv2s: ke,
      vertexUv3s: mt,
      pointsUvs: ae.isPoints === !0 && !!q.attributes.uv && (qe || xe),
      fog: !!z,
      useFog: w.fog === !0,
      fogExp2: z && z.isFogExp2,
      flatShading: w.flatShading === !0,
      sizeAttenuation: w.sizeAttenuation === !0,
      logarithmicDepthBuffer: m,
      skinning: ae.isSkinnedMesh === !0,
      morphTargets: q.morphAttributes.position !== void 0,
      morphNormals: q.morphAttributes.normal !== void 0,
      morphColors: q.morphAttributes.color !== void 0,
      morphTargetsCount: oe,
      morphTextureStride: ge,
      numDirLights: C.directional.length,
      numPointLights: C.point.length,
      numSpotLights: C.spot.length,
      numSpotLightMaps: C.spotLightMap.length,
      numRectAreaLights: C.rectArea.length,
      numHemiLights: C.hemi.length,
      numDirLightShadows: C.directionalShadowMap.length,
      numPointLightShadows: C.pointShadowMap.length,
      numSpotLightShadows: C.spotShadowMap.length,
      numSpotLightShadowsWithMaps: C.numSpotLightShadowsWithMaps,
      numLightProbes: C.numLightProbes,
      numClippingPlanes: l.numPlanes,
      numClipIntersection: l.numIntersection,
      dithering: w.dithering,
      shadowMapEnabled: a.shadowMap.enabled && X.length > 0,
      shadowMapType: a.shadowMap.type,
      toneMapping: Et,
      useLegacyLights: a._useLegacyLights,
      decodeVideoTexture: qe && w.map.isVideoTexture === !0 && Dt.getTransfer(w.map.colorSpace) === Wt,
      premultipliedAlpha: w.premultipliedAlpha,
      doubleSided: w.side === Ai,
      flipSided: w.side === Xn,
      useDepthPacking: w.depthPacking >= 0,
      depthPacking: w.depthPacking || 0,
      index0AttributeName: w.index0AttributeName,
      extensionDerivatives: Ce && w.extensions.derivatives === !0,
      extensionFragDepth: Ce && w.extensions.fragDepth === !0,
      extensionDrawBuffers: Ce && w.extensions.drawBuffers === !0,
      extensionShaderTextureLOD: Ce && w.extensions.shaderTextureLOD === !0,
      extensionClipCullDistance: Ce && w.extensions.clipCullDistance && n.has("WEBGL_clip_cull_distance"),
      rendererExtensionFragDepth: p || n.has("EXT_frag_depth"),
      rendererExtensionDrawBuffers: p || n.has("WEBGL_draw_buffers"),
      rendererExtensionShaderTextureLod: p || n.has("EXT_shader_texture_lod"),
      rendererExtensionParallelShaderCompile: n.has("KHR_parallel_shader_compile"),
      customProgramCacheKey: w.customProgramCacheKey()
    };
  }
  function y(w) {
    const C = [];
    if (w.shaderID ? C.push(w.shaderID) : (C.push(w.customVertexShaderID), C.push(w.customFragmentShaderID)), w.defines !== void 0)
      for (const X in w.defines)
        C.push(X), C.push(w.defines[X]);
    return w.isRawShaderMaterial === !1 && (T(C, w), b(C, w), C.push(a.outputColorSpace)), C.push(w.customProgramCacheKey), C.join();
  }
  function T(w, C) {
    w.push(C.precision), w.push(C.outputColorSpace), w.push(C.envMapMode), w.push(C.envMapCubeUVHeight), w.push(C.mapUv), w.push(C.alphaMapUv), w.push(C.lightMapUv), w.push(C.aoMapUv), w.push(C.bumpMapUv), w.push(C.normalMapUv), w.push(C.displacementMapUv), w.push(C.emissiveMapUv), w.push(C.metalnessMapUv), w.push(C.roughnessMapUv), w.push(C.anisotropyMapUv), w.push(C.clearcoatMapUv), w.push(C.clearcoatNormalMapUv), w.push(C.clearcoatRoughnessMapUv), w.push(C.iridescenceMapUv), w.push(C.iridescenceThicknessMapUv), w.push(C.sheenColorMapUv), w.push(C.sheenRoughnessMapUv), w.push(C.specularMapUv), w.push(C.specularColorMapUv), w.push(C.specularIntensityMapUv), w.push(C.transmissionMapUv), w.push(C.thicknessMapUv), w.push(C.combine), w.push(C.fogExp2), w.push(C.sizeAttenuation), w.push(C.morphTargetsCount), w.push(C.morphAttributeCount), w.push(C.numDirLights), w.push(C.numPointLights), w.push(C.numSpotLights), w.push(C.numSpotLightMaps), w.push(C.numHemiLights), w.push(C.numRectAreaLights), w.push(C.numDirLightShadows), w.push(C.numPointLightShadows), w.push(C.numSpotLightShadows), w.push(C.numSpotLightShadowsWithMaps), w.push(C.numLightProbes), w.push(C.shadowMapType), w.push(C.toneMapping), w.push(C.numClippingPlanes), w.push(C.numClipIntersection), w.push(C.depthPacking);
  }
  function b(w, C) {
    c.disableAll(), C.isWebGL2 && c.enable(0), C.supportsVertexTextures && c.enable(1), C.instancing && c.enable(2), C.instancingColor && c.enable(3), C.matcap && c.enable(4), C.envMap && c.enable(5), C.normalMapObjectSpace && c.enable(6), C.normalMapTangentSpace && c.enable(7), C.clearcoat && c.enable(8), C.iridescence && c.enable(9), C.alphaTest && c.enable(10), C.vertexColors && c.enable(11), C.vertexAlphas && c.enable(12), C.vertexUv1s && c.enable(13), C.vertexUv2s && c.enable(14), C.vertexUv3s && c.enable(15), C.vertexTangents && c.enable(16), C.anisotropy && c.enable(17), C.alphaHash && c.enable(18), C.batching && c.enable(19), w.push(c.mask), c.disableAll(), C.fog && c.enable(0), C.useFog && c.enable(1), C.flatShading && c.enable(2), C.logarithmicDepthBuffer && c.enable(3), C.skinning && c.enable(4), C.morphTargets && c.enable(5), C.morphNormals && c.enable(6), C.morphColors && c.enable(7), C.premultipliedAlpha && c.enable(8), C.shadowMapEnabled && c.enable(9), C.useLegacyLights && c.enable(10), C.doubleSided && c.enable(11), C.flipSided && c.enable(12), C.useDepthPacking && c.enable(13), C.dithering && c.enable(14), C.transmission && c.enable(15), C.sheen && c.enable(16), C.opaque && c.enable(17), C.pointsUvs && c.enable(18), C.decodeVideoTexture && c.enable(19), w.push(c.mask);
  }
  function A(w) {
    const C = x[w.type];
    let X;
    if (C) {
      const ne = Bi[C];
      X = lx.clone(ne.uniforms);
    } else
      X = w.uniforms;
    return X;
  }
  function N(w, C) {
    let X;
    for (let ne = 0, ae = f.length; ne < ae; ne++) {
      const z = f[ne];
      if (z.cacheKey === C) {
        X = z, ++X.usedTimes;
        break;
      }
    }
    return X === void 0 && (X = new gR(a, C, w, o), f.push(X)), X;
  }
  function R(w) {
    if (--w.usedTimes === 0) {
      const C = f.indexOf(w);
      f[C] = f[f.length - 1], f.pop(), w.destroy();
    }
  }
  function P(w) {
    h.remove(w);
  }
  function H() {
    h.dispose();
  }
  return {
    getParameters: S,
    getProgramCacheKey: y,
    getUniforms: A,
    acquireProgram: N,
    releaseProgram: R,
    releaseShaderCache: P,
    // Exposed for resource monitoring & error feedback via renderer.info:
    programs: f,
    dispose: H
  };
}
function SR() {
  let a = /* @__PURE__ */ new WeakMap();
  function e(o) {
    let l = a.get(o);
    return l === void 0 && (l = {}, a.set(o, l)), l;
  }
  function t(o) {
    a.delete(o);
  }
  function n(o, l, c) {
    a.get(o)[l] = c;
  }
  function i() {
    a = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: e,
    remove: t,
    update: n,
    dispose: i
  };
}
function MR(a, e) {
  return a.groupOrder !== e.groupOrder ? a.groupOrder - e.groupOrder : a.renderOrder !== e.renderOrder ? a.renderOrder - e.renderOrder : a.material.id !== e.material.id ? a.material.id - e.material.id : a.z !== e.z ? a.z - e.z : a.id - e.id;
}
function F0(a, e) {
  return a.groupOrder !== e.groupOrder ? a.groupOrder - e.groupOrder : a.renderOrder !== e.renderOrder ? a.renderOrder - e.renderOrder : a.z !== e.z ? e.z - a.z : a.id - e.id;
}
function V0() {
  const a = [];
  let e = 0;
  const t = [], n = [], i = [];
  function o() {
    e = 0, t.length = 0, n.length = 0, i.length = 0;
  }
  function l(m, g, v, x, E, S) {
    let y = a[e];
    return y === void 0 ? (y = {
      id: m.id,
      object: m,
      geometry: g,
      material: v,
      groupOrder: x,
      renderOrder: m.renderOrder,
      z: E,
      group: S
    }, a[e] = y) : (y.id = m.id, y.object = m, y.geometry = g, y.material = v, y.groupOrder = x, y.renderOrder = m.renderOrder, y.z = E, y.group = S), e++, y;
  }
  function c(m, g, v, x, E, S) {
    const y = l(m, g, v, x, E, S);
    v.transmission > 0 ? n.push(y) : v.transparent === !0 ? i.push(y) : t.push(y);
  }
  function h(m, g, v, x, E, S) {
    const y = l(m, g, v, x, E, S);
    v.transmission > 0 ? n.unshift(y) : v.transparent === !0 ? i.unshift(y) : t.unshift(y);
  }
  function f(m, g) {
    t.length > 1 && t.sort(m || MR), n.length > 1 && n.sort(g || F0), i.length > 1 && i.sort(g || F0);
  }
  function p() {
    for (let m = e, g = a.length; m < g; m++) {
      const v = a[m];
      if (v.id === null) break;
      v.id = null, v.object = null, v.geometry = null, v.material = null, v.group = null;
    }
  }
  return {
    opaque: t,
    transmissive: n,
    transparent: i,
    init: o,
    push: c,
    unshift: h,
    finish: p,
    sort: f
  };
}
function ER() {
  let a = /* @__PURE__ */ new WeakMap();
  function e(n, i) {
    const o = a.get(n);
    let l;
    return o === void 0 ? (l = new V0(), a.set(n, [l])) : i >= o.length ? (l = new V0(), o.push(l)) : l = o[i], l;
  }
  function t() {
    a = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: e,
    dispose: t
  };
}
function bR() {
  const a = {};
  return {
    get: function(e) {
      if (a[e.id] !== void 0)
        return a[e.id];
      let t;
      switch (e.type) {
        case "DirectionalLight":
          t = {
            direction: new I(),
            color: new Fe()
          };
          break;
        case "SpotLight":
          t = {
            position: new I(),
            direction: new I(),
            color: new Fe(),
            distance: 0,
            coneCos: 0,
            penumbraCos: 0,
            decay: 0
          };
          break;
        case "PointLight":
          t = {
            position: new I(),
            color: new Fe(),
            distance: 0,
            decay: 0
          };
          break;
        case "HemisphereLight":
          t = {
            direction: new I(),
            skyColor: new Fe(),
            groundColor: new Fe()
          };
          break;
        case "RectAreaLight":
          t = {
            color: new Fe(),
            position: new I(),
            halfWidth: new I(),
            halfHeight: new I()
          };
          break;
      }
      return a[e.id] = t, t;
    }
  };
}
function TR() {
  const a = {};
  return {
    get: function(e) {
      if (a[e.id] !== void 0)
        return a[e.id];
      let t;
      switch (e.type) {
        case "DirectionalLight":
          t = {
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new de()
          };
          break;
        case "SpotLight":
          t = {
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new de()
          };
          break;
        case "PointLight":
          t = {
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new de(),
            shadowCameraNear: 1,
            shadowCameraFar: 1e3
          };
          break;
      }
      return a[e.id] = t, t;
    }
  };
}
let AR = 0;
function wR(a, e) {
  return (e.castShadow ? 2 : 0) - (a.castShadow ? 2 : 0) + (e.map ? 1 : 0) - (a.map ? 1 : 0);
}
function RR(a, e) {
  const t = new bR(), n = TR(), i = {
    version: 0,
    hash: {
      directionalLength: -1,
      pointLength: -1,
      spotLength: -1,
      rectAreaLength: -1,
      hemiLength: -1,
      numDirectionalShadows: -1,
      numPointShadows: -1,
      numSpotShadows: -1,
      numSpotMaps: -1,
      numLightProbes: -1
    },
    ambient: [0, 0, 0],
    probe: [],
    directional: [],
    directionalShadow: [],
    directionalShadowMap: [],
    directionalShadowMatrix: [],
    spot: [],
    spotLightMap: [],
    spotShadow: [],
    spotShadowMap: [],
    spotLightMatrix: [],
    rectArea: [],
    rectAreaLTC1: null,
    rectAreaLTC2: null,
    point: [],
    pointShadow: [],
    pointShadowMap: [],
    pointShadowMatrix: [],
    hemi: [],
    numSpotLightShadowsWithMaps: 0,
    numLightProbes: 0
  };
  for (let p = 0; p < 9; p++) i.probe.push(new I());
  const o = new I(), l = new rt(), c = new rt();
  function h(p, m) {
    let g = 0, v = 0, x = 0;
    for (let ne = 0; ne < 9; ne++) i.probe[ne].set(0, 0, 0);
    let E = 0, S = 0, y = 0, T = 0, b = 0, A = 0, N = 0, R = 0, P = 0, H = 0, w = 0;
    p.sort(wR);
    const C = m === !0 ? Math.PI : 1;
    for (let ne = 0, ae = p.length; ne < ae; ne++) {
      const z = p[ne], q = z.color, W = z.intensity, Q = z.distance, Z = z.shadow && z.shadow.map ? z.shadow.map.texture : null;
      if (z.isAmbientLight)
        g += q.r * W * C, v += q.g * W * C, x += q.b * W * C;
      else if (z.isLightProbe) {
        for (let K = 0; K < 9; K++)
          i.probe[K].addScaledVector(z.sh.coefficients[K], W);
        w++;
      } else if (z.isDirectionalLight) {
        const K = t.get(z);
        if (K.color.copy(z.color).multiplyScalar(z.intensity * C), z.castShadow) {
          const le = z.shadow, oe = n.get(z);
          oe.shadowBias = le.bias, oe.shadowNormalBias = le.normalBias, oe.shadowRadius = le.radius, oe.shadowMapSize = le.mapSize, i.directionalShadow[E] = oe, i.directionalShadowMap[E] = Z, i.directionalShadowMatrix[E] = z.shadow.matrix, A++;
        }
        i.directional[E] = K, E++;
      } else if (z.isSpotLight) {
        const K = t.get(z);
        K.position.setFromMatrixPosition(z.matrixWorld), K.color.copy(q).multiplyScalar(W * C), K.distance = Q, K.coneCos = Math.cos(z.angle), K.penumbraCos = Math.cos(z.angle * (1 - z.penumbra)), K.decay = z.decay, i.spot[y] = K;
        const le = z.shadow;
        if (z.map && (i.spotLightMap[P] = z.map, P++, le.updateMatrices(z), z.castShadow && H++), i.spotLightMatrix[y] = le.matrix, z.castShadow) {
          const oe = n.get(z);
          oe.shadowBias = le.bias, oe.shadowNormalBias = le.normalBias, oe.shadowRadius = le.radius, oe.shadowMapSize = le.mapSize, i.spotShadow[y] = oe, i.spotShadowMap[y] = Z, R++;
        }
        y++;
      } else if (z.isRectAreaLight) {
        const K = t.get(z);
        K.color.copy(q).multiplyScalar(W), K.halfWidth.set(z.width * 0.5, 0, 0), K.halfHeight.set(0, z.height * 0.5, 0), i.rectArea[T] = K, T++;
      } else if (z.isPointLight) {
        const K = t.get(z);
        if (K.color.copy(z.color).multiplyScalar(z.intensity * C), K.distance = z.distance, K.decay = z.decay, z.castShadow) {
          const le = z.shadow, oe = n.get(z);
          oe.shadowBias = le.bias, oe.shadowNormalBias = le.normalBias, oe.shadowRadius = le.radius, oe.shadowMapSize = le.mapSize, oe.shadowCameraNear = le.camera.near, oe.shadowCameraFar = le.camera.far, i.pointShadow[S] = oe, i.pointShadowMap[S] = Z, i.pointShadowMatrix[S] = z.shadow.matrix, N++;
        }
        i.point[S] = K, S++;
      } else if (z.isHemisphereLight) {
        const K = t.get(z);
        K.skyColor.copy(z.color).multiplyScalar(W * C), K.groundColor.copy(z.groundColor).multiplyScalar(W * C), i.hemi[b] = K, b++;
      }
    }
    T > 0 && (e.isWebGL2 ? a.has("OES_texture_float_linear") === !0 ? (i.rectAreaLTC1 = Re.LTC_FLOAT_1, i.rectAreaLTC2 = Re.LTC_FLOAT_2) : (i.rectAreaLTC1 = Re.LTC_HALF_1, i.rectAreaLTC2 = Re.LTC_HALF_2) : a.has("OES_texture_float_linear") === !0 ? (i.rectAreaLTC1 = Re.LTC_FLOAT_1, i.rectAreaLTC2 = Re.LTC_FLOAT_2) : a.has("OES_texture_half_float_linear") === !0 ? (i.rectAreaLTC1 = Re.LTC_HALF_1, i.rectAreaLTC2 = Re.LTC_HALF_2) : console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")), i.ambient[0] = g, i.ambient[1] = v, i.ambient[2] = x;
    const X = i.hash;
    (X.directionalLength !== E || X.pointLength !== S || X.spotLength !== y || X.rectAreaLength !== T || X.hemiLength !== b || X.numDirectionalShadows !== A || X.numPointShadows !== N || X.numSpotShadows !== R || X.numSpotMaps !== P || X.numLightProbes !== w) && (i.directional.length = E, i.spot.length = y, i.rectArea.length = T, i.point.length = S, i.hemi.length = b, i.directionalShadow.length = A, i.directionalShadowMap.length = A, i.pointShadow.length = N, i.pointShadowMap.length = N, i.spotShadow.length = R, i.spotShadowMap.length = R, i.directionalShadowMatrix.length = A, i.pointShadowMatrix.length = N, i.spotLightMatrix.length = R + P - H, i.spotLightMap.length = P, i.numSpotLightShadowsWithMaps = H, i.numLightProbes = w, X.directionalLength = E, X.pointLength = S, X.spotLength = y, X.rectAreaLength = T, X.hemiLength = b, X.numDirectionalShadows = A, X.numPointShadows = N, X.numSpotShadows = R, X.numSpotMaps = P, X.numLightProbes = w, i.version = AR++);
  }
  function f(p, m) {
    let g = 0, v = 0, x = 0, E = 0, S = 0;
    const y = m.matrixWorldInverse;
    for (let T = 0, b = p.length; T < b; T++) {
      const A = p[T];
      if (A.isDirectionalLight) {
        const N = i.directional[g];
        N.direction.setFromMatrixPosition(A.matrixWorld), o.setFromMatrixPosition(A.target.matrixWorld), N.direction.sub(o), N.direction.transformDirection(y), g++;
      } else if (A.isSpotLight) {
        const N = i.spot[x];
        N.position.setFromMatrixPosition(A.matrixWorld), N.position.applyMatrix4(y), N.direction.setFromMatrixPosition(A.matrixWorld), o.setFromMatrixPosition(A.target.matrixWorld), N.direction.sub(o), N.direction.transformDirection(y), x++;
      } else if (A.isRectAreaLight) {
        const N = i.rectArea[E];
        N.position.setFromMatrixPosition(A.matrixWorld), N.position.applyMatrix4(y), c.identity(), l.copy(A.matrixWorld), l.premultiply(y), c.extractRotation(l), N.halfWidth.set(A.width * 0.5, 0, 0), N.halfHeight.set(0, A.height * 0.5, 0), N.halfWidth.applyMatrix4(c), N.halfHeight.applyMatrix4(c), E++;
      } else if (A.isPointLight) {
        const N = i.point[v];
        N.position.setFromMatrixPosition(A.matrixWorld), N.position.applyMatrix4(y), v++;
      } else if (A.isHemisphereLight) {
        const N = i.hemi[S];
        N.direction.setFromMatrixPosition(A.matrixWorld), N.direction.transformDirection(y), S++;
      }
    }
  }
  return {
    setup: h,
    setupView: f,
    state: i
  };
}
function G0(a, e) {
  const t = new RR(a, e), n = [], i = [];
  function o() {
    n.length = 0, i.length = 0;
  }
  function l(m) {
    n.push(m);
  }
  function c(m) {
    i.push(m);
  }
  function h(m) {
    t.setup(n, m);
  }
  function f(m) {
    t.setupView(n, m);
  }
  return {
    init: o,
    state: {
      lightsArray: n,
      shadowsArray: i,
      lights: t
    },
    setupLights: h,
    setupLightsView: f,
    pushLight: l,
    pushShadow: c
  };
}
function CR(a, e) {
  let t = /* @__PURE__ */ new WeakMap();
  function n(o, l = 0) {
    const c = t.get(o);
    let h;
    return c === void 0 ? (h = new G0(a, e), t.set(o, [h])) : l >= c.length ? (h = new G0(a, e), c.push(h)) : h = c[l], h;
  }
  function i() {
    t = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: n,
    dispose: i
  };
}
class _m extends zn {
  constructor(e) {
    super(), this.isMeshDepthMaterial = !0, this.type = "MeshDepthMaterial", this.depthPacking = Yy, this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = !1, this.wireframeLinewidth = 1, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.depthPacking = e.depthPacking, this.map = e.map, this.alphaMap = e.alphaMap, this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this;
  }
}
class ym extends zn {
  constructor(e) {
    super(), this.isMeshDistanceMaterial = !0, this.type = "MeshDistanceMaterial", this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.map = e.map, this.alphaMap = e.alphaMap, this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this;
  }
}
const LR = `void main() {
	gl_Position = vec4( position, 1.0 );
}`, UR = `uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;
function NR(a, e, t) {
  let n = new jl();
  const i = new de(), o = new de(), l = new It(), c = new _m({ depthPacking: jy }), h = new ym(), f = {}, p = t.maxTextureSize, m = { [As]: Xn, [Xn]: As, [Ai]: Ai }, g = new Gi({
    defines: {
      VSM_SAMPLES: 8
    },
    uniforms: {
      shadow_pass: { value: null },
      resolution: { value: new de() },
      radius: { value: 4 }
    },
    vertexShader: LR,
    fragmentShader: UR
  }), v = g.clone();
  v.defines.HORIZONTAL_PASS = 1;
  const x = new xt();
  x.setAttribute(
    "position",
    new zt(
      new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]),
      3
    )
  );
  const E = new pn(x, g), S = this;
  this.enabled = !1, this.autoUpdate = !0, this.needsUpdate = !1, this.type = th;
  let y = this.type;
  this.render = function(R, P, H) {
    if (S.enabled === !1 || S.autoUpdate === !1 && S.needsUpdate === !1 || R.length === 0) return;
    const w = a.getRenderTarget(), C = a.getActiveCubeFace(), X = a.getActiveMipmapLevel(), ne = a.state;
    ne.setBlending(bs), ne.buffers.color.setClear(1, 1, 1, 1), ne.buffers.depth.setTest(!0), ne.setScissorTest(!1);
    const ae = y !== zi && this.type === zi, z = y === zi && this.type !== zi;
    for (let q = 0, W = R.length; q < W; q++) {
      const Q = R[q], Z = Q.shadow;
      if (Z === void 0) {
        console.warn("THREE.WebGLShadowMap:", Q, "has no shadow.");
        continue;
      }
      if (Z.autoUpdate === !1 && Z.needsUpdate === !1) continue;
      i.copy(Z.mapSize);
      const K = Z.getFrameExtents();
      if (i.multiply(K), o.copy(Z.mapSize), (i.x > p || i.y > p) && (i.x > p && (o.x = Math.floor(p / K.x), i.x = o.x * K.x, Z.mapSize.x = o.x), i.y > p && (o.y = Math.floor(p / K.y), i.y = o.y * K.y, Z.mapSize.y = o.y)), Z.map === null || ae === !0 || z === !0) {
        const oe = this.type !== zi ? { minFilter: on, magFilter: on } : {};
        Z.map !== null && Z.map.dispose(), Z.map = new wi(i.x, i.y, oe), Z.map.texture.name = Q.name + ".shadowMap", Z.camera.updateProjectionMatrix();
      }
      a.setRenderTarget(Z.map), a.clear();
      const le = Z.getViewportCount();
      for (let oe = 0; oe < le; oe++) {
        const ge = Z.getViewport(oe);
        l.set(
          o.x * ge.x,
          o.y * ge.y,
          o.x * ge.z,
          o.y * ge.w
        ), ne.viewport(l), Z.updateMatrices(Q, oe), n = Z.getFrustum(), A(P, H, Z.camera, Q, this.type);
      }
      Z.isPointLightShadow !== !0 && this.type === zi && T(Z, H), Z.needsUpdate = !1;
    }
    y = this.type, S.needsUpdate = !1, a.setRenderTarget(w, C, X);
  };
  function T(R, P) {
    const H = e.update(E);
    g.defines.VSM_SAMPLES !== R.blurSamples && (g.defines.VSM_SAMPLES = R.blurSamples, v.defines.VSM_SAMPLES = R.blurSamples, g.needsUpdate = !0, v.needsUpdate = !0), R.mapPass === null && (R.mapPass = new wi(i.x, i.y)), g.uniforms.shadow_pass.value = R.map.texture, g.uniforms.resolution.value = R.mapSize, g.uniforms.radius.value = R.radius, a.setRenderTarget(R.mapPass), a.clear(), a.renderBufferDirect(P, null, H, g, E, null), v.uniforms.shadow_pass.value = R.mapPass.texture, v.uniforms.resolution.value = R.mapSize, v.uniforms.radius.value = R.radius, a.setRenderTarget(R.map), a.clear(), a.renderBufferDirect(P, null, H, v, E, null);
  }
  function b(R, P, H, w) {
    let C = null;
    const X = H.isPointLight === !0 ? R.customDistanceMaterial : R.customDepthMaterial;
    if (X !== void 0)
      C = X;
    else if (C = H.isPointLight === !0 ? h : c, a.localClippingEnabled && P.clipShadows === !0 && Array.isArray(P.clippingPlanes) && P.clippingPlanes.length !== 0 || P.displacementMap && P.displacementScale !== 0 || P.alphaMap && P.alphaTest > 0 || P.map && P.alphaTest > 0) {
      const ne = C.uuid, ae = P.uuid;
      let z = f[ne];
      z === void 0 && (z = {}, f[ne] = z);
      let q = z[ae];
      q === void 0 && (q = C.clone(), z[ae] = q, P.addEventListener("dispose", N)), C = q;
    }
    if (C.visible = P.visible, C.wireframe = P.wireframe, w === zi ? C.side = P.shadowSide !== null ? P.shadowSide : P.side : C.side = P.shadowSide !== null ? P.shadowSide : m[P.side], C.alphaMap = P.alphaMap, C.alphaTest = P.alphaTest, C.map = P.map, C.clipShadows = P.clipShadows, C.clippingPlanes = P.clippingPlanes, C.clipIntersection = P.clipIntersection, C.displacementMap = P.displacementMap, C.displacementScale = P.displacementScale, C.displacementBias = P.displacementBias, C.wireframeLinewidth = P.wireframeLinewidth, C.linewidth = P.linewidth, H.isPointLight === !0 && C.isMeshDistanceMaterial === !0) {
      const ne = a.properties.get(C);
      ne.light = H;
    }
    return C;
  }
  function A(R, P, H, w, C) {
    if (R.visible === !1) return;
    if (R.layers.test(P.layers) && (R.isMesh || R.isLine || R.isPoints) && (R.castShadow || R.receiveShadow && C === zi) && (!R.frustumCulled || n.intersectsObject(R))) {
      R.modelViewMatrix.multiplyMatrices(H.matrixWorldInverse, R.matrixWorld);
      const ae = e.update(R), z = R.material;
      if (Array.isArray(z)) {
        const q = ae.groups;
        for (let W = 0, Q = q.length; W < Q; W++) {
          const Z = q[W], K = z[Z.materialIndex];
          if (K && K.visible) {
            const le = b(R, K, w, C);
            R.onBeforeShadow(a, R, P, H, ae, le, Z), a.renderBufferDirect(H, null, ae, le, R, Z), R.onAfterShadow(a, R, P, H, ae, le, Z);
          }
        }
      } else if (z.visible) {
        const q = b(R, z, w, C);
        R.onBeforeShadow(a, R, P, H, ae, q, null), a.renderBufferDirect(H, null, ae, q, R, null), R.onAfterShadow(a, R, P, H, ae, q, null);
      }
    }
    const ne = R.children;
    for (let ae = 0, z = ne.length; ae < z; ae++)
      A(ne[ae], P, H, w, C);
  }
  function N(R) {
    R.target.removeEventListener("dispose", N);
    for (const H in f) {
      const w = f[H], C = R.target.uuid;
      C in w && (w[C].dispose(), delete w[C]);
    }
  }
}
function DR(a, e, t) {
  const n = t.isWebGL2;
  function i() {
    let G = !1;
    const Ae = new It();
    let Ce = null;
    const $e = new It(0, 0, 0, 0);
    return {
      setMask: function(ke) {
        Ce !== ke && !G && (a.colorMask(ke, ke, ke, ke), Ce = ke);
      },
      setLocked: function(ke) {
        G = ke;
      },
      setClear: function(ke, mt, Et, Pt, Yt) {
        Yt === !0 && (ke *= Pt, mt *= Pt, Et *= Pt), Ae.set(ke, mt, Et, Pt), $e.equals(Ae) === !1 && (a.clearColor(ke, mt, Et, Pt), $e.copy(Ae));
      },
      reset: function() {
        G = !1, Ce = null, $e.set(-1, 0, 0, 0);
      }
    };
  }
  function o() {
    let G = !1, Ae = null, Ce = null, $e = null;
    return {
      setTest: function(ke) {
        ke ? st(a.DEPTH_TEST) : qe(a.DEPTH_TEST);
      },
      setMask: function(ke) {
        Ae !== ke && !G && (a.depthMask(ke), Ae = ke);
      },
      setFunc: function(ke) {
        if (Ce !== ke) {
          switch (ke) {
            case My:
              a.depthFunc(a.NEVER);
              break;
            case Ey:
              a.depthFunc(a.ALWAYS);
              break;
            case by:
              a.depthFunc(a.LESS);
              break;
            case Ml:
              a.depthFunc(a.LEQUAL);
              break;
            case Ty:
              a.depthFunc(a.EQUAL);
              break;
            case Ay:
              a.depthFunc(a.GEQUAL);
              break;
            case wy:
              a.depthFunc(a.GREATER);
              break;
            case Ry:
              a.depthFunc(a.NOTEQUAL);
              break;
            default:
              a.depthFunc(a.LEQUAL);
          }
          Ce = ke;
        }
      },
      setLocked: function(ke) {
        G = ke;
      },
      setClear: function(ke) {
        $e !== ke && (a.clearDepth(ke), $e = ke);
      },
      reset: function() {
        G = !1, Ae = null, Ce = null, $e = null;
      }
    };
  }
  function l() {
    let G = !1, Ae = null, Ce = null, $e = null, ke = null, mt = null, Et = null, Pt = null, Yt = null;
    return {
      setTest: function(At) {
        G || (At ? st(a.STENCIL_TEST) : qe(a.STENCIL_TEST));
      },
      setMask: function(At) {
        Ae !== At && !G && (a.stencilMask(At), Ae = At);
      },
      setFunc: function(At, yn, Yn) {
        (Ce !== At || $e !== yn || ke !== Yn) && (a.stencilFunc(At, yn, Yn), Ce = At, $e = yn, ke = Yn);
      },
      setOp: function(At, yn, Yn) {
        (mt !== At || Et !== yn || Pt !== Yn) && (a.stencilOp(At, yn, Yn), mt = At, Et = yn, Pt = Yn);
      },
      setLocked: function(At) {
        G = At;
      },
      setClear: function(At) {
        Yt !== At && (a.clearStencil(At), Yt = At);
      },
      reset: function() {
        G = !1, Ae = null, Ce = null, $e = null, ke = null, mt = null, Et = null, Pt = null, Yt = null;
      }
    };
  }
  const c = new i(), h = new o(), f = new l(), p = /* @__PURE__ */ new WeakMap(), m = /* @__PURE__ */ new WeakMap();
  let g = {}, v = {}, x = /* @__PURE__ */ new WeakMap(), E = [], S = null, y = !1, T = null, b = null, A = null, N = null, R = null, P = null, H = null, w = new Fe(0, 0, 0), C = 0, X = !1, ne = null, ae = null, z = null, q = null, W = null;
  const Q = a.getParameter(a.MAX_COMBINED_TEXTURE_IMAGE_UNITS);
  let Z = !1, K = 0;
  const le = a.getParameter(a.VERSION);
  le.indexOf("WebGL") !== -1 ? (K = parseFloat(/^WebGL (\d)/.exec(le)[1]), Z = K >= 1) : le.indexOf("OpenGL ES") !== -1 && (K = parseFloat(/^OpenGL ES (\d)/.exec(le)[1]), Z = K >= 2);
  let oe = null, ge = {};
  const ee = a.getParameter(a.SCISSOR_BOX), ce = a.getParameter(a.VIEWPORT), be = new It().fromArray(ee), Ve = new It().fromArray(ce);
  function Ie(G, Ae, Ce, $e) {
    const ke = new Uint8Array(4), mt = a.createTexture();
    a.bindTexture(G, mt), a.texParameteri(G, a.TEXTURE_MIN_FILTER, a.NEAREST), a.texParameteri(G, a.TEXTURE_MAG_FILTER, a.NEAREST);
    for (let Et = 0; Et < Ce; Et++)
      n && (G === a.TEXTURE_3D || G === a.TEXTURE_2D_ARRAY) ? a.texImage3D(Ae, 0, a.RGBA, 1, 1, $e, 0, a.RGBA, a.UNSIGNED_BYTE, ke) : a.texImage2D(Ae + Et, 0, a.RGBA, 1, 1, 0, a.RGBA, a.UNSIGNED_BYTE, ke);
    return mt;
  }
  const je = {};
  je[a.TEXTURE_2D] = Ie(a.TEXTURE_2D, a.TEXTURE_2D, 1), je[a.TEXTURE_CUBE_MAP] = Ie(a.TEXTURE_CUBE_MAP, a.TEXTURE_CUBE_MAP_POSITIVE_X, 6), n && (je[a.TEXTURE_2D_ARRAY] = Ie(a.TEXTURE_2D_ARRAY, a.TEXTURE_2D_ARRAY, 1, 1), je[a.TEXTURE_3D] = Ie(a.TEXTURE_3D, a.TEXTURE_3D, 1, 1)), c.setClear(0, 0, 0, 1), h.setClear(1), f.setClear(0), st(a.DEPTH_TEST), h.setFunc(Ml), Ne(!1), D(tp), st(a.CULL_FACE), he(bs);
  function st(G) {
    g[G] !== !0 && (a.enable(G), g[G] = !0);
  }
  function qe(G) {
    g[G] !== !1 && (a.disable(G), g[G] = !1);
  }
  function nt(G, Ae) {
    return v[G] !== Ae ? (a.bindFramebuffer(G, Ae), v[G] = Ae, n && (G === a.DRAW_FRAMEBUFFER && (v[a.FRAMEBUFFER] = Ae), G === a.FRAMEBUFFER && (v[a.DRAW_FRAMEBUFFER] = Ae)), !0) : !1;
  }
  function F(G, Ae) {
    let Ce = E, $e = !1;
    if (G)
      if (Ce = x.get(Ae), Ce === void 0 && (Ce = [], x.set(Ae, Ce)), G.isWebGLMultipleRenderTargets) {
        const ke = G.texture;
        if (Ce.length !== ke.length || Ce[0] !== a.COLOR_ATTACHMENT0) {
          for (let mt = 0, Et = ke.length; mt < Et; mt++)
            Ce[mt] = a.COLOR_ATTACHMENT0 + mt;
          Ce.length = ke.length, $e = !0;
        }
      } else
        Ce[0] !== a.COLOR_ATTACHMENT0 && (Ce[0] = a.COLOR_ATTACHMENT0, $e = !0);
    else
      Ce[0] !== a.BACK && (Ce[0] = a.BACK, $e = !0);
    $e && (t.isWebGL2 ? a.drawBuffers(Ce) : e.get("WEBGL_draw_buffers").drawBuffersWEBGL(Ce));
  }
  function Ee(G) {
    return S !== G ? (a.useProgram(G), S = G, !0) : !1;
  }
  const ue = {
    [Qs]: a.FUNC_ADD,
    [oy]: a.FUNC_SUBTRACT,
    [ly]: a.FUNC_REVERSE_SUBTRACT
  };
  if (n)
    ue[ap] = a.MIN, ue[rp] = a.MAX;
  else {
    const G = e.get("EXT_blend_minmax");
    G !== null && (ue[ap] = G.MIN_EXT, ue[rp] = G.MAX_EXT);
  }
  const Se = {
    [cy]: a.ZERO,
    [uy]: a.ONE,
    [hy]: a.SRC_COLOR,
    [Gu]: a.SRC_ALPHA,
    [vy]: a.SRC_ALPHA_SATURATE,
    [my]: a.DST_COLOR,
    [dy]: a.DST_ALPHA,
    [fy]: a.ONE_MINUS_SRC_COLOR,
    [Wu]: a.ONE_MINUS_SRC_ALPHA,
    [gy]: a.ONE_MINUS_DST_COLOR,
    [py]: a.ONE_MINUS_DST_ALPHA,
    [_y]: a.CONSTANT_COLOR,
    [yy]: a.ONE_MINUS_CONSTANT_COLOR,
    [xy]: a.CONSTANT_ALPHA,
    [Sy]: a.ONE_MINUS_CONSTANT_ALPHA
  };
  function he(G, Ae, Ce, $e, ke, mt, Et, Pt, Yt, At) {
    if (G === bs) {
      y === !0 && (qe(a.BLEND), y = !1);
      return;
    }
    if (y === !1 && (st(a.BLEND), y = !0), G !== ry) {
      if (G !== T || At !== X) {
        if ((b !== Qs || R !== Qs) && (a.blendEquation(a.FUNC_ADD), b = Qs, R = Qs), At)
          switch (G) {
            case Qa:
              a.blendFuncSeparate(a.ONE, a.ONE_MINUS_SRC_ALPHA, a.ONE, a.ONE_MINUS_SRC_ALPHA);
              break;
            case np:
              a.blendFunc(a.ONE, a.ONE);
              break;
            case ip:
              a.blendFuncSeparate(a.ZERO, a.ONE_MINUS_SRC_COLOR, a.ZERO, a.ONE);
              break;
            case sp:
              a.blendFuncSeparate(a.ZERO, a.SRC_COLOR, a.ZERO, a.SRC_ALPHA);
              break;
            default:
              console.error("THREE.WebGLState: Invalid blending: ", G);
              break;
          }
        else
          switch (G) {
            case Qa:
              a.blendFuncSeparate(a.SRC_ALPHA, a.ONE_MINUS_SRC_ALPHA, a.ONE, a.ONE_MINUS_SRC_ALPHA);
              break;
            case np:
              a.blendFunc(a.SRC_ALPHA, a.ONE);
              break;
            case ip:
              a.blendFuncSeparate(a.ZERO, a.ONE_MINUS_SRC_COLOR, a.ZERO, a.ONE);
              break;
            case sp:
              a.blendFunc(a.ZERO, a.SRC_COLOR);
              break;
            default:
              console.error("THREE.WebGLState: Invalid blending: ", G);
              break;
          }
        A = null, N = null, P = null, H = null, w.set(0, 0, 0), C = 0, T = G, X = At;
      }
      return;
    }
    ke = ke || Ae, mt = mt || Ce, Et = Et || $e, (Ae !== b || ke !== R) && (a.blendEquationSeparate(ue[Ae], ue[ke]), b = Ae, R = ke), (Ce !== A || $e !== N || mt !== P || Et !== H) && (a.blendFuncSeparate(Se[Ce], Se[$e], Se[mt], Se[Et]), A = Ce, N = $e, P = mt, H = Et), (Pt.equals(w) === !1 || Yt !== C) && (a.blendColor(Pt.r, Pt.g, Pt.b, Yt), w.copy(Pt), C = Yt), T = G, X = !1;
  }
  function Ge(G, Ae) {
    G.side === Ai ? qe(a.CULL_FACE) : st(a.CULL_FACE);
    let Ce = G.side === Xn;
    Ae && (Ce = !Ce), Ne(Ce), G.blending === Qa && G.transparent === !1 ? he(bs) : he(G.blending, G.blendEquation, G.blendSrc, G.blendDst, G.blendEquationAlpha, G.blendSrcAlpha, G.blendDstAlpha, G.blendColor, G.blendAlpha, G.premultipliedAlpha), h.setFunc(G.depthFunc), h.setTest(G.depthTest), h.setMask(G.depthWrite), c.setMask(G.colorWrite);
    const $e = G.stencilWrite;
    f.setTest($e), $e && (f.setMask(G.stencilWriteMask), f.setFunc(G.stencilFunc, G.stencilRef, G.stencilFuncMask), f.setOp(G.stencilFail, G.stencilZFail, G.stencilZPass)), j(G.polygonOffset, G.polygonOffsetFactor, G.polygonOffsetUnits), G.alphaToCoverage === !0 ? st(a.SAMPLE_ALPHA_TO_COVERAGE) : qe(a.SAMPLE_ALPHA_TO_COVERAGE);
  }
  function Ne(G) {
    ne !== G && (G ? a.frontFace(a.CW) : a.frontFace(a.CCW), ne = G);
  }
  function D(G) {
    G !== iy ? (st(a.CULL_FACE), G !== ae && (G === tp ? a.cullFace(a.BACK) : G === sy ? a.cullFace(a.FRONT) : a.cullFace(a.FRONT_AND_BACK))) : qe(a.CULL_FACE), ae = G;
  }
  function L(G) {
    G !== z && (Z && a.lineWidth(G), z = G);
  }
  function j(G, Ae, Ce) {
    G ? (st(a.POLYGON_OFFSET_FILL), (q !== Ae || W !== Ce) && (a.polygonOffset(Ae, Ce), q = Ae, W = Ce)) : qe(a.POLYGON_OFFSET_FILL);
  }
  function _e(G) {
    G ? st(a.SCISSOR_TEST) : qe(a.SCISSOR_TEST);
  }
  function ve(G) {
    G === void 0 && (G = a.TEXTURE0 + Q - 1), oe !== G && (a.activeTexture(G), oe = G);
  }
  function me(G, Ae, Ce) {
    Ce === void 0 && (oe === null ? Ce = a.TEXTURE0 + Q - 1 : Ce = oe);
    let $e = ge[Ce];
    $e === void 0 && ($e = { type: void 0, texture: void 0 }, ge[Ce] = $e), ($e.type !== G || $e.texture !== Ae) && (oe !== Ce && (a.activeTexture(Ce), oe = Ce), a.bindTexture(G, Ae || je[G]), $e.type = G, $e.texture = Ae);
  }
  function We() {
    const G = ge[oe];
    G !== void 0 && G.type !== void 0 && (a.bindTexture(G.type, null), G.type = void 0, G.texture = void 0);
  }
  function Le() {
    try {
      a.compressedTexImage2D.apply(a, arguments);
    } catch (G) {
      console.error("THREE.WebGLState:", G);
    }
  }
  function ze() {
    try {
      a.compressedTexImage3D.apply(a, arguments);
    } catch (G) {
      console.error("THREE.WebGLState:", G);
    }
  }
  function Ze() {
    try {
      a.texSubImage2D.apply(a, arguments);
    } catch (G) {
      console.error("THREE.WebGLState:", G);
    }
  }
  function ot() {
    try {
      a.texSubImage3D.apply(a, arguments);
    } catch (G) {
      console.error("THREE.WebGLState:", G);
    }
  }
  function ye() {
    try {
      a.compressedTexSubImage2D.apply(a, arguments);
    } catch (G) {
      console.error("THREE.WebGLState:", G);
    }
  }
  function Mt() {
    try {
      a.compressedTexSubImage3D.apply(a, arguments);
    } catch (G) {
      console.error("THREE.WebGLState:", G);
    }
  }
  function ht() {
    try {
      a.texStorage2D.apply(a, arguments);
    } catch (G) {
      console.error("THREE.WebGLState:", G);
    }
  }
  function Je() {
    try {
      a.texStorage3D.apply(a, arguments);
    } catch (G) {
      console.error("THREE.WebGLState:", G);
    }
  }
  function Xe() {
    try {
      a.texImage2D.apply(a, arguments);
    } catch (G) {
      console.error("THREE.WebGLState:", G);
    }
  }
  function Be() {
    try {
      a.texImage3D.apply(a, arguments);
    } catch (G) {
      console.error("THREE.WebGLState:", G);
    }
  }
  function V(G) {
    be.equals(G) === !1 && (a.scissor(G.x, G.y, G.z, G.w), be.copy(G));
  }
  function pe(G) {
    Ve.equals(G) === !1 && (a.viewport(G.x, G.y, G.z, G.w), Ve.copy(G));
  }
  function De(G, Ae) {
    let Ce = m.get(Ae);
    Ce === void 0 && (Ce = /* @__PURE__ */ new WeakMap(), m.set(Ae, Ce));
    let $e = Ce.get(G);
    $e === void 0 && ($e = a.getUniformBlockIndex(Ae, G.name), Ce.set(G, $e));
  }
  function Pe(G, Ae) {
    const $e = m.get(Ae).get(G);
    p.get(Ae) !== $e && (a.uniformBlockBinding(Ae, $e, G.__bindingPointIndex), p.set(Ae, $e));
  }
  function xe() {
    a.disable(a.BLEND), a.disable(a.CULL_FACE), a.disable(a.DEPTH_TEST), a.disable(a.POLYGON_OFFSET_FILL), a.disable(a.SCISSOR_TEST), a.disable(a.STENCIL_TEST), a.disable(a.SAMPLE_ALPHA_TO_COVERAGE), a.blendEquation(a.FUNC_ADD), a.blendFunc(a.ONE, a.ZERO), a.blendFuncSeparate(a.ONE, a.ZERO, a.ONE, a.ZERO), a.blendColor(0, 0, 0, 0), a.colorMask(!0, !0, !0, !0), a.clearColor(0, 0, 0, 0), a.depthMask(!0), a.depthFunc(a.LESS), a.clearDepth(1), a.stencilMask(4294967295), a.stencilFunc(a.ALWAYS, 0, 4294967295), a.stencilOp(a.KEEP, a.KEEP, a.KEEP), a.clearStencil(0), a.cullFace(a.BACK), a.frontFace(a.CCW), a.polygonOffset(0, 0), a.activeTexture(a.TEXTURE0), a.bindFramebuffer(a.FRAMEBUFFER, null), n === !0 && (a.bindFramebuffer(a.DRAW_FRAMEBUFFER, null), a.bindFramebuffer(a.READ_FRAMEBUFFER, null)), a.useProgram(null), a.lineWidth(1), a.scissor(0, 0, a.canvas.width, a.canvas.height), a.viewport(0, 0, a.canvas.width, a.canvas.height), g = {}, oe = null, ge = {}, v = {}, x = /* @__PURE__ */ new WeakMap(), E = [], S = null, y = !1, T = null, b = null, A = null, N = null, R = null, P = null, H = null, w = new Fe(0, 0, 0), C = 0, X = !1, ne = null, ae = null, z = null, q = null, W = null, be.set(0, 0, a.canvas.width, a.canvas.height), Ve.set(0, 0, a.canvas.width, a.canvas.height), c.reset(), h.reset(), f.reset();
  }
  return {
    buffers: {
      color: c,
      depth: h,
      stencil: f
    },
    enable: st,
    disable: qe,
    bindFramebuffer: nt,
    drawBuffers: F,
    useProgram: Ee,
    setBlending: he,
    setMaterial: Ge,
    setFlipSided: Ne,
    setCullFace: D,
    setLineWidth: L,
    setPolygonOffset: j,
    setScissorTest: _e,
    activeTexture: ve,
    bindTexture: me,
    unbindTexture: We,
    compressedTexImage2D: Le,
    compressedTexImage3D: ze,
    texImage2D: Xe,
    texImage3D: Be,
    updateUBOMapping: De,
    uniformBlockBinding: Pe,
    texStorage2D: ht,
    texStorage3D: Je,
    texSubImage2D: Ze,
    texSubImage3D: ot,
    compressedTexSubImage2D: ye,
    compressedTexSubImage3D: Mt,
    scissor: V,
    viewport: pe,
    reset: xe
  };
}
function PR(a, e, t, n, i, o, l) {
  const c = i.isWebGL2, h = e.has("WEBGL_multisampled_render_to_texture") ? e.get("WEBGL_multisampled_render_to_texture") : null, f = typeof navigator > "u" ? !1 : /OculusBrowser/g.test(navigator.userAgent), p = /* @__PURE__ */ new WeakMap();
  let m;
  const g = /* @__PURE__ */ new WeakMap();
  let v = !1;
  try {
    v = typeof OffscreenCanvas < "u" && new OffscreenCanvas(1, 1).getContext("2d") !== null;
  } catch {
  }
  function x(D, L) {
    return v ? (
      // eslint-disable-next-line compat/compat
      new OffscreenCanvas(D, L)
    ) : Pl("canvas");
  }
  function E(D, L, j, _e) {
    let ve = 1;
    if ((D.width > _e || D.height > _e) && (ve = _e / Math.max(D.width, D.height)), ve < 1 || L === !0)
      if (typeof HTMLImageElement < "u" && D instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && D instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && D instanceof ImageBitmap) {
        const me = L ? qu : Math.floor, We = me(ve * D.width), Le = me(ve * D.height);
        m === void 0 && (m = x(We, Le));
        const ze = j ? x(We, Le) : m;
        return ze.width = We, ze.height = Le, ze.getContext("2d").drawImage(D, 0, 0, We, Le), console.warn("THREE.WebGLRenderer: Texture has been resized from (" + D.width + "x" + D.height + ") to (" + We + "x" + Le + ")."), ze;
      } else
        return "data" in D && console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + D.width + "x" + D.height + ")."), D;
    return D;
  }
  function S(D) {
    return Op(D.width) && Op(D.height);
  }
  function y(D) {
    return c ? !1 : D.wrapS !== Pn || D.wrapT !== Pn || D.minFilter !== on && D.minFilter !== ln;
  }
  function T(D, L) {
    return D.generateMipmaps && L && D.minFilter !== on && D.minFilter !== ln;
  }
  function b(D) {
    a.generateMipmap(D);
  }
  function A(D, L, j, _e, ve = !1) {
    if (c === !1) return L;
    if (D !== null) {
      if (a[D] !== void 0) return a[D];
      console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + D + "'");
    }
    let me = L;
    if (L === a.RED && (j === a.FLOAT && (me = a.R32F), j === a.HALF_FLOAT && (me = a.R16F), j === a.UNSIGNED_BYTE && (me = a.R8)), L === a.RED_INTEGER && (j === a.UNSIGNED_BYTE && (me = a.R8UI), j === a.UNSIGNED_SHORT && (me = a.R16UI), j === a.UNSIGNED_INT && (me = a.R32UI), j === a.BYTE && (me = a.R8I), j === a.SHORT && (me = a.R16I), j === a.INT && (me = a.R32I)), L === a.RG && (j === a.FLOAT && (me = a.RG32F), j === a.HALF_FLOAT && (me = a.RG16F), j === a.UNSIGNED_BYTE && (me = a.RG8)), L === a.RGBA) {
      const We = ve ? Ll : Dt.getTransfer(_e);
      j === a.FLOAT && (me = a.RGBA32F), j === a.HALF_FLOAT && (me = a.RGBA16F), j === a.UNSIGNED_BYTE && (me = We === Wt ? a.SRGB8_ALPHA8 : a.RGBA8), j === a.UNSIGNED_SHORT_4_4_4_4 && (me = a.RGBA4), j === a.UNSIGNED_SHORT_5_5_5_1 && (me = a.RGB5_A1);
    }
    return (me === a.R16F || me === a.R32F || me === a.RG16F || me === a.RG32F || me === a.RGBA16F || me === a.RGBA32F) && e.get("EXT_color_buffer_float"), me;
  }
  function N(D, L, j) {
    return T(D, j) === !0 || D.isFramebufferTexture && D.minFilter !== on && D.minFilter !== ln ? Math.log2(Math.max(L.width, L.height)) + 1 : D.mipmaps !== void 0 && D.mipmaps.length > 0 ? D.mipmaps.length : D.isCompressedTexture && Array.isArray(D.image) ? L.mipmaps.length : 1;
  }
  function R(D) {
    return D === on || D === Xu || D === gl ? a.NEAREST : a.LINEAR;
  }
  function P(D) {
    const L = D.target;
    L.removeEventListener("dispose", P), w(L), L.isVideoTexture && p.delete(L);
  }
  function H(D) {
    const L = D.target;
    L.removeEventListener("dispose", H), X(L);
  }
  function w(D) {
    const L = n.get(D);
    if (L.__webglInit === void 0) return;
    const j = D.source, _e = g.get(j);
    if (_e) {
      const ve = _e[L.__cacheKey];
      ve.usedTimes--, ve.usedTimes === 0 && C(D), Object.keys(_e).length === 0 && g.delete(j);
    }
    n.remove(D);
  }
  function C(D) {
    const L = n.get(D);
    a.deleteTexture(L.__webglTexture);
    const j = D.source, _e = g.get(j);
    delete _e[L.__cacheKey], l.memory.textures--;
  }
  function X(D) {
    const L = D.texture, j = n.get(D), _e = n.get(L);
    if (_e.__webglTexture !== void 0 && (a.deleteTexture(_e.__webglTexture), l.memory.textures--), D.depthTexture && D.depthTexture.dispose(), D.isWebGLCubeRenderTarget)
      for (let ve = 0; ve < 6; ve++) {
        if (Array.isArray(j.__webglFramebuffer[ve]))
          for (let me = 0; me < j.__webglFramebuffer[ve].length; me++) a.deleteFramebuffer(j.__webglFramebuffer[ve][me]);
        else
          a.deleteFramebuffer(j.__webglFramebuffer[ve]);
        j.__webglDepthbuffer && a.deleteRenderbuffer(j.__webglDepthbuffer[ve]);
      }
    else {
      if (Array.isArray(j.__webglFramebuffer))
        for (let ve = 0; ve < j.__webglFramebuffer.length; ve++) a.deleteFramebuffer(j.__webglFramebuffer[ve]);
      else
        a.deleteFramebuffer(j.__webglFramebuffer);
      if (j.__webglDepthbuffer && a.deleteRenderbuffer(j.__webglDepthbuffer), j.__webglMultisampledFramebuffer && a.deleteFramebuffer(j.__webglMultisampledFramebuffer), j.__webglColorRenderbuffer)
        for (let ve = 0; ve < j.__webglColorRenderbuffer.length; ve++)
          j.__webglColorRenderbuffer[ve] && a.deleteRenderbuffer(j.__webglColorRenderbuffer[ve]);
      j.__webglDepthRenderbuffer && a.deleteRenderbuffer(j.__webglDepthRenderbuffer);
    }
    if (D.isWebGLMultipleRenderTargets)
      for (let ve = 0, me = L.length; ve < me; ve++) {
        const We = n.get(L[ve]);
        We.__webglTexture && (a.deleteTexture(We.__webglTexture), l.memory.textures--), n.remove(L[ve]);
      }
    n.remove(L), n.remove(D);
  }
  let ne = 0;
  function ae() {
    ne = 0;
  }
  function z() {
    const D = ne;
    return D >= i.maxTextures && console.warn("THREE.WebGLTextures: Trying to use " + D + " texture units while this GPU supports only " + i.maxTextures), ne += 1, D;
  }
  function q(D) {
    const L = [];
    return L.push(D.wrapS), L.push(D.wrapT), L.push(D.wrapR || 0), L.push(D.magFilter), L.push(D.minFilter), L.push(D.anisotropy), L.push(D.internalFormat), L.push(D.format), L.push(D.type), L.push(D.generateMipmaps), L.push(D.premultiplyAlpha), L.push(D.flipY), L.push(D.unpackAlignment), L.push(D.colorSpace), L.join();
  }
  function W(D, L) {
    const j = n.get(D);
    if (D.isVideoTexture && Ge(D), D.isRenderTargetTexture === !1 && D.version > 0 && j.__version !== D.version) {
      const _e = D.image;
      if (_e === null)
        console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");
      else if (_e.complete === !1)
        console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
      else {
        be(j, D, L);
        return;
      }
    }
    t.bindTexture(a.TEXTURE_2D, j.__webglTexture, a.TEXTURE0 + L);
  }
  function Q(D, L) {
    const j = n.get(D);
    if (D.version > 0 && j.__version !== D.version) {
      be(j, D, L);
      return;
    }
    t.bindTexture(a.TEXTURE_2D_ARRAY, j.__webglTexture, a.TEXTURE0 + L);
  }
  function Z(D, L) {
    const j = n.get(D);
    if (D.version > 0 && j.__version !== D.version) {
      be(j, D, L);
      return;
    }
    t.bindTexture(a.TEXTURE_3D, j.__webglTexture, a.TEXTURE0 + L);
  }
  function K(D, L) {
    const j = n.get(D);
    if (D.version > 0 && j.__version !== D.version) {
      Ve(j, D, L);
      return;
    }
    t.bindTexture(a.TEXTURE_CUBE_MAP, j.__webglTexture, a.TEXTURE0 + L);
  }
  const le = {
    [Tl]: a.REPEAT,
    [Pn]: a.CLAMP_TO_EDGE,
    [Al]: a.MIRRORED_REPEAT
  }, oe = {
    [on]: a.NEAREST,
    [Xu]: a.NEAREST_MIPMAP_NEAREST,
    [gl]: a.NEAREST_MIPMAP_LINEAR,
    [ln]: a.LINEAR,
    [em]: a.LINEAR_MIPMAP_NEAREST,
    [sa]: a.LINEAR_MIPMAP_LINEAR
  }, ge = {
    [Ky]: a.NEVER,
    [nx]: a.ALWAYS,
    [Jy]: a.LESS,
    [um]: a.LEQUAL,
    [Qy]: a.EQUAL,
    [tx]: a.GEQUAL,
    [$y]: a.GREATER,
    [ex]: a.NOTEQUAL
  };
  function ee(D, L, j) {
    if (j ? (a.texParameteri(D, a.TEXTURE_WRAP_S, le[L.wrapS]), a.texParameteri(D, a.TEXTURE_WRAP_T, le[L.wrapT]), (D === a.TEXTURE_3D || D === a.TEXTURE_2D_ARRAY) && a.texParameteri(D, a.TEXTURE_WRAP_R, le[L.wrapR]), a.texParameteri(D, a.TEXTURE_MAG_FILTER, oe[L.magFilter]), a.texParameteri(D, a.TEXTURE_MIN_FILTER, oe[L.minFilter])) : (a.texParameteri(D, a.TEXTURE_WRAP_S, a.CLAMP_TO_EDGE), a.texParameteri(D, a.TEXTURE_WRAP_T, a.CLAMP_TO_EDGE), (D === a.TEXTURE_3D || D === a.TEXTURE_2D_ARRAY) && a.texParameteri(D, a.TEXTURE_WRAP_R, a.CLAMP_TO_EDGE), (L.wrapS !== Pn || L.wrapT !== Pn) && console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."), a.texParameteri(D, a.TEXTURE_MAG_FILTER, R(L.magFilter)), a.texParameteri(D, a.TEXTURE_MIN_FILTER, R(L.minFilter)), L.minFilter !== on && L.minFilter !== ln && console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")), L.compareFunction && (a.texParameteri(D, a.TEXTURE_COMPARE_MODE, a.COMPARE_REF_TO_TEXTURE), a.texParameteri(D, a.TEXTURE_COMPARE_FUNC, ge[L.compareFunction])), e.has("EXT_texture_filter_anisotropic") === !0) {
      const _e = e.get("EXT_texture_filter_anisotropic");
      if (L.magFilter === on || L.minFilter !== gl && L.minFilter !== sa || L.type === Hi && e.has("OES_texture_float_linear") === !1 || c === !1 && L.type === go && e.has("OES_texture_half_float_linear") === !1) return;
      (L.anisotropy > 1 || n.get(L).__currentAnisotropy) && (a.texParameterf(D, _e.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(L.anisotropy, i.getMaxAnisotropy())), n.get(L).__currentAnisotropy = L.anisotropy);
    }
  }
  function ce(D, L) {
    let j = !1;
    D.__webglInit === void 0 && (D.__webglInit = !0, L.addEventListener("dispose", P));
    const _e = L.source;
    let ve = g.get(_e);
    ve === void 0 && (ve = {}, g.set(_e, ve));
    const me = q(L);
    if (me !== D.__cacheKey) {
      ve[me] === void 0 && (ve[me] = {
        texture: a.createTexture(),
        usedTimes: 0
      }, l.memory.textures++, j = !0), ve[me].usedTimes++;
      const We = ve[D.__cacheKey];
      We !== void 0 && (ve[D.__cacheKey].usedTimes--, We.usedTimes === 0 && C(L)), D.__cacheKey = me, D.__webglTexture = ve[me].texture;
    }
    return j;
  }
  function be(D, L, j) {
    let _e = a.TEXTURE_2D;
    (L.isDataArrayTexture || L.isCompressedArrayTexture) && (_e = a.TEXTURE_2D_ARRAY), L.isData3DTexture && (_e = a.TEXTURE_3D);
    const ve = ce(D, L), me = L.source;
    t.bindTexture(_e, D.__webglTexture, a.TEXTURE0 + j);
    const We = n.get(me);
    if (me.version !== We.__version || ve === !0) {
      t.activeTexture(a.TEXTURE0 + j);
      const Le = Dt.getPrimaries(Dt.workingColorSpace), ze = L.colorSpace === pi ? null : Dt.getPrimaries(L.colorSpace), Ze = L.colorSpace === pi || Le === ze ? a.NONE : a.BROWSER_DEFAULT_WEBGL;
      a.pixelStorei(a.UNPACK_FLIP_Y_WEBGL, L.flipY), a.pixelStorei(a.UNPACK_PREMULTIPLY_ALPHA_WEBGL, L.premultiplyAlpha), a.pixelStorei(a.UNPACK_ALIGNMENT, L.unpackAlignment), a.pixelStorei(a.UNPACK_COLORSPACE_CONVERSION_WEBGL, Ze);
      const ot = y(L) && S(L.image) === !1;
      let ye = E(L.image, ot, !1, i.maxTextureSize);
      ye = Ne(L, ye);
      const Mt = S(ye) || c, ht = o.convert(L.format, L.colorSpace);
      let Je = o.convert(L.type), Xe = A(L.internalFormat, ht, Je, L.colorSpace, L.isVideoTexture);
      ee(_e, L, Mt);
      let Be;
      const V = L.mipmaps, pe = c && L.isVideoTexture !== !0 && Xe !== om, De = We.__version === void 0 || ve === !0, Pe = N(L, ye, Mt);
      if (L.isDepthTexture)
        Xe = a.DEPTH_COMPONENT, c ? L.type === Hi ? Xe = a.DEPTH_COMPONENT32F : L.type === Ms ? Xe = a.DEPTH_COMPONENT24 : L.type === ea ? Xe = a.DEPTH24_STENCIL8 : Xe = a.DEPTH_COMPONENT16 : L.type === Hi && console.error("WebGLRenderer: Floating point depth texture requires WebGL2."), L.format === ta && Xe === a.DEPTH_COMPONENT && L.type !== ih && L.type !== Ms && (console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."), L.type = Ms, Je = o.convert(L.type)), L.format === nr && Xe === a.DEPTH_COMPONENT && (Xe = a.DEPTH_STENCIL, L.type !== ea && (console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."), L.type = ea, Je = o.convert(L.type))), De && (pe ? t.texStorage2D(a.TEXTURE_2D, 1, Xe, ye.width, ye.height) : t.texImage2D(a.TEXTURE_2D, 0, Xe, ye.width, ye.height, 0, ht, Je, null));
      else if (L.isDataTexture)
        if (V.length > 0 && Mt) {
          pe && De && t.texStorage2D(a.TEXTURE_2D, Pe, Xe, V[0].width, V[0].height);
          for (let xe = 0, G = V.length; xe < G; xe++)
            Be = V[xe], pe ? t.texSubImage2D(a.TEXTURE_2D, xe, 0, 0, Be.width, Be.height, ht, Je, Be.data) : t.texImage2D(a.TEXTURE_2D, xe, Xe, Be.width, Be.height, 0, ht, Je, Be.data);
          L.generateMipmaps = !1;
        } else
          pe ? (De && t.texStorage2D(a.TEXTURE_2D, Pe, Xe, ye.width, ye.height), t.texSubImage2D(a.TEXTURE_2D, 0, 0, 0, ye.width, ye.height, ht, Je, ye.data)) : t.texImage2D(a.TEXTURE_2D, 0, Xe, ye.width, ye.height, 0, ht, Je, ye.data);
      else if (L.isCompressedTexture)
        if (L.isCompressedArrayTexture) {
          pe && De && t.texStorage3D(a.TEXTURE_2D_ARRAY, Pe, Xe, V[0].width, V[0].height, ye.depth);
          for (let xe = 0, G = V.length; xe < G; xe++)
            Be = V[xe], L.format !== Wn ? ht !== null ? pe ? t.compressedTexSubImage3D(a.TEXTURE_2D_ARRAY, xe, 0, 0, 0, Be.width, Be.height, ye.depth, ht, Be.data, 0, 0) : t.compressedTexImage3D(a.TEXTURE_2D_ARRAY, xe, Xe, Be.width, Be.height, ye.depth, 0, Be.data, 0, 0) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : pe ? t.texSubImage3D(a.TEXTURE_2D_ARRAY, xe, 0, 0, 0, Be.width, Be.height, ye.depth, ht, Je, Be.data) : t.texImage3D(a.TEXTURE_2D_ARRAY, xe, Xe, Be.width, Be.height, ye.depth, 0, ht, Je, Be.data);
        } else {
          pe && De && t.texStorage2D(a.TEXTURE_2D, Pe, Xe, V[0].width, V[0].height);
          for (let xe = 0, G = V.length; xe < G; xe++)
            Be = V[xe], L.format !== Wn ? ht !== null ? pe ? t.compressedTexSubImage2D(a.TEXTURE_2D, xe, 0, 0, Be.width, Be.height, ht, Be.data) : t.compressedTexImage2D(a.TEXTURE_2D, xe, Xe, Be.width, Be.height, 0, Be.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : pe ? t.texSubImage2D(a.TEXTURE_2D, xe, 0, 0, Be.width, Be.height, ht, Je, Be.data) : t.texImage2D(a.TEXTURE_2D, xe, Xe, Be.width, Be.height, 0, ht, Je, Be.data);
        }
      else if (L.isDataArrayTexture)
        pe ? (De && t.texStorage3D(a.TEXTURE_2D_ARRAY, Pe, Xe, ye.width, ye.height, ye.depth), t.texSubImage3D(a.TEXTURE_2D_ARRAY, 0, 0, 0, 0, ye.width, ye.height, ye.depth, ht, Je, ye.data)) : t.texImage3D(a.TEXTURE_2D_ARRAY, 0, Xe, ye.width, ye.height, ye.depth, 0, ht, Je, ye.data);
      else if (L.isData3DTexture)
        pe ? (De && t.texStorage3D(a.TEXTURE_3D, Pe, Xe, ye.width, ye.height, ye.depth), t.texSubImage3D(a.TEXTURE_3D, 0, 0, 0, 0, ye.width, ye.height, ye.depth, ht, Je, ye.data)) : t.texImage3D(a.TEXTURE_3D, 0, Xe, ye.width, ye.height, ye.depth, 0, ht, Je, ye.data);
      else if (L.isFramebufferTexture) {
        if (De)
          if (pe)
            t.texStorage2D(a.TEXTURE_2D, Pe, Xe, ye.width, ye.height);
          else {
            let xe = ye.width, G = ye.height;
            for (let Ae = 0; Ae < Pe; Ae++)
              t.texImage2D(a.TEXTURE_2D, Ae, Xe, xe, G, 0, ht, Je, null), xe >>= 1, G >>= 1;
          }
      } else if (V.length > 0 && Mt) {
        pe && De && t.texStorage2D(a.TEXTURE_2D, Pe, Xe, V[0].width, V[0].height);
        for (let xe = 0, G = V.length; xe < G; xe++)
          Be = V[xe], pe ? t.texSubImage2D(a.TEXTURE_2D, xe, 0, 0, ht, Je, Be) : t.texImage2D(a.TEXTURE_2D, xe, Xe, ht, Je, Be);
        L.generateMipmaps = !1;
      } else
        pe ? (De && t.texStorage2D(a.TEXTURE_2D, Pe, Xe, ye.width, ye.height), t.texSubImage2D(a.TEXTURE_2D, 0, 0, 0, ht, Je, ye)) : t.texImage2D(a.TEXTURE_2D, 0, Xe, ht, Je, ye);
      T(L, Mt) && b(_e), We.__version = me.version, L.onUpdate && L.onUpdate(L);
    }
    D.__version = L.version;
  }
  function Ve(D, L, j) {
    if (L.image.length !== 6) return;
    const _e = ce(D, L), ve = L.source;
    t.bindTexture(a.TEXTURE_CUBE_MAP, D.__webglTexture, a.TEXTURE0 + j);
    const me = n.get(ve);
    if (ve.version !== me.__version || _e === !0) {
      t.activeTexture(a.TEXTURE0 + j);
      const We = Dt.getPrimaries(Dt.workingColorSpace), Le = L.colorSpace === pi ? null : Dt.getPrimaries(L.colorSpace), ze = L.colorSpace === pi || We === Le ? a.NONE : a.BROWSER_DEFAULT_WEBGL;
      a.pixelStorei(a.UNPACK_FLIP_Y_WEBGL, L.flipY), a.pixelStorei(a.UNPACK_PREMULTIPLY_ALPHA_WEBGL, L.premultiplyAlpha), a.pixelStorei(a.UNPACK_ALIGNMENT, L.unpackAlignment), a.pixelStorei(a.UNPACK_COLORSPACE_CONVERSION_WEBGL, ze);
      const Ze = L.isCompressedTexture || L.image[0].isCompressedTexture, ot = L.image[0] && L.image[0].isDataTexture, ye = [];
      for (let xe = 0; xe < 6; xe++)
        !Ze && !ot ? ye[xe] = E(L.image[xe], !1, !0, i.maxCubemapSize) : ye[xe] = ot ? L.image[xe].image : L.image[xe], ye[xe] = Ne(L, ye[xe]);
      const Mt = ye[0], ht = S(Mt) || c, Je = o.convert(L.format, L.colorSpace), Xe = o.convert(L.type), Be = A(L.internalFormat, Je, Xe, L.colorSpace), V = c && L.isVideoTexture !== !0, pe = me.__version === void 0 || _e === !0;
      let De = N(L, Mt, ht);
      ee(a.TEXTURE_CUBE_MAP, L, ht);
      let Pe;
      if (Ze) {
        V && pe && t.texStorage2D(a.TEXTURE_CUBE_MAP, De, Be, Mt.width, Mt.height);
        for (let xe = 0; xe < 6; xe++) {
          Pe = ye[xe].mipmaps;
          for (let G = 0; G < Pe.length; G++) {
            const Ae = Pe[G];
            L.format !== Wn ? Je !== null ? V ? t.compressedTexSubImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X + xe, G, 0, 0, Ae.width, Ae.height, Je, Ae.data) : t.compressedTexImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X + xe, G, Be, Ae.width, Ae.height, 0, Ae.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()") : V ? t.texSubImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X + xe, G, 0, 0, Ae.width, Ae.height, Je, Xe, Ae.data) : t.texImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X + xe, G, Be, Ae.width, Ae.height, 0, Je, Xe, Ae.data);
          }
        }
      } else {
        Pe = L.mipmaps, V && pe && (Pe.length > 0 && De++, t.texStorage2D(a.TEXTURE_CUBE_MAP, De, Be, ye[0].width, ye[0].height));
        for (let xe = 0; xe < 6; xe++)
          if (ot) {
            V ? t.texSubImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X + xe, 0, 0, 0, ye[xe].width, ye[xe].height, Je, Xe, ye[xe].data) : t.texImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X + xe, 0, Be, ye[xe].width, ye[xe].height, 0, Je, Xe, ye[xe].data);
            for (let G = 0; G < Pe.length; G++) {
              const Ce = Pe[G].image[xe].image;
              V ? t.texSubImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X + xe, G + 1, 0, 0, Ce.width, Ce.height, Je, Xe, Ce.data) : t.texImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X + xe, G + 1, Be, Ce.width, Ce.height, 0, Je, Xe, Ce.data);
            }
          } else {
            V ? t.texSubImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X + xe, 0, 0, 0, Je, Xe, ye[xe]) : t.texImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X + xe, 0, Be, Je, Xe, ye[xe]);
            for (let G = 0; G < Pe.length; G++) {
              const Ae = Pe[G];
              V ? t.texSubImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X + xe, G + 1, 0, 0, Je, Xe, Ae.image[xe]) : t.texImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X + xe, G + 1, Be, Je, Xe, Ae.image[xe]);
            }
          }
      }
      T(L, ht) && b(a.TEXTURE_CUBE_MAP), me.__version = ve.version, L.onUpdate && L.onUpdate(L);
    }
    D.__version = L.version;
  }
  function Ie(D, L, j, _e, ve, me) {
    const We = o.convert(j.format, j.colorSpace), Le = o.convert(j.type), ze = A(j.internalFormat, We, Le, j.colorSpace);
    if (!n.get(L).__hasExternalTextures) {
      const ot = Math.max(1, L.width >> me), ye = Math.max(1, L.height >> me);
      ve === a.TEXTURE_3D || ve === a.TEXTURE_2D_ARRAY ? t.texImage3D(ve, me, ze, ot, ye, L.depth, 0, We, Le, null) : t.texImage2D(ve, me, ze, ot, ye, 0, We, Le, null);
    }
    t.bindFramebuffer(a.FRAMEBUFFER, D), he(L) ? h.framebufferTexture2DMultisampleEXT(a.FRAMEBUFFER, _e, ve, n.get(j).__webglTexture, 0, Se(L)) : (ve === a.TEXTURE_2D || ve >= a.TEXTURE_CUBE_MAP_POSITIVE_X && ve <= a.TEXTURE_CUBE_MAP_NEGATIVE_Z) && a.framebufferTexture2D(a.FRAMEBUFFER, _e, ve, n.get(j).__webglTexture, me), t.bindFramebuffer(a.FRAMEBUFFER, null);
  }
  function je(D, L, j) {
    if (a.bindRenderbuffer(a.RENDERBUFFER, D), L.depthBuffer && !L.stencilBuffer) {
      let _e = c === !0 ? a.DEPTH_COMPONENT24 : a.DEPTH_COMPONENT16;
      if (j || he(L)) {
        const ve = L.depthTexture;
        ve && ve.isDepthTexture && (ve.type === Hi ? _e = a.DEPTH_COMPONENT32F : ve.type === Ms && (_e = a.DEPTH_COMPONENT24));
        const me = Se(L);
        he(L) ? h.renderbufferStorageMultisampleEXT(a.RENDERBUFFER, me, _e, L.width, L.height) : a.renderbufferStorageMultisample(a.RENDERBUFFER, me, _e, L.width, L.height);
      } else
        a.renderbufferStorage(a.RENDERBUFFER, _e, L.width, L.height);
      a.framebufferRenderbuffer(a.FRAMEBUFFER, a.DEPTH_ATTACHMENT, a.RENDERBUFFER, D);
    } else if (L.depthBuffer && L.stencilBuffer) {
      const _e = Se(L);
      j && he(L) === !1 ? a.renderbufferStorageMultisample(a.RENDERBUFFER, _e, a.DEPTH24_STENCIL8, L.width, L.height) : he(L) ? h.renderbufferStorageMultisampleEXT(a.RENDERBUFFER, _e, a.DEPTH24_STENCIL8, L.width, L.height) : a.renderbufferStorage(a.RENDERBUFFER, a.DEPTH_STENCIL, L.width, L.height), a.framebufferRenderbuffer(a.FRAMEBUFFER, a.DEPTH_STENCIL_ATTACHMENT, a.RENDERBUFFER, D);
    } else {
      const _e = L.isWebGLMultipleRenderTargets === !0 ? L.texture : [L.texture];
      for (let ve = 0; ve < _e.length; ve++) {
        const me = _e[ve], We = o.convert(me.format, me.colorSpace), Le = o.convert(me.type), ze = A(me.internalFormat, We, Le, me.colorSpace), Ze = Se(L);
        j && he(L) === !1 ? a.renderbufferStorageMultisample(a.RENDERBUFFER, Ze, ze, L.width, L.height) : he(L) ? h.renderbufferStorageMultisampleEXT(a.RENDERBUFFER, Ze, ze, L.width, L.height) : a.renderbufferStorage(a.RENDERBUFFER, ze, L.width, L.height);
      }
    }
    a.bindRenderbuffer(a.RENDERBUFFER, null);
  }
  function st(D, L) {
    if (L && L.isWebGLCubeRenderTarget) throw new Error("Depth Texture with cube render targets is not supported");
    if (t.bindFramebuffer(a.FRAMEBUFFER, D), !(L.depthTexture && L.depthTexture.isDepthTexture))
      throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
    (!n.get(L.depthTexture).__webglTexture || L.depthTexture.image.width !== L.width || L.depthTexture.image.height !== L.height) && (L.depthTexture.image.width = L.width, L.depthTexture.image.height = L.height, L.depthTexture.needsUpdate = !0), W(L.depthTexture, 0);
    const _e = n.get(L.depthTexture).__webglTexture, ve = Se(L);
    if (L.depthTexture.format === ta)
      he(L) ? h.framebufferTexture2DMultisampleEXT(a.FRAMEBUFFER, a.DEPTH_ATTACHMENT, a.TEXTURE_2D, _e, 0, ve) : a.framebufferTexture2D(a.FRAMEBUFFER, a.DEPTH_ATTACHMENT, a.TEXTURE_2D, _e, 0);
    else if (L.depthTexture.format === nr)
      he(L) ? h.framebufferTexture2DMultisampleEXT(a.FRAMEBUFFER, a.DEPTH_STENCIL_ATTACHMENT, a.TEXTURE_2D, _e, 0, ve) : a.framebufferTexture2D(a.FRAMEBUFFER, a.DEPTH_STENCIL_ATTACHMENT, a.TEXTURE_2D, _e, 0);
    else
      throw new Error("Unknown depthTexture format");
  }
  function qe(D) {
    const L = n.get(D), j = D.isWebGLCubeRenderTarget === !0;
    if (D.depthTexture && !L.__autoAllocateDepthBuffer) {
      if (j) throw new Error("target.depthTexture not supported in Cube render targets");
      st(L.__webglFramebuffer, D);
    } else if (j) {
      L.__webglDepthbuffer = [];
      for (let _e = 0; _e < 6; _e++)
        t.bindFramebuffer(a.FRAMEBUFFER, L.__webglFramebuffer[_e]), L.__webglDepthbuffer[_e] = a.createRenderbuffer(), je(L.__webglDepthbuffer[_e], D, !1);
    } else
      t.bindFramebuffer(a.FRAMEBUFFER, L.__webglFramebuffer), L.__webglDepthbuffer = a.createRenderbuffer(), je(L.__webglDepthbuffer, D, !1);
    t.bindFramebuffer(a.FRAMEBUFFER, null);
  }
  function nt(D, L, j) {
    const _e = n.get(D);
    L !== void 0 && Ie(_e.__webglFramebuffer, D, D.texture, a.COLOR_ATTACHMENT0, a.TEXTURE_2D, 0), j !== void 0 && qe(D);
  }
  function F(D) {
    const L = D.texture, j = n.get(D), _e = n.get(L);
    D.addEventListener("dispose", H), D.isWebGLMultipleRenderTargets !== !0 && (_e.__webglTexture === void 0 && (_e.__webglTexture = a.createTexture()), _e.__version = L.version, l.memory.textures++);
    const ve = D.isWebGLCubeRenderTarget === !0, me = D.isWebGLMultipleRenderTargets === !0, We = S(D) || c;
    if (ve) {
      j.__webglFramebuffer = [];
      for (let Le = 0; Le < 6; Le++)
        if (c && L.mipmaps && L.mipmaps.length > 0) {
          j.__webglFramebuffer[Le] = [];
          for (let ze = 0; ze < L.mipmaps.length; ze++)
            j.__webglFramebuffer[Le][ze] = a.createFramebuffer();
        } else
          j.__webglFramebuffer[Le] = a.createFramebuffer();
    } else {
      if (c && L.mipmaps && L.mipmaps.length > 0) {
        j.__webglFramebuffer = [];
        for (let Le = 0; Le < L.mipmaps.length; Le++)
          j.__webglFramebuffer[Le] = a.createFramebuffer();
      } else
        j.__webglFramebuffer = a.createFramebuffer();
      if (me)
        if (i.drawBuffers) {
          const Le = D.texture;
          for (let ze = 0, Ze = Le.length; ze < Ze; ze++) {
            const ot = n.get(Le[ze]);
            ot.__webglTexture === void 0 && (ot.__webglTexture = a.createTexture(), l.memory.textures++);
          }
        } else
          console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");
      if (c && D.samples > 0 && he(D) === !1) {
        const Le = me ? L : [L];
        j.__webglMultisampledFramebuffer = a.createFramebuffer(), j.__webglColorRenderbuffer = [], t.bindFramebuffer(a.FRAMEBUFFER, j.__webglMultisampledFramebuffer);
        for (let ze = 0; ze < Le.length; ze++) {
          const Ze = Le[ze];
          j.__webglColorRenderbuffer[ze] = a.createRenderbuffer(), a.bindRenderbuffer(a.RENDERBUFFER, j.__webglColorRenderbuffer[ze]);
          const ot = o.convert(Ze.format, Ze.colorSpace), ye = o.convert(Ze.type), Mt = A(Ze.internalFormat, ot, ye, Ze.colorSpace, D.isXRRenderTarget === !0), ht = Se(D);
          a.renderbufferStorageMultisample(a.RENDERBUFFER, ht, Mt, D.width, D.height), a.framebufferRenderbuffer(a.FRAMEBUFFER, a.COLOR_ATTACHMENT0 + ze, a.RENDERBUFFER, j.__webglColorRenderbuffer[ze]);
        }
        a.bindRenderbuffer(a.RENDERBUFFER, null), D.depthBuffer && (j.__webglDepthRenderbuffer = a.createRenderbuffer(), je(j.__webglDepthRenderbuffer, D, !0)), t.bindFramebuffer(a.FRAMEBUFFER, null);
      }
    }
    if (ve) {
      t.bindTexture(a.TEXTURE_CUBE_MAP, _e.__webglTexture), ee(a.TEXTURE_CUBE_MAP, L, We);
      for (let Le = 0; Le < 6; Le++)
        if (c && L.mipmaps && L.mipmaps.length > 0)
          for (let ze = 0; ze < L.mipmaps.length; ze++)
            Ie(j.__webglFramebuffer[Le][ze], D, L, a.COLOR_ATTACHMENT0, a.TEXTURE_CUBE_MAP_POSITIVE_X + Le, ze);
        else
          Ie(j.__webglFramebuffer[Le], D, L, a.COLOR_ATTACHMENT0, a.TEXTURE_CUBE_MAP_POSITIVE_X + Le, 0);
      T(L, We) && b(a.TEXTURE_CUBE_MAP), t.unbindTexture();
    } else if (me) {
      const Le = D.texture;
      for (let ze = 0, Ze = Le.length; ze < Ze; ze++) {
        const ot = Le[ze], ye = n.get(ot);
        t.bindTexture(a.TEXTURE_2D, ye.__webglTexture), ee(a.TEXTURE_2D, ot, We), Ie(j.__webglFramebuffer, D, ot, a.COLOR_ATTACHMENT0 + ze, a.TEXTURE_2D, 0), T(ot, We) && b(a.TEXTURE_2D);
      }
      t.unbindTexture();
    } else {
      let Le = a.TEXTURE_2D;
      if ((D.isWebGL3DRenderTarget || D.isWebGLArrayRenderTarget) && (c ? Le = D.isWebGL3DRenderTarget ? a.TEXTURE_3D : a.TEXTURE_2D_ARRAY : console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.")), t.bindTexture(Le, _e.__webglTexture), ee(Le, L, We), c && L.mipmaps && L.mipmaps.length > 0)
        for (let ze = 0; ze < L.mipmaps.length; ze++)
          Ie(j.__webglFramebuffer[ze], D, L, a.COLOR_ATTACHMENT0, Le, ze);
      else
        Ie(j.__webglFramebuffer, D, L, a.COLOR_ATTACHMENT0, Le, 0);
      T(L, We) && b(Le), t.unbindTexture();
    }
    D.depthBuffer && qe(D);
  }
  function Ee(D) {
    const L = S(D) || c, j = D.isWebGLMultipleRenderTargets === !0 ? D.texture : [D.texture];
    for (let _e = 0, ve = j.length; _e < ve; _e++) {
      const me = j[_e];
      if (T(me, L)) {
        const We = D.isWebGLCubeRenderTarget ? a.TEXTURE_CUBE_MAP : a.TEXTURE_2D, Le = n.get(me).__webglTexture;
        t.bindTexture(We, Le), b(We), t.unbindTexture();
      }
    }
  }
  function ue(D) {
    if (c && D.samples > 0 && he(D) === !1) {
      const L = D.isWebGLMultipleRenderTargets ? D.texture : [D.texture], j = D.width, _e = D.height;
      let ve = a.COLOR_BUFFER_BIT;
      const me = [], We = D.stencilBuffer ? a.DEPTH_STENCIL_ATTACHMENT : a.DEPTH_ATTACHMENT, Le = n.get(D), ze = D.isWebGLMultipleRenderTargets === !0;
      if (ze)
        for (let Ze = 0; Ze < L.length; Ze++)
          t.bindFramebuffer(a.FRAMEBUFFER, Le.__webglMultisampledFramebuffer), a.framebufferRenderbuffer(a.FRAMEBUFFER, a.COLOR_ATTACHMENT0 + Ze, a.RENDERBUFFER, null), t.bindFramebuffer(a.FRAMEBUFFER, Le.__webglFramebuffer), a.framebufferTexture2D(a.DRAW_FRAMEBUFFER, a.COLOR_ATTACHMENT0 + Ze, a.TEXTURE_2D, null, 0);
      t.bindFramebuffer(a.READ_FRAMEBUFFER, Le.__webglMultisampledFramebuffer), t.bindFramebuffer(a.DRAW_FRAMEBUFFER, Le.__webglFramebuffer);
      for (let Ze = 0; Ze < L.length; Ze++) {
        me.push(a.COLOR_ATTACHMENT0 + Ze), D.depthBuffer && me.push(We);
        const ot = Le.__ignoreDepthValues !== void 0 ? Le.__ignoreDepthValues : !1;
        if (ot === !1 && (D.depthBuffer && (ve |= a.DEPTH_BUFFER_BIT), D.stencilBuffer && (ve |= a.STENCIL_BUFFER_BIT)), ze && a.framebufferRenderbuffer(a.READ_FRAMEBUFFER, a.COLOR_ATTACHMENT0, a.RENDERBUFFER, Le.__webglColorRenderbuffer[Ze]), ot === !0 && (a.invalidateFramebuffer(a.READ_FRAMEBUFFER, [We]), a.invalidateFramebuffer(a.DRAW_FRAMEBUFFER, [We])), ze) {
          const ye = n.get(L[Ze]).__webglTexture;
          a.framebufferTexture2D(a.DRAW_FRAMEBUFFER, a.COLOR_ATTACHMENT0, a.TEXTURE_2D, ye, 0);
        }
        a.blitFramebuffer(0, 0, j, _e, 0, 0, j, _e, ve, a.NEAREST), f && a.invalidateFramebuffer(a.READ_FRAMEBUFFER, me);
      }
      if (t.bindFramebuffer(a.READ_FRAMEBUFFER, null), t.bindFramebuffer(a.DRAW_FRAMEBUFFER, null), ze)
        for (let Ze = 0; Ze < L.length; Ze++) {
          t.bindFramebuffer(a.FRAMEBUFFER, Le.__webglMultisampledFramebuffer), a.framebufferRenderbuffer(a.FRAMEBUFFER, a.COLOR_ATTACHMENT0 + Ze, a.RENDERBUFFER, Le.__webglColorRenderbuffer[Ze]);
          const ot = n.get(L[Ze]).__webglTexture;
          t.bindFramebuffer(a.FRAMEBUFFER, Le.__webglFramebuffer), a.framebufferTexture2D(a.DRAW_FRAMEBUFFER, a.COLOR_ATTACHMENT0 + Ze, a.TEXTURE_2D, ot, 0);
        }
      t.bindFramebuffer(a.DRAW_FRAMEBUFFER, Le.__webglMultisampledFramebuffer);
    }
  }
  function Se(D) {
    return Math.min(i.maxSamples, D.samples);
  }
  function he(D) {
    const L = n.get(D);
    return c && D.samples > 0 && e.has("WEBGL_multisampled_render_to_texture") === !0 && L.__useRenderToTexture !== !1;
  }
  function Ge(D) {
    const L = l.render.frame;
    p.get(D) !== L && (p.set(D, L), D.update());
  }
  function Ne(D, L) {
    const j = D.colorSpace, _e = D.format, ve = D.type;
    return D.isCompressedTexture === !0 || D.isVideoTexture === !0 || D.format === ku || j !== Vi && j !== pi && (Dt.getTransfer(j) === Wt ? c === !1 ? e.has("EXT_sRGB") === !0 && _e === Wn ? (D.format = ku, D.minFilter = ln, D.generateMipmaps = !1) : L = fm.sRGBToLinear(L) : (_e !== Wn || ve !== Qi) && console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.") : console.error("THREE.WebGLTextures: Unsupported texture color space:", j)), L;
  }
  this.allocateTextureUnit = z, this.resetTextureUnits = ae, this.setTexture2D = W, this.setTexture2DArray = Q, this.setTexture3D = Z, this.setTextureCube = K, this.rebindTextures = nt, this.setupRenderTarget = F, this.updateRenderTargetMipmap = Ee, this.updateMultisampleRenderTarget = ue, this.setupDepthRenderbuffer = qe, this.setupFrameBufferTexture = Ie, this.useMultisampledRTT = he;
}
function vx(a, e, t) {
  const n = t.isWebGL2;
  function i(o, l = pi) {
    let c;
    const h = Dt.getTransfer(l);
    if (o === Qi) return a.UNSIGNED_BYTE;
    if (o === nm) return a.UNSIGNED_SHORT_4_4_4_4;
    if (o === im) return a.UNSIGNED_SHORT_5_5_5_1;
    if (o === Iy) return a.BYTE;
    if (o === zy) return a.SHORT;
    if (o === ih) return a.UNSIGNED_SHORT;
    if (o === tm) return a.INT;
    if (o === Ms) return a.UNSIGNED_INT;
    if (o === Hi) return a.FLOAT;
    if (o === go)
      return n ? a.HALF_FLOAT : (c = e.get("OES_texture_half_float"), c !== null ? c.HALF_FLOAT_OES : null);
    if (o === By) return a.ALPHA;
    if (o === Wn) return a.RGBA;
    if (o === Hy) return a.LUMINANCE;
    if (o === Fy) return a.LUMINANCE_ALPHA;
    if (o === ta) return a.DEPTH_COMPONENT;
    if (o === nr) return a.DEPTH_STENCIL;
    if (o === ku)
      return c = e.get("EXT_sRGB"), c !== null ? c.SRGB_ALPHA_EXT : null;
    if (o === Vy) return a.RED;
    if (o === sm) return a.RED_INTEGER;
    if (o === Gy) return a.RG;
    if (o === am) return a.RG_INTEGER;
    if (o === rm) return a.RGBA_INTEGER;
    if (o === Pu || o === Ou || o === Iu || o === zu)
      if (h === Wt)
        if (c = e.get("WEBGL_compressed_texture_s3tc_srgb"), c !== null) {
          if (o === Pu) return c.COMPRESSED_SRGB_S3TC_DXT1_EXT;
          if (o === Ou) return c.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
          if (o === Iu) return c.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
          if (o === zu) return c.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
        } else
          return null;
      else if (c = e.get("WEBGL_compressed_texture_s3tc"), c !== null) {
        if (o === Pu) return c.COMPRESSED_RGB_S3TC_DXT1_EXT;
        if (o === Ou) return c.COMPRESSED_RGBA_S3TC_DXT1_EXT;
        if (o === Iu) return c.COMPRESSED_RGBA_S3TC_DXT3_EXT;
        if (o === zu) return c.COMPRESSED_RGBA_S3TC_DXT5_EXT;
      } else
        return null;
    if (o === lp || o === cp || o === up || o === hp)
      if (c = e.get("WEBGL_compressed_texture_pvrtc"), c !== null) {
        if (o === lp) return c.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
        if (o === cp) return c.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
        if (o === up) return c.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
        if (o === hp) return c.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
      } else
        return null;
    if (o === om)
      return c = e.get("WEBGL_compressed_texture_etc1"), c !== null ? c.COMPRESSED_RGB_ETC1_WEBGL : null;
    if (o === fp || o === dp)
      if (c = e.get("WEBGL_compressed_texture_etc"), c !== null) {
        if (o === fp) return h === Wt ? c.COMPRESSED_SRGB8_ETC2 : c.COMPRESSED_RGB8_ETC2;
        if (o === dp) return h === Wt ? c.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : c.COMPRESSED_RGBA8_ETC2_EAC;
      } else
        return null;
    if (o === pp || o === mp || o === gp || o === vp || o === _p || o === yp || o === xp || o === Sp || o === Mp || o === Ep || o === bp || o === Tp || o === Ap || o === wp)
      if (c = e.get("WEBGL_compressed_texture_astc"), c !== null) {
        if (o === pp) return h === Wt ? c.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : c.COMPRESSED_RGBA_ASTC_4x4_KHR;
        if (o === mp) return h === Wt ? c.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : c.COMPRESSED_RGBA_ASTC_5x4_KHR;
        if (o === gp) return h === Wt ? c.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : c.COMPRESSED_RGBA_ASTC_5x5_KHR;
        if (o === vp) return h === Wt ? c.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : c.COMPRESSED_RGBA_ASTC_6x5_KHR;
        if (o === _p) return h === Wt ? c.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : c.COMPRESSED_RGBA_ASTC_6x6_KHR;
        if (o === yp) return h === Wt ? c.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : c.COMPRESSED_RGBA_ASTC_8x5_KHR;
        if (o === xp) return h === Wt ? c.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : c.COMPRESSED_RGBA_ASTC_8x6_KHR;
        if (o === Sp) return h === Wt ? c.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : c.COMPRESSED_RGBA_ASTC_8x8_KHR;
        if (o === Mp) return h === Wt ? c.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : c.COMPRESSED_RGBA_ASTC_10x5_KHR;
        if (o === Ep) return h === Wt ? c.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : c.COMPRESSED_RGBA_ASTC_10x6_KHR;
        if (o === bp) return h === Wt ? c.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : c.COMPRESSED_RGBA_ASTC_10x8_KHR;
        if (o === Tp) return h === Wt ? c.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : c.COMPRESSED_RGBA_ASTC_10x10_KHR;
        if (o === Ap) return h === Wt ? c.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : c.COMPRESSED_RGBA_ASTC_12x10_KHR;
        if (o === wp) return h === Wt ? c.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : c.COMPRESSED_RGBA_ASTC_12x12_KHR;
      } else
        return null;
    if (o === Bu || o === Rp || o === Cp)
      if (c = e.get("EXT_texture_compression_bptc"), c !== null) {
        if (o === Bu) return h === Wt ? c.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : c.COMPRESSED_RGBA_BPTC_UNORM_EXT;
        if (o === Rp) return c.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;
        if (o === Cp) return c.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT;
      } else
        return null;
    if (o === Wy || o === Lp || o === Up || o === Np)
      if (c = e.get("EXT_texture_compression_rgtc"), c !== null) {
        if (o === Bu) return c.COMPRESSED_RED_RGTC1_EXT;
        if (o === Lp) return c.COMPRESSED_SIGNED_RED_RGTC1_EXT;
        if (o === Up) return c.COMPRESSED_RED_GREEN_RGTC2_EXT;
        if (o === Np) return c.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;
      } else
        return null;
    return o === ea ? n ? a.UNSIGNED_INT_24_8 : (c = e.get("WEBGL_depth_texture"), c !== null ? c.UNSIGNED_INT_24_8_WEBGL : null) : a[o] !== void 0 ? a[o] : null;
  }
  return { convert: i };
}
class _x extends cn {
  constructor(e = []) {
    super(), this.isArrayCamera = !0, this.cameras = e;
  }
}
class fo extends Nt {
  constructor() {
    super(), this.isGroup = !0, this.type = "Group";
  }
}
const OR = { type: "move" };
class Ed {
  constructor() {
    this._targetRay = null, this._grip = null, this._hand = null;
  }
  getHandSpace() {
    return this._hand === null && (this._hand = new fo(), this._hand.matrixAutoUpdate = !1, this._hand.visible = !1, this._hand.joints = {}, this._hand.inputState = { pinching: !1 }), this._hand;
  }
  getTargetRaySpace() {
    return this._targetRay === null && (this._targetRay = new fo(), this._targetRay.matrixAutoUpdate = !1, this._targetRay.visible = !1, this._targetRay.hasLinearVelocity = !1, this._targetRay.linearVelocity = new I(), this._targetRay.hasAngularVelocity = !1, this._targetRay.angularVelocity = new I()), this._targetRay;
  }
  getGripSpace() {
    return this._grip === null && (this._grip = new fo(), this._grip.matrixAutoUpdate = !1, this._grip.visible = !1, this._grip.hasLinearVelocity = !1, this._grip.linearVelocity = new I(), this._grip.hasAngularVelocity = !1, this._grip.angularVelocity = new I()), this._grip;
  }
  dispatchEvent(e) {
    return this._targetRay !== null && this._targetRay.dispatchEvent(e), this._grip !== null && this._grip.dispatchEvent(e), this._hand !== null && this._hand.dispatchEvent(e), this;
  }
  connect(e) {
    if (e && e.hand) {
      const t = this._hand;
      if (t)
        for (const n of e.hand.values())
          this._getHandJoint(t, n);
    }
    return this.dispatchEvent({ type: "connected", data: e }), this;
  }
  disconnect(e) {
    return this.dispatchEvent({ type: "disconnected", data: e }), this._targetRay !== null && (this._targetRay.visible = !1), this._grip !== null && (this._grip.visible = !1), this._hand !== null && (this._hand.visible = !1), this;
  }
  update(e, t, n) {
    let i = null, o = null, l = null;
    const c = this._targetRay, h = this._grip, f = this._hand;
    if (e && t.session.visibilityState !== "visible-blurred") {
      if (f && e.hand) {
        l = !0;
        for (const E of e.hand.values()) {
          const S = t.getJointPose(E, n), y = this._getHandJoint(f, E);
          S !== null && (y.matrix.fromArray(S.transform.matrix), y.matrix.decompose(y.position, y.rotation, y.scale), y.matrixWorldNeedsUpdate = !0, y.jointRadius = S.radius), y.visible = S !== null;
        }
        const p = f.joints["index-finger-tip"], m = f.joints["thumb-tip"], g = p.position.distanceTo(m.position), v = 0.02, x = 5e-3;
        f.inputState.pinching && g > v + x ? (f.inputState.pinching = !1, this.dispatchEvent({
          type: "pinchend",
          handedness: e.handedness,
          target: this
        })) : !f.inputState.pinching && g <= v - x && (f.inputState.pinching = !0, this.dispatchEvent({
          type: "pinchstart",
          handedness: e.handedness,
          target: this
        }));
      } else
        h !== null && e.gripSpace && (o = t.getPose(e.gripSpace, n), o !== null && (h.matrix.fromArray(o.transform.matrix), h.matrix.decompose(h.position, h.rotation, h.scale), h.matrixWorldNeedsUpdate = !0, o.linearVelocity ? (h.hasLinearVelocity = !0, h.linearVelocity.copy(o.linearVelocity)) : h.hasLinearVelocity = !1, o.angularVelocity ? (h.hasAngularVelocity = !0, h.angularVelocity.copy(o.angularVelocity)) : h.hasAngularVelocity = !1));
      c !== null && (i = t.getPose(e.targetRaySpace, n), i === null && o !== null && (i = o), i !== null && (c.matrix.fromArray(i.transform.matrix), c.matrix.decompose(c.position, c.rotation, c.scale), c.matrixWorldNeedsUpdate = !0, i.linearVelocity ? (c.hasLinearVelocity = !0, c.linearVelocity.copy(i.linearVelocity)) : c.hasLinearVelocity = !1, i.angularVelocity ? (c.hasAngularVelocity = !0, c.angularVelocity.copy(i.angularVelocity)) : c.hasAngularVelocity = !1, this.dispatchEvent(OR)));
    }
    return c !== null && (c.visible = i !== null), h !== null && (h.visible = o !== null), f !== null && (f.visible = l !== null), this;
  }
  // private method
  _getHandJoint(e, t) {
    if (e.joints[t.jointName] === void 0) {
      const n = new fo();
      n.matrixAutoUpdate = !1, n.visible = !1, e.joints[t.jointName] = n, e.add(n);
    }
    return e.joints[t.jointName];
  }
}
class IR extends Cs {
  constructor(e, t) {
    super();
    const n = this;
    let i = null, o = 1, l = null, c = "local-floor", h = 1, f = null, p = null, m = null, g = null, v = null, x = null;
    const E = t.getContextAttributes();
    let S = null, y = null;
    const T = [], b = [], A = new de();
    let N = null;
    const R = new cn();
    R.layers.enable(1), R.viewport = new It();
    const P = new cn();
    P.layers.enable(2), P.viewport = new It();
    const H = [R, P], w = new _x();
    w.layers.enable(1), w.layers.enable(2);
    let C = null, X = null;
    this.cameraAutoUpdate = !0, this.enabled = !1, this.isPresenting = !1, this.getController = function(ee) {
      let ce = T[ee];
      return ce === void 0 && (ce = new Ed(), T[ee] = ce), ce.getTargetRaySpace();
    }, this.getControllerGrip = function(ee) {
      let ce = T[ee];
      return ce === void 0 && (ce = new Ed(), T[ee] = ce), ce.getGripSpace();
    }, this.getHand = function(ee) {
      let ce = T[ee];
      return ce === void 0 && (ce = new Ed(), T[ee] = ce), ce.getHandSpace();
    };
    function ne(ee) {
      const ce = b.indexOf(ee.inputSource);
      if (ce === -1)
        return;
      const be = T[ce];
      be !== void 0 && (be.update(ee.inputSource, ee.frame, f || l), be.dispatchEvent({ type: ee.type, data: ee.inputSource }));
    }
    function ae() {
      i.removeEventListener("select", ne), i.removeEventListener("selectstart", ne), i.removeEventListener("selectend", ne), i.removeEventListener("squeeze", ne), i.removeEventListener("squeezestart", ne), i.removeEventListener("squeezeend", ne), i.removeEventListener("end", ae), i.removeEventListener("inputsourceschange", z);
      for (let ee = 0; ee < T.length; ee++) {
        const ce = b[ee];
        ce !== null && (b[ee] = null, T[ee].disconnect(ce));
      }
      C = null, X = null, e.setRenderTarget(S), v = null, g = null, m = null, i = null, y = null, ge.stop(), n.isPresenting = !1, e.setPixelRatio(N), e.setSize(A.width, A.height, !1), n.dispatchEvent({ type: "sessionend" });
    }
    this.setFramebufferScaleFactor = function(ee) {
      o = ee, n.isPresenting === !0 && console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.");
    }, this.setReferenceSpaceType = function(ee) {
      c = ee, n.isPresenting === !0 && console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.");
    }, this.getReferenceSpace = function() {
      return f || l;
    }, this.setReferenceSpace = function(ee) {
      f = ee;
    }, this.getBaseLayer = function() {
      return g !== null ? g : v;
    }, this.getBinding = function() {
      return m;
    }, this.getFrame = function() {
      return x;
    }, this.getSession = function() {
      return i;
    }, this.setSession = async function(ee) {
      if (i = ee, i !== null) {
        if (S = e.getRenderTarget(), i.addEventListener("select", ne), i.addEventListener("selectstart", ne), i.addEventListener("selectend", ne), i.addEventListener("squeeze", ne), i.addEventListener("squeezestart", ne), i.addEventListener("squeezeend", ne), i.addEventListener("end", ae), i.addEventListener("inputsourceschange", z), E.xrCompatible !== !0 && await t.makeXRCompatible(), N = e.getPixelRatio(), e.getSize(A), i.renderState.layers === void 0 || e.capabilities.isWebGL2 === !1) {
          const ce = {
            antialias: i.renderState.layers === void 0 ? E.antialias : !0,
            alpha: !0,
            depth: E.depth,
            stencil: E.stencil,
            framebufferScaleFactor: o
          };
          v = new XRWebGLLayer(i, t, ce), i.updateRenderState({ baseLayer: v }), e.setPixelRatio(1), e.setSize(v.framebufferWidth, v.framebufferHeight, !1), y = new wi(
            v.framebufferWidth,
            v.framebufferHeight,
            {
              format: Wn,
              type: Qi,
              colorSpace: e.outputColorSpace,
              stencilBuffer: E.stencil
            }
          );
        } else {
          let ce = null, be = null, Ve = null;
          E.depth && (Ve = E.stencil ? t.DEPTH24_STENCIL8 : t.DEPTH_COMPONENT24, ce = E.stencil ? nr : ta, be = E.stencil ? ea : Ms);
          const Ie = {
            colorFormat: t.RGBA8,
            depthFormat: Ve,
            scaleFactor: o
          };
          m = new XRWebGLBinding(i, t), g = m.createProjectionLayer(Ie), i.updateRenderState({ layers: [g] }), e.setPixelRatio(1), e.setSize(g.textureWidth, g.textureHeight, !1), y = new wi(
            g.textureWidth,
            g.textureHeight,
            {
              format: Wn,
              type: Qi,
              depthTexture: new vm(g.textureWidth, g.textureHeight, be, void 0, void 0, void 0, void 0, void 0, void 0, ce),
              stencilBuffer: E.stencil,
              colorSpace: e.outputColorSpace,
              samples: E.antialias ? 4 : 0
            }
          );
          const je = e.properties.get(y);
          je.__ignoreDepthValues = g.ignoreDepthValues;
        }
        y.isXRRenderTarget = !0, this.setFoveation(h), f = null, l = await i.requestReferenceSpace(c), ge.setContext(i), ge.start(), n.isPresenting = !0, n.dispatchEvent({ type: "sessionstart" });
      }
    }, this.getEnvironmentBlendMode = function() {
      if (i !== null)
        return i.environmentBlendMode;
    };
    function z(ee) {
      for (let ce = 0; ce < ee.removed.length; ce++) {
        const be = ee.removed[ce], Ve = b.indexOf(be);
        Ve >= 0 && (b[Ve] = null, T[Ve].disconnect(be));
      }
      for (let ce = 0; ce < ee.added.length; ce++) {
        const be = ee.added[ce];
        let Ve = b.indexOf(be);
        if (Ve === -1) {
          for (let je = 0; je < T.length; je++)
            if (je >= b.length) {
              b.push(be), Ve = je;
              break;
            } else if (b[je] === null) {
              b[je] = be, Ve = je;
              break;
            }
          if (Ve === -1) break;
        }
        const Ie = T[Ve];
        Ie && Ie.connect(be);
      }
    }
    const q = new I(), W = new I();
    function Q(ee, ce, be) {
      q.setFromMatrixPosition(ce.matrixWorld), W.setFromMatrixPosition(be.matrixWorld);
      const Ve = q.distanceTo(W), Ie = ce.projectionMatrix.elements, je = be.projectionMatrix.elements, st = Ie[14] / (Ie[10] - 1), qe = Ie[14] / (Ie[10] + 1), nt = (Ie[9] + 1) / Ie[5], F = (Ie[9] - 1) / Ie[5], Ee = (Ie[8] - 1) / Ie[0], ue = (je[8] + 1) / je[0], Se = st * Ee, he = st * ue, Ge = Ve / (-Ee + ue), Ne = Ge * -Ee;
      ce.matrixWorld.decompose(ee.position, ee.quaternion, ee.scale), ee.translateX(Ne), ee.translateZ(Ge), ee.matrixWorld.compose(ee.position, ee.quaternion, ee.scale), ee.matrixWorldInverse.copy(ee.matrixWorld).invert();
      const D = st + Ge, L = qe + Ge, j = Se - Ne, _e = he + (Ve - Ne), ve = nt * qe / L * D, me = F * qe / L * D;
      ee.projectionMatrix.makePerspective(j, _e, ve, me, D, L), ee.projectionMatrixInverse.copy(ee.projectionMatrix).invert();
    }
    function Z(ee, ce) {
      ce === null ? ee.matrixWorld.copy(ee.matrix) : ee.matrixWorld.multiplyMatrices(ce.matrixWorld, ee.matrix), ee.matrixWorldInverse.copy(ee.matrixWorld).invert();
    }
    this.updateCamera = function(ee) {
      if (i === null) return;
      w.near = P.near = R.near = ee.near, w.far = P.far = R.far = ee.far, (C !== w.near || X !== w.far) && (i.updateRenderState({
        depthNear: w.near,
        depthFar: w.far
      }), C = w.near, X = w.far);
      const ce = ee.parent, be = w.cameras;
      Z(w, ce);
      for (let Ve = 0; Ve < be.length; Ve++)
        Z(be[Ve], ce);
      be.length === 2 ? Q(w, R, P) : w.projectionMatrix.copy(R.projectionMatrix), K(ee, w, ce);
    };
    function K(ee, ce, be) {
      be === null ? ee.matrix.copy(ce.matrixWorld) : (ee.matrix.copy(be.matrixWorld), ee.matrix.invert(), ee.matrix.multiply(ce.matrixWorld)), ee.matrix.decompose(ee.position, ee.quaternion, ee.scale), ee.updateMatrixWorld(!0), ee.projectionMatrix.copy(ce.projectionMatrix), ee.projectionMatrixInverse.copy(ce.projectionMatrixInverse), ee.isPerspectiveCamera && (ee.fov = _o * 2 * Math.atan(1 / ee.projectionMatrix.elements[5]), ee.zoom = 1);
    }
    this.getCamera = function() {
      return w;
    }, this.getFoveation = function() {
      if (!(g === null && v === null))
        return h;
    }, this.setFoveation = function(ee) {
      h = ee, g !== null && (g.fixedFoveation = ee), v !== null && v.fixedFoveation !== void 0 && (v.fixedFoveation = ee);
    };
    let le = null;
    function oe(ee, ce) {
      if (p = ce.getViewerPose(f || l), x = ce, p !== null) {
        const be = p.views;
        v !== null && (e.setRenderTargetFramebuffer(y, v.framebuffer), e.setRenderTarget(y));
        let Ve = !1;
        be.length !== w.cameras.length && (w.cameras.length = 0, Ve = !0);
        for (let Ie = 0; Ie < be.length; Ie++) {
          const je = be[Ie];
          let st = null;
          if (v !== null)
            st = v.getViewport(je);
          else {
            const nt = m.getViewSubImage(g, je);
            st = nt.viewport, Ie === 0 && (e.setRenderTargetTextures(
              y,
              nt.colorTexture,
              g.ignoreDepthValues ? void 0 : nt.depthStencilTexture
            ), e.setRenderTarget(y));
          }
          let qe = H[Ie];
          qe === void 0 && (qe = new cn(), qe.layers.enable(Ie), qe.viewport = new It(), H[Ie] = qe), qe.matrix.fromArray(je.transform.matrix), qe.matrix.decompose(qe.position, qe.quaternion, qe.scale), qe.projectionMatrix.fromArray(je.projectionMatrix), qe.projectionMatrixInverse.copy(qe.projectionMatrix).invert(), qe.viewport.set(st.x, st.y, st.width, st.height), Ie === 0 && (w.matrix.copy(qe.matrix), w.matrix.decompose(w.position, w.quaternion, w.scale)), Ve === !0 && w.cameras.push(qe);
        }
      }
      for (let be = 0; be < T.length; be++) {
        const Ve = b[be], Ie = T[be];
        Ve !== null && Ie !== void 0 && Ie.update(Ve, ce, f || l);
      }
      le && le(ee, ce), ce.detectedPlanes && n.dispatchEvent({ type: "planesdetected", data: ce }), x = null;
    }
    const ge = new hx();
    ge.setAnimationLoop(oe), this.setAnimationLoop = function(ee) {
      le = ee;
    }, this.dispose = function() {
    };
  }
}
function zR(a, e) {
  function t(S, y) {
    S.matrixAutoUpdate === !0 && S.updateMatrix(), y.value.copy(S.matrix);
  }
  function n(S, y) {
    y.color.getRGB(S.fogColor.value, ox(a)), y.isFog ? (S.fogNear.value = y.near, S.fogFar.value = y.far) : y.isFogExp2 && (S.fogDensity.value = y.density);
  }
  function i(S, y, T, b, A) {
    y.isMeshBasicMaterial || y.isMeshLambertMaterial ? o(S, y) : y.isMeshToonMaterial ? (o(S, y), m(S, y)) : y.isMeshPhongMaterial ? (o(S, y), p(S, y)) : y.isMeshStandardMaterial ? (o(S, y), g(S, y), y.isMeshPhysicalMaterial && v(S, y, A)) : y.isMeshMatcapMaterial ? (o(S, y), x(S, y)) : y.isMeshDepthMaterial ? o(S, y) : y.isMeshDistanceMaterial ? (o(S, y), E(S, y)) : y.isMeshNormalMaterial ? o(S, y) : y.isLineBasicMaterial ? (l(S, y), y.isLineDashedMaterial && c(S, y)) : y.isPointsMaterial ? h(S, y, T, b) : y.isSpriteMaterial ? f(S, y) : y.isShadowMaterial ? (S.color.value.copy(y.color), S.opacity.value = y.opacity) : y.isShaderMaterial && (y.uniformsNeedUpdate = !1);
  }
  function o(S, y) {
    S.opacity.value = y.opacity, y.color && S.diffuse.value.copy(y.color), y.emissive && S.emissive.value.copy(y.emissive).multiplyScalar(y.emissiveIntensity), y.map && (S.map.value = y.map, t(y.map, S.mapTransform)), y.alphaMap && (S.alphaMap.value = y.alphaMap, t(y.alphaMap, S.alphaMapTransform)), y.bumpMap && (S.bumpMap.value = y.bumpMap, t(y.bumpMap, S.bumpMapTransform), S.bumpScale.value = y.bumpScale, y.side === Xn && (S.bumpScale.value *= -1)), y.normalMap && (S.normalMap.value = y.normalMap, t(y.normalMap, S.normalMapTransform), S.normalScale.value.copy(y.normalScale), y.side === Xn && S.normalScale.value.negate()), y.displacementMap && (S.displacementMap.value = y.displacementMap, t(y.displacementMap, S.displacementMapTransform), S.displacementScale.value = y.displacementScale, S.displacementBias.value = y.displacementBias), y.emissiveMap && (S.emissiveMap.value = y.emissiveMap, t(y.emissiveMap, S.emissiveMapTransform)), y.specularMap && (S.specularMap.value = y.specularMap, t(y.specularMap, S.specularMapTransform)), y.alphaTest > 0 && (S.alphaTest.value = y.alphaTest);
    const T = e.get(y).envMap;
    if (T && (S.envMap.value = T, S.flipEnvMap.value = T.isCubeTexture && T.isRenderTargetTexture === !1 ? -1 : 1, S.reflectivity.value = y.reflectivity, S.ior.value = y.ior, S.refractionRatio.value = y.refractionRatio), y.lightMap) {
      S.lightMap.value = y.lightMap;
      const b = a._useLegacyLights === !0 ? Math.PI : 1;
      S.lightMapIntensity.value = y.lightMapIntensity * b, t(y.lightMap, S.lightMapTransform);
    }
    y.aoMap && (S.aoMap.value = y.aoMap, S.aoMapIntensity.value = y.aoMapIntensity, t(y.aoMap, S.aoMapTransform));
  }
  function l(S, y) {
    S.diffuse.value.copy(y.color), S.opacity.value = y.opacity, y.map && (S.map.value = y.map, t(y.map, S.mapTransform));
  }
  function c(S, y) {
    S.dashSize.value = y.dashSize, S.totalSize.value = y.dashSize + y.gapSize, S.scale.value = y.scale;
  }
  function h(S, y, T, b) {
    S.diffuse.value.copy(y.color), S.opacity.value = y.opacity, S.size.value = y.size * T, S.scale.value = b * 0.5, y.map && (S.map.value = y.map, t(y.map, S.uvTransform)), y.alphaMap && (S.alphaMap.value = y.alphaMap, t(y.alphaMap, S.alphaMapTransform)), y.alphaTest > 0 && (S.alphaTest.value = y.alphaTest);
  }
  function f(S, y) {
    S.diffuse.value.copy(y.color), S.opacity.value = y.opacity, S.rotation.value = y.rotation, y.map && (S.map.value = y.map, t(y.map, S.mapTransform)), y.alphaMap && (S.alphaMap.value = y.alphaMap, t(y.alphaMap, S.alphaMapTransform)), y.alphaTest > 0 && (S.alphaTest.value = y.alphaTest);
  }
  function p(S, y) {
    S.specular.value.copy(y.specular), S.shininess.value = Math.max(y.shininess, 1e-4);
  }
  function m(S, y) {
    y.gradientMap && (S.gradientMap.value = y.gradientMap);
  }
  function g(S, y) {
    S.metalness.value = y.metalness, y.metalnessMap && (S.metalnessMap.value = y.metalnessMap, t(y.metalnessMap, S.metalnessMapTransform)), S.roughness.value = y.roughness, y.roughnessMap && (S.roughnessMap.value = y.roughnessMap, t(y.roughnessMap, S.roughnessMapTransform)), e.get(y).envMap && (S.envMapIntensity.value = y.envMapIntensity);
  }
  function v(S, y, T) {
    S.ior.value = y.ior, y.sheen > 0 && (S.sheenColor.value.copy(y.sheenColor).multiplyScalar(y.sheen), S.sheenRoughness.value = y.sheenRoughness, y.sheenColorMap && (S.sheenColorMap.value = y.sheenColorMap, t(y.sheenColorMap, S.sheenColorMapTransform)), y.sheenRoughnessMap && (S.sheenRoughnessMap.value = y.sheenRoughnessMap, t(y.sheenRoughnessMap, S.sheenRoughnessMapTransform))), y.clearcoat > 0 && (S.clearcoat.value = y.clearcoat, S.clearcoatRoughness.value = y.clearcoatRoughness, y.clearcoatMap && (S.clearcoatMap.value = y.clearcoatMap, t(y.clearcoatMap, S.clearcoatMapTransform)), y.clearcoatRoughnessMap && (S.clearcoatRoughnessMap.value = y.clearcoatRoughnessMap, t(y.clearcoatRoughnessMap, S.clearcoatRoughnessMapTransform)), y.clearcoatNormalMap && (S.clearcoatNormalMap.value = y.clearcoatNormalMap, t(y.clearcoatNormalMap, S.clearcoatNormalMapTransform), S.clearcoatNormalScale.value.copy(y.clearcoatNormalScale), y.side === Xn && S.clearcoatNormalScale.value.negate())), y.iridescence > 0 && (S.iridescence.value = y.iridescence, S.iridescenceIOR.value = y.iridescenceIOR, S.iridescenceThicknessMinimum.value = y.iridescenceThicknessRange[0], S.iridescenceThicknessMaximum.value = y.iridescenceThicknessRange[1], y.iridescenceMap && (S.iridescenceMap.value = y.iridescenceMap, t(y.iridescenceMap, S.iridescenceMapTransform)), y.iridescenceThicknessMap && (S.iridescenceThicknessMap.value = y.iridescenceThicknessMap, t(y.iridescenceThicknessMap, S.iridescenceThicknessMapTransform))), y.transmission > 0 && (S.transmission.value = y.transmission, S.transmissionSamplerMap.value = T.texture, S.transmissionSamplerSize.value.set(T.width, T.height), y.transmissionMap && (S.transmissionMap.value = y.transmissionMap, t(y.transmissionMap, S.transmissionMapTransform)), S.thickness.value = y.thickness, y.thicknessMap && (S.thicknessMap.value = y.thicknessMap, t(y.thicknessMap, S.thicknessMapTransform)), S.attenuationDistance.value = y.attenuationDistance, S.attenuationColor.value.copy(y.attenuationColor)), y.anisotropy > 0 && (S.anisotropyVector.value.set(y.anisotropy * Math.cos(y.anisotropyRotation), y.anisotropy * Math.sin(y.anisotropyRotation)), y.anisotropyMap && (S.anisotropyMap.value = y.anisotropyMap, t(y.anisotropyMap, S.anisotropyMapTransform))), S.specularIntensity.value = y.specularIntensity, S.specularColor.value.copy(y.specularColor), y.specularColorMap && (S.specularColorMap.value = y.specularColorMap, t(y.specularColorMap, S.specularColorMapTransform)), y.specularIntensityMap && (S.specularIntensityMap.value = y.specularIntensityMap, t(y.specularIntensityMap, S.specularIntensityMapTransform));
  }
  function x(S, y) {
    y.matcap && (S.matcap.value = y.matcap);
  }
  function E(S, y) {
    const T = e.get(y).light;
    S.referencePosition.value.setFromMatrixPosition(T.matrixWorld), S.nearDistance.value = T.shadow.camera.near, S.farDistance.value = T.shadow.camera.far;
  }
  return {
    refreshFogUniforms: n,
    refreshMaterialUniforms: i
  };
}
function BR(a, e, t, n) {
  let i = {}, o = {}, l = [];
  const c = t.isWebGL2 ? a.getParameter(a.MAX_UNIFORM_BUFFER_BINDINGS) : 0;
  function h(T, b) {
    const A = b.program;
    n.uniformBlockBinding(T, A);
  }
  function f(T, b) {
    let A = i[T.id];
    A === void 0 && (x(T), A = p(T), i[T.id] = A, T.addEventListener("dispose", S));
    const N = b.program;
    n.updateUBOMapping(T, N);
    const R = e.render.frame;
    o[T.id] !== R && (g(T), o[T.id] = R);
  }
  function p(T) {
    const b = m();
    T.__bindingPointIndex = b;
    const A = a.createBuffer(), N = T.__size, R = T.usage;
    return a.bindBuffer(a.UNIFORM_BUFFER, A), a.bufferData(a.UNIFORM_BUFFER, N, R), a.bindBuffer(a.UNIFORM_BUFFER, null), a.bindBufferBase(a.UNIFORM_BUFFER, b, A), A;
  }
  function m() {
    for (let T = 0; T < c; T++)
      if (l.indexOf(T) === -1)
        return l.push(T), T;
    return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."), 0;
  }
  function g(T) {
    const b = i[T.id], A = T.uniforms, N = T.__cache;
    a.bindBuffer(a.UNIFORM_BUFFER, b);
    for (let R = 0, P = A.length; R < P; R++) {
      const H = Array.isArray(A[R]) ? A[R] : [A[R]];
      for (let w = 0, C = H.length; w < C; w++) {
        const X = H[w];
        if (v(X, R, w, N) === !0) {
          const ne = X.__offset, ae = Array.isArray(X.value) ? X.value : [X.value];
          let z = 0;
          for (let q = 0; q < ae.length; q++) {
            const W = ae[q], Q = E(W);
            typeof W == "number" || typeof W == "boolean" ? (X.__data[0] = W, a.bufferSubData(a.UNIFORM_BUFFER, ne + z, X.__data)) : W.isMatrix3 ? (X.__data[0] = W.elements[0], X.__data[1] = W.elements[1], X.__data[2] = W.elements[2], X.__data[3] = 0, X.__data[4] = W.elements[3], X.__data[5] = W.elements[4], X.__data[6] = W.elements[5], X.__data[7] = 0, X.__data[8] = W.elements[6], X.__data[9] = W.elements[7], X.__data[10] = W.elements[8], X.__data[11] = 0) : (W.toArray(X.__data, z), z += Q.storage / Float32Array.BYTES_PER_ELEMENT);
          }
          a.bufferSubData(a.UNIFORM_BUFFER, ne, X.__data);
        }
      }
    }
    a.bindBuffer(a.UNIFORM_BUFFER, null);
  }
  function v(T, b, A, N) {
    const R = T.value, P = b + "_" + A;
    if (N[P] === void 0)
      return typeof R == "number" || typeof R == "boolean" ? N[P] = R : N[P] = R.clone(), !0;
    {
      const H = N[P];
      if (typeof R == "number" || typeof R == "boolean") {
        if (H !== R)
          return N[P] = R, !0;
      } else if (H.equals(R) === !1)
        return H.copy(R), !0;
    }
    return !1;
  }
  function x(T) {
    const b = T.uniforms;
    let A = 0;
    const N = 16;
    for (let P = 0, H = b.length; P < H; P++) {
      const w = Array.isArray(b[P]) ? b[P] : [b[P]];
      for (let C = 0, X = w.length; C < X; C++) {
        const ne = w[C], ae = Array.isArray(ne.value) ? ne.value : [ne.value];
        for (let z = 0, q = ae.length; z < q; z++) {
          const W = ae[z], Q = E(W), Z = A % N;
          Z !== 0 && N - Z < Q.boundary && (A += N - Z), ne.__data = new Float32Array(Q.storage / Float32Array.BYTES_PER_ELEMENT), ne.__offset = A, A += Q.storage;
        }
      }
    }
    const R = A % N;
    return R > 0 && (A += N - R), T.__size = A, T.__cache = {}, this;
  }
  function E(T) {
    const b = {
      boundary: 0,
      // bytes
      storage: 0
      // bytes
    };
    return typeof T == "number" || typeof T == "boolean" ? (b.boundary = 4, b.storage = 4) : T.isVector2 ? (b.boundary = 8, b.storage = 8) : T.isVector3 || T.isColor ? (b.boundary = 16, b.storage = 12) : T.isVector4 ? (b.boundary = 16, b.storage = 16) : T.isMatrix3 ? (b.boundary = 48, b.storage = 48) : T.isMatrix4 ? (b.boundary = 64, b.storage = 64) : T.isTexture ? console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.") : console.warn("THREE.WebGLRenderer: Unsupported uniform value type.", T), b;
  }
  function S(T) {
    const b = T.target;
    b.removeEventListener("dispose", S);
    const A = l.indexOf(b.__bindingPointIndex);
    l.splice(A, 1), a.deleteBuffer(i[b.id]), delete i[b.id], delete o[b.id];
  }
  function y() {
    for (const T in i)
      a.deleteBuffer(i[T]);
    l = [], i = {}, o = {};
  }
  return {
    bind: h,
    update: f,
    dispose: y
  };
}
class xm {
  constructor(e = {}) {
    const {
      canvas: t = sx(),
      context: n = null,
      depth: i = !0,
      stencil: o = !0,
      alpha: l = !1,
      antialias: c = !1,
      premultipliedAlpha: h = !0,
      preserveDrawingBuffer: f = !1,
      powerPreference: p = "default",
      failIfMajorPerformanceCaveat: m = !1
    } = e;
    this.isWebGLRenderer = !0;
    let g;
    n !== null ? g = n.getContextAttributes().alpha : g = l;
    const v = new Uint32Array(4), x = new Int32Array(4);
    let E = null, S = null;
    const y = [], T = [];
    this.domElement = t, this.debug = {
      /**
       * Enables error checking and reporting when shader programs are being compiled
       * @type {boolean}
       */
      checkShaderErrors: !0,
      /**
       * Callback for custom error reporting.
       * @type {?Function}
       */
      onShaderError: null
    }, this.autoClear = !0, this.autoClearColor = !0, this.autoClearDepth = !0, this.autoClearStencil = !0, this.sortObjects = !0, this.clippingPlanes = [], this.localClippingEnabled = !1, this._outputColorSpace = nn, this._useLegacyLights = !1, this.toneMapping = Ji, this.toneMappingExposure = 1;
    const b = this;
    let A = !1, N = 0, R = 0, P = null, H = -1, w = null;
    const C = new It(), X = new It();
    let ne = null;
    const ae = new Fe(0);
    let z = 0, q = t.width, W = t.height, Q = 1, Z = null, K = null;
    const le = new It(0, 0, q, W), oe = new It(0, 0, q, W);
    let ge = !1;
    const ee = new jl();
    let ce = !1, be = !1, Ve = null;
    const Ie = new rt(), je = new de(), st = new I(), qe = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: !0 };
    function nt() {
      return P === null ? Q : 1;
    }
    let F = n;
    function Ee(O, J) {
      for (let ie = 0; ie < O.length; ie++) {
        const re = O[ie], te = t.getContext(re, J);
        if (te !== null) return te;
      }
      return null;
    }
    try {
      const O = {
        alpha: !0,
        depth: i,
        stencil: o,
        antialias: c,
        premultipliedAlpha: h,
        preserveDrawingBuffer: f,
        powerPreference: p,
        failIfMajorPerformanceCaveat: m
      };
      if ("setAttribute" in t && t.setAttribute("data-engine", `three.js r${eh}`), t.addEventListener("webglcontextlost", xe, !1), t.addEventListener("webglcontextrestored", G, !1), t.addEventListener("webglcontextcreationerror", Ae, !1), F === null) {
        const J = ["webgl2", "webgl", "experimental-webgl"];
        if (b.isWebGL1Renderer === !0 && J.shift(), F = Ee(J, O), F === null)
          throw Ee(J) ? new Error("Error creating WebGL context with your selected attributes.") : new Error("Error creating WebGL context.");
      }
      typeof WebGLRenderingContext < "u" && F instanceof WebGLRenderingContext && console.warn("THREE.WebGLRenderer: WebGL 1 support was deprecated in r153 and will be removed in r163."), F.getShaderPrecisionFormat === void 0 && (F.getShaderPrecisionFormat = function() {
        return { rangeMin: 1, rangeMax: 1, precision: 1 };
      });
    } catch (O) {
      throw console.error("THREE.WebGLRenderer: " + O.message), O;
    }
    let ue, Se, he, Ge, Ne, D, L, j, _e, ve, me, We, Le, ze, Ze, ot, ye, Mt, ht, Je, Xe, Be, V, pe;
    function De() {
      ue = new QA(F), Se = new qA(F, ue, e), ue.init(Se), Be = new vx(F, ue, Se), he = new DR(F, ue, Se), Ge = new tw(F), Ne = new SR(), D = new PR(F, ue, he, Ne, Se, Be, Ge), L = new jA(b), j = new JA(b), _e = new c1(F, Se), V = new XA(F, ue, _e, Se), ve = new $A(F, _e, Ge, V), me = new aw(F, ve, _e, Ge), ht = new sw(F, Se, D), ot = new YA(Ne), We = new xR(b, L, j, ue, Se, V, ot), Le = new zR(b, Ne), ze = new ER(), Ze = new CR(ue, Se), Mt = new WA(b, L, j, he, me, g, h), ye = new NR(b, me, Se), pe = new BR(F, Ge, Se, he), Je = new kA(F, ue, Ge, Se), Xe = new ew(F, ue, Ge, Se), Ge.programs = We.programs, b.capabilities = Se, b.extensions = ue, b.properties = Ne, b.renderLists = ze, b.shadowMap = ye, b.state = he, b.info = Ge;
    }
    De();
    const Pe = new IR(b, F);
    this.xr = Pe, this.getContext = function() {
      return F;
    }, this.getContextAttributes = function() {
      return F.getContextAttributes();
    }, this.forceContextLoss = function() {
      const O = ue.get("WEBGL_lose_context");
      O && O.loseContext();
    }, this.forceContextRestore = function() {
      const O = ue.get("WEBGL_lose_context");
      O && O.restoreContext();
    }, this.getPixelRatio = function() {
      return Q;
    }, this.setPixelRatio = function(O) {
      O !== void 0 && (Q = O, this.setSize(q, W, !1));
    }, this.getSize = function(O) {
      return O.set(q, W);
    }, this.setSize = function(O, J, ie = !0) {
      if (Pe.isPresenting) {
        console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");
        return;
      }
      q = O, W = J, t.width = Math.floor(O * Q), t.height = Math.floor(J * Q), ie === !0 && (t.style.width = O + "px", t.style.height = J + "px"), this.setViewport(0, 0, O, J);
    }, this.getDrawingBufferSize = function(O) {
      return O.set(q * Q, W * Q).floor();
    }, this.setDrawingBufferSize = function(O, J, ie) {
      q = O, W = J, Q = ie, t.width = Math.floor(O * ie), t.height = Math.floor(J * ie), this.setViewport(0, 0, O, J);
    }, this.getCurrentViewport = function(O) {
      return O.copy(C);
    }, this.getViewport = function(O) {
      return O.copy(le);
    }, this.setViewport = function(O, J, ie, re) {
      O.isVector4 ? le.set(O.x, O.y, O.z, O.w) : le.set(O, J, ie, re), he.viewport(C.copy(le).multiplyScalar(Q).floor());
    }, this.getScissor = function(O) {
      return O.copy(oe);
    }, this.setScissor = function(O, J, ie, re) {
      O.isVector4 ? oe.set(O.x, O.y, O.z, O.w) : oe.set(O, J, ie, re), he.scissor(X.copy(oe).multiplyScalar(Q).floor());
    }, this.getScissorTest = function() {
      return ge;
    }, this.setScissorTest = function(O) {
      he.setScissorTest(ge = O);
    }, this.setOpaqueSort = function(O) {
      Z = O;
    }, this.setTransparentSort = function(O) {
      K = O;
    }, this.getClearColor = function(O) {
      return O.copy(Mt.getClearColor());
    }, this.setClearColor = function() {
      Mt.setClearColor.apply(Mt, arguments);
    }, this.getClearAlpha = function() {
      return Mt.getClearAlpha();
    }, this.setClearAlpha = function() {
      Mt.setClearAlpha.apply(Mt, arguments);
    }, this.clear = function(O = !0, J = !0, ie = !0) {
      let re = 0;
      if (O) {
        let te = !1;
        if (P !== null) {
          const we = P.texture.format;
          te = we === rm || we === am || we === sm;
        }
        if (te) {
          const we = P.texture.type, Ue = we === Qi || we === Ms || we === ih || we === ea || we === nm || we === im, Qe = Mt.getClearColor(), it = Mt.getClearAlpha(), ft = Qe.r, et = Qe.g, lt = Qe.b;
          Ue ? (v[0] = ft, v[1] = et, v[2] = lt, v[3] = it, F.clearBufferuiv(F.COLOR, 0, v)) : (x[0] = ft, x[1] = et, x[2] = lt, x[3] = it, F.clearBufferiv(F.COLOR, 0, x));
        } else
          re |= F.COLOR_BUFFER_BIT;
      }
      J && (re |= F.DEPTH_BUFFER_BIT), ie && (re |= F.STENCIL_BUFFER_BIT, this.state.buffers.stencil.setMask(4294967295)), F.clear(re);
    }, this.clearColor = function() {
      this.clear(!0, !1, !1);
    }, this.clearDepth = function() {
      this.clear(!1, !0, !1);
    }, this.clearStencil = function() {
      this.clear(!1, !1, !0);
    }, this.dispose = function() {
      t.removeEventListener("webglcontextlost", xe, !1), t.removeEventListener("webglcontextrestored", G, !1), t.removeEventListener("webglcontextcreationerror", Ae, !1), ze.dispose(), Ze.dispose(), Ne.dispose(), L.dispose(), j.dispose(), me.dispose(), V.dispose(), pe.dispose(), We.dispose(), Pe.dispose(), Pe.removeEventListener("sessionstart", Yt), Pe.removeEventListener("sessionend", At), Ve && (Ve.dispose(), Ve = null), yn.stop();
    };
    function xe(O) {
      O.preventDefault(), console.log("THREE.WebGLRenderer: Context Lost."), A = !0;
    }
    function G() {
      console.log("THREE.WebGLRenderer: Context Restored."), A = !1;
      const O = Ge.autoReset, J = ye.enabled, ie = ye.autoUpdate, re = ye.needsUpdate, te = ye.type;
      De(), Ge.autoReset = O, ye.enabled = J, ye.autoUpdate = ie, ye.needsUpdate = re, ye.type = te;
    }
    function Ae(O) {
      console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ", O.statusMessage);
    }
    function Ce(O) {
      const J = O.target;
      J.removeEventListener("dispose", Ce), $e(J);
    }
    function $e(O) {
      ke(O), Ne.remove(O);
    }
    function ke(O) {
      const J = Ne.get(O).programs;
      J !== void 0 && (J.forEach(function(ie) {
        We.releaseProgram(ie);
      }), O.isShaderMaterial && We.releaseShaderCache(O));
    }
    this.renderBufferDirect = function(O, J, ie, re, te, we) {
      J === null && (J = qe);
      const Ue = te.isMesh && te.matrixWorld.determinant() < 0, Qe = Co(O, J, ie, re, te);
      he.setMaterial(re, Ue);
      let it = ie.index, ft = 1;
      if (re.wireframe === !0) {
        if (it = ve.getWireframeAttribute(ie), it === void 0) return;
        ft = 2;
      }
      const et = ie.drawRange, lt = ie.attributes.position;
      let Xt = et.start * ft, bn = (et.start + et.count) * ft;
      we !== null && (Xt = Math.max(Xt, we.start * ft), bn = Math.min(bn, (we.start + we.count) * ft)), it !== null ? (Xt = Math.max(Xt, 0), bn = Math.min(bn, it.count)) : lt != null && (Xt = Math.max(Xt, 0), bn = Math.min(bn, lt.count));
      const an = bn - Xt;
      if (an < 0 || an === 1 / 0) return;
      V.setup(te, re, Qe, ie, it);
      let gi, Ft = Je;
      if (it !== null && (gi = _e.get(it), Ft = Xe, Ft.setIndex(gi)), te.isMesh)
        re.wireframe === !0 ? (he.setLineWidth(re.wireframeLinewidth * nt()), Ft.setMode(F.LINES)) : Ft.setMode(F.TRIANGLES);
      else if (te.isLine) {
        let gt = re.linewidth;
        gt === void 0 && (gt = 1), he.setLineWidth(gt * nt()), te.isLineSegments ? Ft.setMode(F.LINES) : te.isLineLoop ? Ft.setMode(F.LINE_LOOP) : Ft.setMode(F.LINE_STRIP);
      } else te.isPoints ? Ft.setMode(F.POINTS) : te.isSprite && Ft.setMode(F.TRIANGLES);
      if (te.isBatchedMesh)
        Ft.renderMultiDraw(te._multiDrawStarts, te._multiDrawCounts, te._multiDrawCount);
      else if (te.isInstancedMesh)
        Ft.renderInstances(Xt, an, te.count);
      else if (ie.isInstancedBufferGeometry) {
        const gt = ie._maxInstanceCount !== void 0 ? ie._maxInstanceCount : 1 / 0, hr = Math.min(ie.instanceCount, gt);
        Ft.renderInstances(Xt, an, hr);
      } else
        Ft.render(Xt, an);
    };
    function mt(O, J, ie) {
      O.transparent === !0 && O.side === Ai && O.forceSinglePass === !1 ? (O.side = Xn, O.needsUpdate = !0, jn(O, J, ie), O.side = As, O.needsUpdate = !0, jn(O, J, ie), O.side = Ai) : jn(O, J, ie);
    }
    this.compile = function(O, J, ie = null) {
      ie === null && (ie = O), S = Ze.get(ie), S.init(), T.push(S), ie.traverseVisible(function(te) {
        te.isLight && te.layers.test(J.layers) && (S.pushLight(te), te.castShadow && S.pushShadow(te));
      }), O !== ie && O.traverseVisible(function(te) {
        te.isLight && te.layers.test(J.layers) && (S.pushLight(te), te.castShadow && S.pushShadow(te));
      }), S.setupLights(b._useLegacyLights);
      const re = /* @__PURE__ */ new Set();
      return O.traverse(function(te) {
        const we = te.material;
        if (we)
          if (Array.isArray(we))
            for (let Ue = 0; Ue < we.length; Ue++) {
              const Qe = we[Ue];
              mt(Qe, ie, te), re.add(Qe);
            }
          else
            mt(we, ie, te), re.add(we);
      }), T.pop(), S = null, re;
    }, this.compileAsync = function(O, J, ie = null) {
      const re = this.compile(O, J, ie);
      return new Promise((te) => {
        function we() {
          if (re.forEach(function(Ue) {
            Ne.get(Ue).currentProgram.isReady() && re.delete(Ue);
          }), re.size === 0) {
            te(O);
            return;
          }
          setTimeout(we, 10);
        }
        ue.get("KHR_parallel_shader_compile") !== null ? we() : setTimeout(we, 10);
      });
    };
    let Et = null;
    function Pt(O) {
      Et && Et(O);
    }
    function Yt() {
      yn.stop();
    }
    function At() {
      yn.start();
    }
    const yn = new hx();
    yn.setAnimationLoop(Pt), typeof self < "u" && yn.setContext(self), this.setAnimationLoop = function(O) {
      Et = O, Pe.setAnimationLoop(O), O === null ? yn.stop() : yn.start();
    }, Pe.addEventListener("sessionstart", Yt), Pe.addEventListener("sessionend", At), this.render = function(O, J) {
      if (J !== void 0 && J.isCamera !== !0) {
        console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
        return;
      }
      if (A === !0) return;
      O.matrixWorldAutoUpdate === !0 && O.updateMatrixWorld(), J.parent === null && J.matrixWorldAutoUpdate === !0 && J.updateMatrixWorld(), Pe.enabled === !0 && Pe.isPresenting === !0 && (Pe.cameraAutoUpdate === !0 && Pe.updateCamera(J), J = Pe.getCamera()), O.isScene === !0 && O.onBeforeRender(b, O, J, P), S = Ze.get(O, T.length), S.init(), T.push(S), Ie.multiplyMatrices(J.projectionMatrix, J.matrixWorldInverse), ee.setFromProjectionMatrix(Ie), be = this.localClippingEnabled, ce = ot.init(this.clippingPlanes, be), E = ze.get(O, y.length), E.init(), y.push(E), Yn(O, J, 0, b.sortObjects), E.finish(), b.sortObjects === !0 && E.sort(Z, K), this.info.render.frame++, ce === !0 && ot.beginShadows();
      const ie = S.state.shadowsArray;
      if (ye.render(ie, O, J), ce === !0 && ot.endShadows(), this.info.autoReset === !0 && this.info.reset(), Mt.render(E, O), S.setupLights(b._useLegacyLights), J.isArrayCamera) {
        const re = J.cameras;
        for (let te = 0, we = re.length; te < we; te++) {
          const Ue = re[te];
          ur(E, O, Ue, Ue.viewport);
        }
      } else
        ur(E, O, J);
      P !== null && (D.updateMultisampleRenderTarget(P), D.updateRenderTargetMipmap(P)), O.isScene === !0 && O.onAfterRender(b, O, J), V.resetDefaultState(), H = -1, w = null, T.pop(), T.length > 0 ? S = T[T.length - 1] : S = null, y.pop(), y.length > 0 ? E = y[y.length - 1] : E = null;
    };
    function Yn(O, J, ie, re) {
      if (O.visible === !1) return;
      if (O.layers.test(J.layers)) {
        if (O.isGroup)
          ie = O.renderOrder;
        else if (O.isLOD)
          O.autoUpdate === !0 && O.update(J);
        else if (O.isLight)
          S.pushLight(O), O.castShadow && S.pushShadow(O);
        else if (O.isSprite) {
          if (!O.frustumCulled || ee.intersectsSprite(O)) {
            re && st.setFromMatrixPosition(O.matrixWorld).applyMatrix4(Ie);
            const Ue = me.update(O), Qe = O.material;
            Qe.visible && E.push(O, Ue, Qe, ie, st.z, null);
          }
        } else if ((O.isMesh || O.isLine || O.isPoints) && (!O.frustumCulled || ee.intersectsObject(O))) {
          const Ue = me.update(O), Qe = O.material;
          if (re && (O.boundingSphere !== void 0 ? (O.boundingSphere === null && O.computeBoundingSphere(), st.copy(O.boundingSphere.center)) : (Ue.boundingSphere === null && Ue.computeBoundingSphere(), st.copy(Ue.boundingSphere.center)), st.applyMatrix4(O.matrixWorld).applyMatrix4(Ie)), Array.isArray(Qe)) {
            const it = Ue.groups;
            for (let ft = 0, et = it.length; ft < et; ft++) {
              const lt = it[ft], Xt = Qe[lt.materialIndex];
              Xt && Xt.visible && E.push(O, Ue, Xt, ie, st.z, lt);
            }
          } else Qe.visible && E.push(O, Ue, Qe, ie, st.z, null);
        }
      }
      const we = O.children;
      for (let Ue = 0, Qe = we.length; Ue < Qe; Ue++)
        Yn(we[Ue], J, ie, re);
    }
    function ur(O, J, ie, re) {
      const te = O.opaque, we = O.transmissive, Ue = O.transparent;
      S.setupLightsView(ie), ce === !0 && ot.setGlobalState(b.clippingPlanes, ie), we.length > 0 && ki(te, we, J, ie), re && he.viewport(C.copy(re)), te.length > 0 && ua(te, J, ie), we.length > 0 && ua(we, J, ie), Ue.length > 0 && ua(Ue, J, ie), he.buffers.depth.setTest(!0), he.buffers.depth.setMask(!0), he.buffers.color.setMask(!0), he.setPolygonOffset(!1);
    }
    function ki(O, J, ie, re) {
      if ((ie.isScene === !0 ? ie.overrideMaterial : null) !== null)
        return;
      const we = Se.isWebGL2;
      Ve === null && (Ve = new wi(1, 1, {
        generateMipmaps: !0,
        type: ue.has("EXT_color_buffer_half_float") ? go : Qi,
        minFilter: sa,
        samples: we ? 4 : 0
      })), b.getDrawingBufferSize(je), we ? Ve.setSize(je.x, je.y) : Ve.setSize(qu(je.x), qu(je.y));
      const Ue = b.getRenderTarget();
      b.setRenderTarget(Ve), b.getClearColor(ae), z = b.getClearAlpha(), z < 1 && b.setClearColor(16777215, 0.5), b.clear();
      const Qe = b.toneMapping;
      b.toneMapping = Ji, ua(O, ie, re), D.updateMultisampleRenderTarget(Ve), D.updateRenderTargetMipmap(Ve);
      let it = !1;
      for (let ft = 0, et = J.length; ft < et; ft++) {
        const lt = J[ft], Xt = lt.object, bn = lt.geometry, an = lt.material, gi = lt.group;
        if (an.side === Ai && Xt.layers.test(re.layers)) {
          const Ft = an.side;
          an.side = Xn, an.needsUpdate = !0, Ri(Xt, ie, re, bn, an, gi), an.side = Ft, an.needsUpdate = !0, it = !0;
        }
      }
      it === !0 && (D.updateMultisampleRenderTarget(Ve), D.updateRenderTargetMipmap(Ve)), b.setRenderTarget(Ue), b.setClearColor(ae, z), b.toneMapping = Qe;
    }
    function ua(O, J, ie) {
      const re = J.isScene === !0 ? J.overrideMaterial : null;
      for (let te = 0, we = O.length; te < we; te++) {
        const Ue = O[te], Qe = Ue.object, it = Ue.geometry, ft = re === null ? Ue.material : re, et = Ue.group;
        Qe.layers.test(ie.layers) && Ri(Qe, J, ie, it, ft, et);
      }
    }
    function Ri(O, J, ie, re, te, we) {
      O.onBeforeRender(b, J, ie, re, te, we), O.modelViewMatrix.multiplyMatrices(ie.matrixWorldInverse, O.matrixWorld), O.normalMatrix.getNormalMatrix(O.modelViewMatrix), te.onBeforeRender(b, J, ie, re, O, we), te.transparent === !0 && te.side === Ai && te.forceSinglePass === !1 ? (te.side = Xn, te.needsUpdate = !0, b.renderBufferDirect(ie, J, re, te, O, we), te.side = As, te.needsUpdate = !0, b.renderBufferDirect(ie, J, re, te, O, we), te.side = Ai) : b.renderBufferDirect(ie, J, re, te, O, we), O.onAfterRender(b, J, ie, re, te, we);
    }
    function jn(O, J, ie) {
      J.isScene !== !0 && (J = qe);
      const re = Ne.get(O), te = S.state.lights, we = S.state.shadowsArray, Ue = te.state.version, Qe = We.getParameters(O, te.state, we, J, ie), it = We.getProgramCacheKey(Qe);
      let ft = re.programs;
      re.environment = O.isMeshStandardMaterial ? J.environment : null, re.fog = J.fog, re.envMap = (O.isMeshStandardMaterial ? j : L).get(O.envMap || re.environment), ft === void 0 && (O.addEventListener("dispose", Ce), ft = /* @__PURE__ */ new Map(), re.programs = ft);
      let et = ft.get(it);
      if (et !== void 0) {
        if (re.currentProgram === et && re.lightsStateVersion === Ue)
          return jt(O, Qe), et;
      } else
        Qe.uniforms = We.getUniforms(O), O.onBuild(ie, Qe, b), O.onBeforeCompile(Qe, b), et = We.acquireProgram(Qe, it), ft.set(it, et), re.uniforms = Qe.uniforms;
      const lt = re.uniforms;
      return (!O.isShaderMaterial && !O.isRawShaderMaterial || O.clipping === !0) && (lt.clippingPlanes = ot.uniform), jt(O, Qe), re.needsLights = ec(O), re.lightsStateVersion = Ue, re.needsLights && (lt.ambientLightColor.value = te.state.ambient, lt.lightProbe.value = te.state.probe, lt.directionalLights.value = te.state.directional, lt.directionalLightShadows.value = te.state.directionalShadow, lt.spotLights.value = te.state.spot, lt.spotLightShadows.value = te.state.spotShadow, lt.rectAreaLights.value = te.state.rectArea, lt.ltc_1.value = te.state.rectAreaLTC1, lt.ltc_2.value = te.state.rectAreaLTC2, lt.pointLights.value = te.state.point, lt.pointLightShadows.value = te.state.pointShadow, lt.hemisphereLights.value = te.state.hemi, lt.directionalShadowMap.value = te.state.directionalShadowMap, lt.directionalShadowMatrix.value = te.state.directionalShadowMatrix, lt.spotShadowMap.value = te.state.spotShadowMap, lt.spotLightMatrix.value = te.state.spotLightMatrix, lt.spotLightMap.value = te.state.spotLightMap, lt.pointShadowMap.value = te.state.pointShadowMap, lt.pointShadowMatrix.value = te.state.pointShadowMatrix), re.currentProgram = et, re.uniformsList = null, et;
    }
    function ha(O) {
      if (O.uniformsList === null) {
        const J = O.currentProgram.getUniforms();
        O.uniformsList = Fu.seqWithValue(J.seq, O.uniforms);
      }
      return O.uniformsList;
    }
    function jt(O, J) {
      const ie = Ne.get(O);
      ie.outputColorSpace = J.outputColorSpace, ie.batching = J.batching, ie.instancing = J.instancing, ie.instancingColor = J.instancingColor, ie.skinning = J.skinning, ie.morphTargets = J.morphTargets, ie.morphNormals = J.morphNormals, ie.morphColors = J.morphColors, ie.morphTargetsCount = J.morphTargetsCount, ie.numClippingPlanes = J.numClippingPlanes, ie.numIntersection = J.numClipIntersection, ie.vertexAlphas = J.vertexAlphas, ie.vertexTangents = J.vertexTangents, ie.toneMapping = J.toneMapping;
    }
    function Co(O, J, ie, re, te) {
      J.isScene !== !0 && (J = qe), D.resetTextureUnits();
      const we = J.fog, Ue = re.isMeshStandardMaterial ? J.environment : null, Qe = P === null ? b.outputColorSpace : P.isXRRenderTarget === !0 ? P.texture.colorSpace : Vi, it = (re.isMeshStandardMaterial ? j : L).get(re.envMap || Ue), ft = re.vertexColors === !0 && !!ie.attributes.color && ie.attributes.color.itemSize === 4, et = !!ie.attributes.tangent && (!!re.normalMap || re.anisotropy > 0), lt = !!ie.morphAttributes.position, Xt = !!ie.morphAttributes.normal, bn = !!ie.morphAttributes.color;
      let an = Ji;
      re.toneMapped && (P === null || P.isXRRenderTarget === !0) && (an = b.toneMapping);
      const gi = ie.morphAttributes.position || ie.morphAttributes.normal || ie.morphAttributes.color, Ft = gi !== void 0 ? gi.length : 0, gt = Ne.get(re), hr = S.state.lights;
      if (ce === !0 && (be === !0 || O !== w)) {
        const Bn = O === w && re.id === H;
        ot.setState(re, O, Bn);
      }
      let kt = !1;
      re.version === gt.__version ? (gt.needsLights && gt.lightsStateVersion !== hr.state.version || gt.outputColorSpace !== Qe || te.isBatchedMesh && gt.batching === !1 || !te.isBatchedMesh && gt.batching === !0 || te.isInstancedMesh && gt.instancing === !1 || !te.isInstancedMesh && gt.instancing === !0 || te.isSkinnedMesh && gt.skinning === !1 || !te.isSkinnedMesh && gt.skinning === !0 || te.isInstancedMesh && gt.instancingColor === !0 && te.instanceColor === null || te.isInstancedMesh && gt.instancingColor === !1 && te.instanceColor !== null || gt.envMap !== it || re.fog === !0 && gt.fog !== we || gt.numClippingPlanes !== void 0 && (gt.numClippingPlanes !== ot.numPlanes || gt.numIntersection !== ot.numIntersection) || gt.vertexAlphas !== ft || gt.vertexTangents !== et || gt.morphTargets !== lt || gt.morphNormals !== Xt || gt.morphColors !== bn || gt.toneMapping !== an || Se.isWebGL2 === !0 && gt.morphTargetsCount !== Ft) && (kt = !0) : (kt = !0, gt.__version = re.version);
      let Ci = gt.currentProgram;
      kt === !0 && (Ci = jn(re, J, te));
      let Uo = !1, fa = !1, fr = !1;
      const mn = Ci.getUniforms(), qi = gt.uniforms;
      if (he.useProgram(Ci.program) && (Uo = !0, fa = !0, fr = !0), re.id !== H && (H = re.id, fa = !0), Uo || w !== O) {
        mn.setValue(F, "projectionMatrix", O.projectionMatrix), mn.setValue(F, "viewMatrix", O.matrixWorldInverse);
        const Bn = mn.map.cameraPosition;
        Bn !== void 0 && Bn.setValue(F, st.setFromMatrixPosition(O.matrixWorld)), Se.logarithmicDepthBuffer && mn.setValue(
          F,
          "logDepthBufFC",
          2 / (Math.log(O.far + 1) / Math.LN2)
        ), (re.isMeshPhongMaterial || re.isMeshToonMaterial || re.isMeshLambertMaterial || re.isMeshBasicMaterial || re.isMeshStandardMaterial || re.isShaderMaterial) && mn.setValue(F, "isOrthographic", O.isOrthographicCamera === !0), w !== O && (w = O, fa = !0, fr = !0);
      }
      if (te.isSkinnedMesh) {
        mn.setOptional(F, te, "bindMatrix"), mn.setOptional(F, te, "bindMatrixInverse");
        const Bn = te.skeleton;
        Bn && (Se.floatVertexTextures ? (Bn.boneTexture === null && Bn.computeBoneTexture(), mn.setValue(F, "boneTexture", Bn.boneTexture, D)) : console.warn("THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required."));
      }
      te.isBatchedMesh && (mn.setOptional(F, te, "batchingTexture"), mn.setValue(F, "batchingTexture", te._matricesTexture, D));
      const da = ie.morphAttributes;
      if ((da.position !== void 0 || da.normal !== void 0 || da.color !== void 0 && Se.isWebGL2 === !0) && ht.update(te, ie, Ci), (fa || gt.receiveShadow !== te.receiveShadow) && (gt.receiveShadow = te.receiveShadow, mn.setValue(F, "receiveShadow", te.receiveShadow)), re.isMeshGouraudMaterial && re.envMap !== null && (qi.envMap.value = it, qi.flipEnvMap.value = it.isCubeTexture && it.isRenderTargetTexture === !1 ? -1 : 1), fa && (mn.setValue(F, "toneMappingExposure", b.toneMappingExposure), gt.needsLights && Lo(qi, fr), we && re.fog === !0 && Le.refreshFogUniforms(qi, we), Le.refreshMaterialUniforms(qi, re, Q, W, Ve), Fu.upload(F, ha(gt), qi, D)), re.isShaderMaterial && re.uniformsNeedUpdate === !0 && (Fu.upload(F, ha(gt), qi, D), re.uniformsNeedUpdate = !1), re.isSpriteMaterial && mn.setValue(F, "center", te.center), mn.setValue(F, "modelViewMatrix", te.modelViewMatrix), mn.setValue(F, "normalMatrix", te.normalMatrix), mn.setValue(F, "modelMatrix", te.matrixWorld), re.isShaderMaterial || re.isRawShaderMaterial) {
        const Bn = re.uniformsGroups;
        for (let dr = 0, tc = Bn.length; dr < tc; dr++)
          if (Se.isWebGL2) {
            const No = Bn[dr];
            pe.update(No, Ci), pe.bind(No, Ci);
          } else
            console.warn("THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.");
      }
      return Ci;
    }
    function Lo(O, J) {
      O.ambientLightColor.needsUpdate = J, O.lightProbe.needsUpdate = J, O.directionalLights.needsUpdate = J, O.directionalLightShadows.needsUpdate = J, O.pointLights.needsUpdate = J, O.pointLightShadows.needsUpdate = J, O.spotLights.needsUpdate = J, O.spotLightShadows.needsUpdate = J, O.rectAreaLights.needsUpdate = J, O.hemisphereLights.needsUpdate = J;
    }
    function ec(O) {
      return O.isMeshLambertMaterial || O.isMeshToonMaterial || O.isMeshPhongMaterial || O.isMeshStandardMaterial || O.isShadowMaterial || O.isShaderMaterial && O.lights === !0;
    }
    this.getActiveCubeFace = function() {
      return N;
    }, this.getActiveMipmapLevel = function() {
      return R;
    }, this.getRenderTarget = function() {
      return P;
    }, this.setRenderTargetTextures = function(O, J, ie) {
      Ne.get(O.texture).__webglTexture = J, Ne.get(O.depthTexture).__webglTexture = ie;
      const re = Ne.get(O);
      re.__hasExternalTextures = !0, re.__hasExternalTextures && (re.__autoAllocateDepthBuffer = ie === void 0, re.__autoAllocateDepthBuffer || ue.has("WEBGL_multisampled_render_to_texture") === !0 && (console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"), re.__useRenderToTexture = !1));
    }, this.setRenderTargetFramebuffer = function(O, J) {
      const ie = Ne.get(O);
      ie.__webglFramebuffer = J, ie.__useDefaultFramebuffer = J === void 0;
    }, this.setRenderTarget = function(O, J = 0, ie = 0) {
      P = O, N = J, R = ie;
      let re = !0, te = null, we = !1, Ue = !1;
      if (O) {
        const it = Ne.get(O);
        it.__useDefaultFramebuffer !== void 0 ? (he.bindFramebuffer(F.FRAMEBUFFER, null), re = !1) : it.__webglFramebuffer === void 0 ? D.setupRenderTarget(O) : it.__hasExternalTextures && D.rebindTextures(O, Ne.get(O.texture).__webglTexture, Ne.get(O.depthTexture).__webglTexture);
        const ft = O.texture;
        (ft.isData3DTexture || ft.isDataArrayTexture || ft.isCompressedArrayTexture) && (Ue = !0);
        const et = Ne.get(O).__webglFramebuffer;
        O.isWebGLCubeRenderTarget ? (Array.isArray(et[J]) ? te = et[J][ie] : te = et[J], we = !0) : Se.isWebGL2 && O.samples > 0 && D.useMultisampledRTT(O) === !1 ? te = Ne.get(O).__webglMultisampledFramebuffer : Array.isArray(et) ? te = et[ie] : te = et, C.copy(O.viewport), X.copy(O.scissor), ne = O.scissorTest;
      } else
        C.copy(le).multiplyScalar(Q).floor(), X.copy(oe).multiplyScalar(Q).floor(), ne = ge;
      if (he.bindFramebuffer(F.FRAMEBUFFER, te) && Se.drawBuffers && re && he.drawBuffers(O, te), he.viewport(C), he.scissor(X), he.setScissorTest(ne), we) {
        const it = Ne.get(O.texture);
        F.framebufferTexture2D(F.FRAMEBUFFER, F.COLOR_ATTACHMENT0, F.TEXTURE_CUBE_MAP_POSITIVE_X + J, it.__webglTexture, ie);
      } else if (Ue) {
        const it = Ne.get(O.texture), ft = J || 0;
        F.framebufferTextureLayer(F.FRAMEBUFFER, F.COLOR_ATTACHMENT0, it.__webglTexture, ie || 0, ft);
      }
      H = -1;
    }, this.readRenderTargetPixels = function(O, J, ie, re, te, we, Ue) {
      if (!(O && O.isWebGLRenderTarget)) {
        console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
        return;
      }
      let Qe = Ne.get(O).__webglFramebuffer;
      if (O.isWebGLCubeRenderTarget && Ue !== void 0 && (Qe = Qe[Ue]), Qe) {
        he.bindFramebuffer(F.FRAMEBUFFER, Qe);
        try {
          const it = O.texture, ft = it.format, et = it.type;
          if (ft !== Wn && Be.convert(ft) !== F.getParameter(F.IMPLEMENTATION_COLOR_READ_FORMAT)) {
            console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
            return;
          }
          const lt = et === go && (ue.has("EXT_color_buffer_half_float") || Se.isWebGL2 && ue.has("EXT_color_buffer_float"));
          if (et !== Qi && Be.convert(et) !== F.getParameter(F.IMPLEMENTATION_COLOR_READ_TYPE) && // Edge and Chrome Mac < 52 (#9513)
          !(et === Hi && (Se.isWebGL2 || ue.has("OES_texture_float") || ue.has("WEBGL_color_buffer_float"))) && // Chrome Mac >= 52 and Firefox
          !lt) {
            console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
            return;
          }
          J >= 0 && J <= O.width - re && ie >= 0 && ie <= O.height - te && F.readPixels(J, ie, re, te, Be.convert(ft), Be.convert(et), we);
        } finally {
          const it = P !== null ? Ne.get(P).__webglFramebuffer : null;
          he.bindFramebuffer(F.FRAMEBUFFER, it);
        }
      }
    }, this.copyFramebufferToTexture = function(O, J, ie = 0) {
      const re = Math.pow(2, -ie), te = Math.floor(J.image.width * re), we = Math.floor(J.image.height * re);
      D.setTexture2D(J, 0), F.copyTexSubImage2D(F.TEXTURE_2D, ie, 0, 0, O.x, O.y, te, we), he.unbindTexture();
    }, this.copyTextureToTexture = function(O, J, ie, re = 0) {
      const te = J.image.width, we = J.image.height, Ue = Be.convert(ie.format), Qe = Be.convert(ie.type);
      D.setTexture2D(ie, 0), F.pixelStorei(F.UNPACK_FLIP_Y_WEBGL, ie.flipY), F.pixelStorei(F.UNPACK_PREMULTIPLY_ALPHA_WEBGL, ie.premultiplyAlpha), F.pixelStorei(F.UNPACK_ALIGNMENT, ie.unpackAlignment), J.isDataTexture ? F.texSubImage2D(F.TEXTURE_2D, re, O.x, O.y, te, we, Ue, Qe, J.image.data) : J.isCompressedTexture ? F.compressedTexSubImage2D(F.TEXTURE_2D, re, O.x, O.y, J.mipmaps[0].width, J.mipmaps[0].height, Ue, J.mipmaps[0].data) : F.texSubImage2D(F.TEXTURE_2D, re, O.x, O.y, Ue, Qe, J.image), re === 0 && ie.generateMipmaps && F.generateMipmap(F.TEXTURE_2D), he.unbindTexture();
    }, this.copyTextureToTexture3D = function(O, J, ie, re, te = 0) {
      if (b.isWebGL1Renderer) {
        console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");
        return;
      }
      const we = O.max.x - O.min.x + 1, Ue = O.max.y - O.min.y + 1, Qe = O.max.z - O.min.z + 1, it = Be.convert(re.format), ft = Be.convert(re.type);
      let et;
      if (re.isData3DTexture)
        D.setTexture3D(re, 0), et = F.TEXTURE_3D;
      else if (re.isDataArrayTexture || re.isCompressedArrayTexture)
        D.setTexture2DArray(re, 0), et = F.TEXTURE_2D_ARRAY;
      else {
        console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");
        return;
      }
      F.pixelStorei(F.UNPACK_FLIP_Y_WEBGL, re.flipY), F.pixelStorei(F.UNPACK_PREMULTIPLY_ALPHA_WEBGL, re.premultiplyAlpha), F.pixelStorei(F.UNPACK_ALIGNMENT, re.unpackAlignment);
      const lt = F.getParameter(F.UNPACK_ROW_LENGTH), Xt = F.getParameter(F.UNPACK_IMAGE_HEIGHT), bn = F.getParameter(F.UNPACK_SKIP_PIXELS), an = F.getParameter(F.UNPACK_SKIP_ROWS), gi = F.getParameter(F.UNPACK_SKIP_IMAGES), Ft = ie.isCompressedTexture ? ie.mipmaps[te] : ie.image;
      F.pixelStorei(F.UNPACK_ROW_LENGTH, Ft.width), F.pixelStorei(F.UNPACK_IMAGE_HEIGHT, Ft.height), F.pixelStorei(F.UNPACK_SKIP_PIXELS, O.min.x), F.pixelStorei(F.UNPACK_SKIP_ROWS, O.min.y), F.pixelStorei(F.UNPACK_SKIP_IMAGES, O.min.z), ie.isDataTexture || ie.isData3DTexture ? F.texSubImage3D(et, te, J.x, J.y, J.z, we, Ue, Qe, it, ft, Ft.data) : ie.isCompressedArrayTexture ? (console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."), F.compressedTexSubImage3D(et, te, J.x, J.y, J.z, we, Ue, Qe, it, Ft.data)) : F.texSubImage3D(et, te, J.x, J.y, J.z, we, Ue, Qe, it, ft, Ft), F.pixelStorei(F.UNPACK_ROW_LENGTH, lt), F.pixelStorei(F.UNPACK_IMAGE_HEIGHT, Xt), F.pixelStorei(F.UNPACK_SKIP_PIXELS, bn), F.pixelStorei(F.UNPACK_SKIP_ROWS, an), F.pixelStorei(F.UNPACK_SKIP_IMAGES, gi), te === 0 && re.generateMipmaps && F.generateMipmap(et), he.unbindTexture();
    }, this.initTexture = function(O) {
      O.isCubeTexture ? D.setTextureCube(O, 0) : O.isData3DTexture ? D.setTexture3D(O, 0) : O.isDataArrayTexture || O.isCompressedArrayTexture ? D.setTexture2DArray(O, 0) : D.setTexture2D(O, 0), he.unbindTexture();
    }, this.resetState = function() {
      N = 0, R = 0, P = null, he.reset(), V.reset();
    }, typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
  }
  get coordinateSystem() {
    return Fi;
  }
  get outputColorSpace() {
    return this._outputColorSpace;
  }
  set outputColorSpace(e) {
    this._outputColorSpace = e;
    const t = this.getContext();
    t.drawingBufferColorSpace = e === ah ? "display-p3" : "srgb", t.unpackColorSpace = Dt.workingColorSpace === kl ? "display-p3" : "srgb";
  }
  get outputEncoding() {
    return console.warn("THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead."), this.outputColorSpace === nn ? na : cm;
  }
  set outputEncoding(e) {
    console.warn("THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead."), this.outputColorSpace = e === na ? nn : Vi;
  }
  get useLegacyLights() {
    return console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733."), this._useLegacyLights;
  }
  set useLegacyLights(e) {
    console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733."), this._useLegacyLights = e;
  }
}
class yx extends xm {
}
yx.prototype.isWebGL1Renderer = !0;
class ch {
  constructor(e, t = 25e-5) {
    this.isFogExp2 = !0, this.name = "", this.color = new Fe(e), this.density = t;
  }
  clone() {
    return new ch(this.color, this.density);
  }
  toJSON() {
    return {
      type: "FogExp2",
      name: this.name,
      color: this.color.getHex(),
      density: this.density
    };
  }
}
class uh {
  constructor(e, t = 1, n = 1e3) {
    this.isFog = !0, this.name = "", this.color = new Fe(e), this.near = t, this.far = n;
  }
  clone() {
    return new uh(this.color, this.near, this.far);
  }
  toJSON() {
    return {
      type: "Fog",
      name: this.name,
      color: this.color.getHex(),
      near: this.near,
      far: this.far
    };
  }
}
class hh extends Nt {
  constructor() {
    super(), this.isScene = !0, this.type = "Scene", this.background = null, this.environment = null, this.fog = null, this.backgroundBlurriness = 0, this.backgroundIntensity = 1, this.overrideMaterial = null, typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
  }
  copy(e, t) {
    return super.copy(e, t), e.background !== null && (this.background = e.background.clone()), e.environment !== null && (this.environment = e.environment.clone()), e.fog !== null && (this.fog = e.fog.clone()), this.backgroundBlurriness = e.backgroundBlurriness, this.backgroundIntensity = e.backgroundIntensity, e.overrideMaterial !== null && (this.overrideMaterial = e.overrideMaterial.clone()), this.matrixAutoUpdate = e.matrixAutoUpdate, this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return this.fog !== null && (t.object.fog = this.fog.toJSON()), this.backgroundBlurriness > 0 && (t.object.backgroundBlurriness = this.backgroundBlurriness), this.backgroundIntensity !== 1 && (t.object.backgroundIntensity = this.backgroundIntensity), t;
  }
}
class fh {
  constructor(e, t) {
    this.isInterleavedBuffer = !0, this.array = e, this.stride = t, this.count = e !== void 0 ? e.length / t : 0, this.usage = Dl, this._updateRange = { offset: 0, count: -1 }, this.updateRanges = [], this.version = 0, this.uuid = mi();
  }
  onUploadCallback() {
  }
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
  get updateRange() {
    return console.warn("THREE.InterleavedBuffer: updateRange() is deprecated and will be removed in r169. Use addUpdateRange() instead."), this._updateRange;
  }
  setUsage(e) {
    return this.usage = e, this;
  }
  addUpdateRange(e, t) {
    this.updateRanges.push({ start: e, count: t });
  }
  clearUpdateRanges() {
    this.updateRanges.length = 0;
  }
  copy(e) {
    return this.array = new e.array.constructor(e.array), this.count = e.count, this.stride = e.stride, this.usage = e.usage, this;
  }
  copyAt(e, t, n) {
    e *= this.stride, n *= t.stride;
    for (let i = 0, o = this.stride; i < o; i++)
      this.array[e + i] = t.array[n + i];
    return this;
  }
  set(e, t = 0) {
    return this.array.set(e, t), this;
  }
  clone(e) {
    e.arrayBuffers === void 0 && (e.arrayBuffers = {}), this.array.buffer._uuid === void 0 && (this.array.buffer._uuid = mi()), e.arrayBuffers[this.array.buffer._uuid] === void 0 && (e.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer);
    const t = new this.array.constructor(e.arrayBuffers[this.array.buffer._uuid]), n = new this.constructor(t, this.stride);
    return n.setUsage(this.usage), n;
  }
  onUpload(e) {
    return this.onUploadCallback = e, this;
  }
  toJSON(e) {
    return e.arrayBuffers === void 0 && (e.arrayBuffers = {}), this.array.buffer._uuid === void 0 && (this.array.buffer._uuid = mi()), e.arrayBuffers[this.array.buffer._uuid] === void 0 && (e.arrayBuffers[this.array.buffer._uuid] = Array.from(new Uint32Array(this.array.buffer))), {
      uuid: this.uuid,
      buffer: this.array.buffer._uuid,
      type: this.array.constructor.name,
      stride: this.stride
    };
  }
}
const Vn = /* @__PURE__ */ new I();
class ir {
  constructor(e, t, n, i = !1) {
    this.isInterleavedBufferAttribute = !0, this.name = "", this.data = e, this.itemSize = t, this.offset = n, this.normalized = i;
  }
  get count() {
    return this.data.count;
  }
  get array() {
    return this.data.array;
  }
  set needsUpdate(e) {
    this.data.needsUpdate = e;
  }
  applyMatrix4(e) {
    for (let t = 0, n = this.data.count; t < n; t++)
      Vn.fromBufferAttribute(this, t), Vn.applyMatrix4(e), this.setXYZ(t, Vn.x, Vn.y, Vn.z);
    return this;
  }
  applyNormalMatrix(e) {
    for (let t = 0, n = this.count; t < n; t++)
      Vn.fromBufferAttribute(this, t), Vn.applyNormalMatrix(e), this.setXYZ(t, Vn.x, Vn.y, Vn.z);
    return this;
  }
  transformDirection(e) {
    for (let t = 0, n = this.count; t < n; t++)
      Vn.fromBufferAttribute(this, t), Vn.transformDirection(e), this.setXYZ(t, Vn.x, Vn.y, Vn.z);
    return this;
  }
  setX(e, t) {
    return this.normalized && (t = _t(t, this.array)), this.data.array[e * this.data.stride + this.offset] = t, this;
  }
  setY(e, t) {
    return this.normalized && (t = _t(t, this.array)), this.data.array[e * this.data.stride + this.offset + 1] = t, this;
  }
  setZ(e, t) {
    return this.normalized && (t = _t(t, this.array)), this.data.array[e * this.data.stride + this.offset + 2] = t, this;
  }
  setW(e, t) {
    return this.normalized && (t = _t(t, this.array)), this.data.array[e * this.data.stride + this.offset + 3] = t, this;
  }
  getX(e) {
    let t = this.data.array[e * this.data.stride + this.offset];
    return this.normalized && (t = ei(t, this.array)), t;
  }
  getY(e) {
    let t = this.data.array[e * this.data.stride + this.offset + 1];
    return this.normalized && (t = ei(t, this.array)), t;
  }
  getZ(e) {
    let t = this.data.array[e * this.data.stride + this.offset + 2];
    return this.normalized && (t = ei(t, this.array)), t;
  }
  getW(e) {
    let t = this.data.array[e * this.data.stride + this.offset + 3];
    return this.normalized && (t = ei(t, this.array)), t;
  }
  setXY(e, t, n) {
    return e = e * this.data.stride + this.offset, this.normalized && (t = _t(t, this.array), n = _t(n, this.array)), this.data.array[e + 0] = t, this.data.array[e + 1] = n, this;
  }
  setXYZ(e, t, n, i) {
    return e = e * this.data.stride + this.offset, this.normalized && (t = _t(t, this.array), n = _t(n, this.array), i = _t(i, this.array)), this.data.array[e + 0] = t, this.data.array[e + 1] = n, this.data.array[e + 2] = i, this;
  }
  setXYZW(e, t, n, i, o) {
    return e = e * this.data.stride + this.offset, this.normalized && (t = _t(t, this.array), n = _t(n, this.array), i = _t(i, this.array), o = _t(o, this.array)), this.data.array[e + 0] = t, this.data.array[e + 1] = n, this.data.array[e + 2] = i, this.data.array[e + 3] = o, this;
  }
  clone(e) {
    if (e === void 0) {
      console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");
      const t = [];
      for (let n = 0; n < this.count; n++) {
        const i = n * this.data.stride + this.offset;
        for (let o = 0; o < this.itemSize; o++)
          t.push(this.data.array[i + o]);
      }
      return new zt(new this.array.constructor(t), this.itemSize, this.normalized);
    } else
      return e.interleavedBuffers === void 0 && (e.interleavedBuffers = {}), e.interleavedBuffers[this.data.uuid] === void 0 && (e.interleavedBuffers[this.data.uuid] = this.data.clone(e)), new ir(e.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);
  }
  toJSON(e) {
    if (e === void 0) {
      console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");
      const t = [];
      for (let n = 0; n < this.count; n++) {
        const i = n * this.data.stride + this.offset;
        for (let o = 0; o < this.itemSize; o++)
          t.push(this.data.array[i + o]);
      }
      return {
        itemSize: this.itemSize,
        type: this.array.constructor.name,
        array: t,
        normalized: this.normalized
      };
    } else
      return e.interleavedBuffers === void 0 && (e.interleavedBuffers = {}), e.interleavedBuffers[this.data.uuid] === void 0 && (e.interleavedBuffers[this.data.uuid] = this.data.toJSON(e)), {
        isInterleavedBufferAttribute: !0,
        itemSize: this.itemSize,
        data: this.data.uuid,
        offset: this.offset,
        normalized: this.normalized
      };
  }
}
class Sm extends zn {
  constructor(e) {
    super(), this.isSpriteMaterial = !0, this.type = "SpriteMaterial", this.color = new Fe(16777215), this.map = null, this.alphaMap = null, this.rotation = 0, this.sizeAttenuation = !0, this.transparent = !0, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.alphaMap = e.alphaMap, this.rotation = e.rotation, this.sizeAttenuation = e.sizeAttenuation, this.fog = e.fog, this;
  }
}
let eo;
const ol = /* @__PURE__ */ new I(), to = /* @__PURE__ */ new I(), no = /* @__PURE__ */ new I(), io = /* @__PURE__ */ new de(), ll = /* @__PURE__ */ new de(), xx = /* @__PURE__ */ new rt(), au = /* @__PURE__ */ new I(), cl = /* @__PURE__ */ new I(), ru = /* @__PURE__ */ new I(), W0 = /* @__PURE__ */ new de(), bd = /* @__PURE__ */ new de(), X0 = /* @__PURE__ */ new de();
class Sx extends Nt {
  constructor(e = new Sm()) {
    if (super(), this.isSprite = !0, this.type = "Sprite", eo === void 0) {
      eo = new xt();
      const t = new Float32Array([
        -0.5,
        -0.5,
        0,
        0,
        0,
        0.5,
        -0.5,
        0,
        1,
        0,
        0.5,
        0.5,
        0,
        1,
        1,
        -0.5,
        0.5,
        0,
        0,
        1
      ]), n = new fh(t, 5);
      eo.setIndex([0, 1, 2, 0, 2, 3]), eo.setAttribute("position", new ir(n, 3, 0, !1)), eo.setAttribute("uv", new ir(n, 2, 3, !1));
    }
    this.geometry = eo, this.material = e, this.center = new de(0.5, 0.5);
  }
  raycast(e, t) {
    e.camera === null && console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'), to.setFromMatrixScale(this.matrixWorld), xx.copy(e.camera.matrixWorld), this.modelViewMatrix.multiplyMatrices(e.camera.matrixWorldInverse, this.matrixWorld), no.setFromMatrixPosition(this.modelViewMatrix), e.camera.isPerspectiveCamera && this.material.sizeAttenuation === !1 && to.multiplyScalar(-no.z);
    const n = this.material.rotation;
    let i, o;
    n !== 0 && (o = Math.cos(n), i = Math.sin(n));
    const l = this.center;
    ou(au.set(-0.5, -0.5, 0), no, l, to, i, o), ou(cl.set(0.5, -0.5, 0), no, l, to, i, o), ou(ru.set(0.5, 0.5, 0), no, l, to, i, o), W0.set(0, 0), bd.set(1, 0), X0.set(1, 1);
    let c = e.ray.intersectTriangle(au, cl, ru, !1, ol);
    if (c === null && (ou(cl.set(-0.5, 0.5, 0), no, l, to, i, o), bd.set(0, 1), c = e.ray.intersectTriangle(au, ru, cl, !1, ol), c === null))
      return;
    const h = e.ray.origin.distanceTo(ol);
    h < e.near || h > e.far || t.push({
      distance: h,
      point: ol.clone(),
      uv: $n.getInterpolation(ol, au, cl, ru, W0, bd, X0, new de()),
      face: null,
      object: this
    });
  }
  copy(e, t) {
    return super.copy(e, t), e.center !== void 0 && this.center.copy(e.center), this.material = e.material, this;
  }
}
function ou(a, e, t, n, i, o) {
  io.subVectors(a, t).addScalar(0.5).multiply(n), i !== void 0 ? (ll.x = o * io.x - i * io.y, ll.y = i * io.x + o * io.y) : ll.copy(io), a.copy(e), a.x += ll.x, a.y += ll.y, a.applyMatrix4(xx);
}
const lu = /* @__PURE__ */ new I(), k0 = /* @__PURE__ */ new I();
class Mx extends Nt {
  constructor() {
    super(), this._currentLevel = 0, this.type = "LOD", Object.defineProperties(this, {
      levels: {
        enumerable: !0,
        value: []
      },
      isLOD: {
        value: !0
      }
    }), this.autoUpdate = !0;
  }
  copy(e) {
    super.copy(e, !1);
    const t = e.levels;
    for (let n = 0, i = t.length; n < i; n++) {
      const o = t[n];
      this.addLevel(o.object.clone(), o.distance, o.hysteresis);
    }
    return this.autoUpdate = e.autoUpdate, this;
  }
  addLevel(e, t = 0, n = 0) {
    t = Math.abs(t);
    const i = this.levels;
    let o;
    for (o = 0; o < i.length && !(t < i[o].distance); o++)
      ;
    return i.splice(o, 0, { distance: t, hysteresis: n, object: e }), this.add(e), this;
  }
  getCurrentLevel() {
    return this._currentLevel;
  }
  getObjectForDistance(e) {
    const t = this.levels;
    if (t.length > 0) {
      let n, i;
      for (n = 1, i = t.length; n < i; n++) {
        let o = t[n].distance;
        if (t[n].object.visible && (o -= o * t[n].hysteresis), e < o)
          break;
      }
      return t[n - 1].object;
    }
    return null;
  }
  raycast(e, t) {
    if (this.levels.length > 0) {
      lu.setFromMatrixPosition(this.matrixWorld);
      const i = e.ray.origin.distanceTo(lu);
      this.getObjectForDistance(i).raycast(e, t);
    }
  }
  update(e) {
    const t = this.levels;
    if (t.length > 1) {
      lu.setFromMatrixPosition(e.matrixWorld), k0.setFromMatrixPosition(this.matrixWorld);
      const n = lu.distanceTo(k0) / e.zoom;
      t[0].object.visible = !0;
      let i, o;
      for (i = 1, o = t.length; i < o; i++) {
        let l = t[i].distance;
        if (t[i].object.visible && (l -= l * t[i].hysteresis), n >= l)
          t[i - 1].object.visible = !1, t[i].object.visible = !0;
        else
          break;
      }
      for (this._currentLevel = i - 1; i < o; i++)
        t[i].object.visible = !1;
    }
  }
  toJSON(e) {
    const t = super.toJSON(e);
    this.autoUpdate === !1 && (t.object.autoUpdate = !1), t.object.levels = [];
    const n = this.levels;
    for (let i = 0, o = n.length; i < o; i++) {
      const l = n[i];
      t.object.levels.push({
        object: l.object.uuid,
        distance: l.distance,
        hysteresis: l.hysteresis
      });
    }
    return t;
  }
}
const q0 = /* @__PURE__ */ new I(), Y0 = /* @__PURE__ */ new It(), j0 = /* @__PURE__ */ new It(), HR = /* @__PURE__ */ new I(), Z0 = /* @__PURE__ */ new rt(), cu = /* @__PURE__ */ new I(), Td = /* @__PURE__ */ new In(), K0 = /* @__PURE__ */ new rt(), Ad = /* @__PURE__ */ new rr();
class Ex extends pn {
  constructor(e, t) {
    super(e, t), this.isSkinnedMesh = !0, this.type = "SkinnedMesh", this.bindMode = op, this.bindMatrix = new rt(), this.bindMatrixInverse = new rt(), this.boundingBox = null, this.boundingSphere = null;
  }
  computeBoundingBox() {
    const e = this.geometry;
    this.boundingBox === null && (this.boundingBox = new kn()), this.boundingBox.makeEmpty();
    const t = e.getAttribute("position");
    for (let n = 0; n < t.count; n++)
      this.getVertexPosition(n, cu), this.boundingBox.expandByPoint(cu);
  }
  computeBoundingSphere() {
    const e = this.geometry;
    this.boundingSphere === null && (this.boundingSphere = new In()), this.boundingSphere.makeEmpty();
    const t = e.getAttribute("position");
    for (let n = 0; n < t.count; n++)
      this.getVertexPosition(n, cu), this.boundingSphere.expandByPoint(cu);
  }
  copy(e, t) {
    return super.copy(e, t), this.bindMode = e.bindMode, this.bindMatrix.copy(e.bindMatrix), this.bindMatrixInverse.copy(e.bindMatrixInverse), this.skeleton = e.skeleton, e.boundingBox !== null && (this.boundingBox = e.boundingBox.clone()), e.boundingSphere !== null && (this.boundingSphere = e.boundingSphere.clone()), this;
  }
  raycast(e, t) {
    const n = this.material, i = this.matrixWorld;
    n !== void 0 && (this.boundingSphere === null && this.computeBoundingSphere(), Td.copy(this.boundingSphere), Td.applyMatrix4(i), e.ray.intersectsSphere(Td) !== !1 && (K0.copy(i).invert(), Ad.copy(e.ray).applyMatrix4(K0), !(this.boundingBox !== null && Ad.intersectsBox(this.boundingBox) === !1) && this._computeIntersections(e, t, Ad)));
  }
  getVertexPosition(e, t) {
    return super.getVertexPosition(e, t), this.applyBoneTransform(e, t), t;
  }
  bind(e, t) {
    this.skeleton = e, t === void 0 && (this.updateMatrixWorld(!0), this.skeleton.calculateInverses(), t = this.matrixWorld), this.bindMatrix.copy(t), this.bindMatrixInverse.copy(t).invert();
  }
  pose() {
    this.skeleton.pose();
  }
  normalizeSkinWeights() {
    const e = new It(), t = this.geometry.attributes.skinWeight;
    for (let n = 0, i = t.count; n < i; n++) {
      e.fromBufferAttribute(t, n);
      const o = 1 / e.manhattanLength();
      o !== 1 / 0 ? e.multiplyScalar(o) : e.set(1, 0, 0, 0), t.setXYZW(n, e.x, e.y, e.z, e.w);
    }
  }
  updateMatrixWorld(e) {
    super.updateMatrixWorld(e), this.bindMode === op ? this.bindMatrixInverse.copy(this.matrixWorld).invert() : this.bindMode === Oy ? this.bindMatrixInverse.copy(this.bindMatrix).invert() : console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode);
  }
  applyBoneTransform(e, t) {
    const n = this.skeleton, i = this.geometry;
    Y0.fromBufferAttribute(i.attributes.skinIndex, e), j0.fromBufferAttribute(i.attributes.skinWeight, e), q0.copy(t).applyMatrix4(this.bindMatrix), t.set(0, 0, 0);
    for (let o = 0; o < 4; o++) {
      const l = j0.getComponent(o);
      if (l !== 0) {
        const c = Y0.getComponent(o);
        Z0.multiplyMatrices(n.bones[c].matrixWorld, n.boneInverses[c]), t.addScaledVector(HR.copy(q0).applyMatrix4(Z0), l);
      }
    }
    return t.applyMatrix4(this.bindMatrixInverse);
  }
  boneTransform(e, t) {
    return console.warn("THREE.SkinnedMesh: .boneTransform() was renamed to .applyBoneTransform() in r151."), this.applyBoneTransform(e, t);
  }
}
class Mm extends Nt {
  constructor() {
    super(), this.isBone = !0, this.type = "Bone";
  }
}
class er extends un {
  constructor(e = null, t = 1, n = 1, i, o, l, c, h, f = on, p = on, m, g) {
    super(null, l, c, h, f, p, i, o, m, g), this.isDataTexture = !0, this.image = { data: e, width: t, height: n }, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1;
  }
}
const J0 = /* @__PURE__ */ new rt(), FR = /* @__PURE__ */ new rt();
class dh {
  constructor(e = [], t = []) {
    this.uuid = mi(), this.bones = e.slice(0), this.boneInverses = t, this.boneMatrices = null, this.boneTexture = null, this.init();
  }
  init() {
    const e = this.bones, t = this.boneInverses;
    if (this.boneMatrices = new Float32Array(e.length * 16), t.length === 0)
      this.calculateInverses();
    else if (e.length !== t.length) {
      console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."), this.boneInverses = [];
      for (let n = 0, i = this.bones.length; n < i; n++)
        this.boneInverses.push(new rt());
    }
  }
  calculateInverses() {
    this.boneInverses.length = 0;
    for (let e = 0, t = this.bones.length; e < t; e++) {
      const n = new rt();
      this.bones[e] && n.copy(this.bones[e].matrixWorld).invert(), this.boneInverses.push(n);
    }
  }
  pose() {
    for (let e = 0, t = this.bones.length; e < t; e++) {
      const n = this.bones[e];
      n && n.matrixWorld.copy(this.boneInverses[e]).invert();
    }
    for (let e = 0, t = this.bones.length; e < t; e++) {
      const n = this.bones[e];
      n && (n.parent && n.parent.isBone ? (n.matrix.copy(n.parent.matrixWorld).invert(), n.matrix.multiply(n.matrixWorld)) : n.matrix.copy(n.matrixWorld), n.matrix.decompose(n.position, n.quaternion, n.scale));
    }
  }
  update() {
    const e = this.bones, t = this.boneInverses, n = this.boneMatrices, i = this.boneTexture;
    for (let o = 0, l = e.length; o < l; o++) {
      const c = e[o] ? e[o].matrixWorld : FR;
      J0.multiplyMatrices(c, t[o]), J0.toArray(n, o * 16);
    }
    i !== null && (i.needsUpdate = !0);
  }
  clone() {
    return new dh(this.bones, this.boneInverses);
  }
  computeBoneTexture() {
    let e = Math.sqrt(this.bones.length * 4);
    e = Math.ceil(e / 4) * 4, e = Math.max(e, 4);
    const t = new Float32Array(e * e * 4);
    t.set(this.boneMatrices);
    const n = new er(t, e, e, Wn, Hi);
    return n.needsUpdate = !0, this.boneMatrices = t, this.boneTexture = n, this;
  }
  getBoneByName(e) {
    for (let t = 0, n = this.bones.length; t < n; t++) {
      const i = this.bones[t];
      if (i.name === e)
        return i;
    }
  }
  dispose() {
    this.boneTexture !== null && (this.boneTexture.dispose(), this.boneTexture = null);
  }
  fromJSON(e, t) {
    this.uuid = e.uuid;
    for (let n = 0, i = e.bones.length; n < i; n++) {
      const o = e.bones[n];
      let l = t[o];
      l === void 0 && (console.warn("THREE.Skeleton: No bone found with UUID:", o), l = new Mm()), this.bones.push(l), this.boneInverses.push(new rt().fromArray(e.boneInverses[n]));
    }
    return this.init(), this;
  }
  toJSON() {
    const e = {
      metadata: {
        version: 4.6,
        type: "Skeleton",
        generator: "Skeleton.toJSON"
      },
      bones: [],
      boneInverses: []
    };
    e.uuid = this.uuid;
    const t = this.bones, n = this.boneInverses;
    for (let i = 0, o = t.length; i < o; i++) {
      const l = t[i];
      e.bones.push(l.uuid);
      const c = n[i];
      e.boneInverses.push(c.toArray());
    }
    return e;
  }
}
class So extends zt {
  constructor(e, t, n, i = 1) {
    super(e, t, n), this.isInstancedBufferAttribute = !0, this.meshPerAttribute = i;
  }
  copy(e) {
    return super.copy(e), this.meshPerAttribute = e.meshPerAttribute, this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.meshPerAttribute = this.meshPerAttribute, e.isInstancedBufferAttribute = !0, e;
  }
}
const so = /* @__PURE__ */ new rt(), Q0 = /* @__PURE__ */ new rt(), uu = [], $0 = /* @__PURE__ */ new kn(), VR = /* @__PURE__ */ new rt(), ul = /* @__PURE__ */ new pn(), hl = /* @__PURE__ */ new In();
class bx extends pn {
  constructor(e, t, n) {
    super(e, t), this.isInstancedMesh = !0, this.instanceMatrix = new So(new Float32Array(n * 16), 16), this.instanceColor = null, this.count = n, this.boundingBox = null, this.boundingSphere = null;
    for (let i = 0; i < n; i++)
      this.setMatrixAt(i, VR);
  }
  computeBoundingBox() {
    const e = this.geometry, t = this.count;
    this.boundingBox === null && (this.boundingBox = new kn()), e.boundingBox === null && e.computeBoundingBox(), this.boundingBox.makeEmpty();
    for (let n = 0; n < t; n++)
      this.getMatrixAt(n, so), $0.copy(e.boundingBox).applyMatrix4(so), this.boundingBox.union($0);
  }
  computeBoundingSphere() {
    const e = this.geometry, t = this.count;
    this.boundingSphere === null && (this.boundingSphere = new In()), e.boundingSphere === null && e.computeBoundingSphere(), this.boundingSphere.makeEmpty();
    for (let n = 0; n < t; n++)
      this.getMatrixAt(n, so), hl.copy(e.boundingSphere).applyMatrix4(so), this.boundingSphere.union(hl);
  }
  copy(e, t) {
    return super.copy(e, t), this.instanceMatrix.copy(e.instanceMatrix), e.instanceColor !== null && (this.instanceColor = e.instanceColor.clone()), this.count = e.count, e.boundingBox !== null && (this.boundingBox = e.boundingBox.clone()), e.boundingSphere !== null && (this.boundingSphere = e.boundingSphere.clone()), this;
  }
  getColorAt(e, t) {
    t.fromArray(this.instanceColor.array, e * 3);
  }
  getMatrixAt(e, t) {
    t.fromArray(this.instanceMatrix.array, e * 16);
  }
  raycast(e, t) {
    const n = this.matrixWorld, i = this.count;
    if (ul.geometry = this.geometry, ul.material = this.material, ul.material !== void 0 && (this.boundingSphere === null && this.computeBoundingSphere(), hl.copy(this.boundingSphere), hl.applyMatrix4(n), e.ray.intersectsSphere(hl) !== !1))
      for (let o = 0; o < i; o++) {
        this.getMatrixAt(o, so), Q0.multiplyMatrices(n, so), ul.matrixWorld = Q0, ul.raycast(e, uu);
        for (let l = 0, c = uu.length; l < c; l++) {
          const h = uu[l];
          h.instanceId = o, h.object = this, t.push(h);
        }
        uu.length = 0;
      }
  }
  setColorAt(e, t) {
    this.instanceColor === null && (this.instanceColor = new So(new Float32Array(this.instanceMatrix.count * 3), 3)), t.toArray(this.instanceColor.array, e * 3);
  }
  setMatrixAt(e, t) {
    t.toArray(this.instanceMatrix.array, e * 16);
  }
  updateMorphTargets() {
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
}
function GR(a, e) {
  return a.z - e.z;
}
function WR(a, e) {
  return e.z - a.z;
}
class XR {
  constructor() {
    this.index = 0, this.pool = [], this.list = [];
  }
  push(e, t) {
    const n = this.pool, i = this.list;
    this.index >= n.length && n.push({
      start: -1,
      count: -1,
      z: -1
    });
    const o = n[this.index];
    i.push(o), this.index++, o.start = e.start, o.count = e.count, o.z = t;
  }
  reset() {
    this.list.length = 0, this.index = 0;
  }
}
const ao = "batchId", Ks = /* @__PURE__ */ new rt(), e_ = /* @__PURE__ */ new rt(), kR = /* @__PURE__ */ new rt(), t_ = /* @__PURE__ */ new rt(), wd = /* @__PURE__ */ new jl(), hu = /* @__PURE__ */ new kn(), Ia = /* @__PURE__ */ new In(), fl = /* @__PURE__ */ new I(), Rd = /* @__PURE__ */ new XR(), Dn = /* @__PURE__ */ new pn(), fu = [];
function qR(a, e, t = 0) {
  const n = e.itemSize;
  if (a.isInterleavedBufferAttribute || a.array.constructor !== e.array.constructor) {
    const i = a.count;
    for (let o = 0; o < i; o++)
      for (let l = 0; l < n; l++)
        e.setComponent(o + t, l, a.getComponent(o, l));
  } else
    e.array.set(a.array, t * n);
  e.needsUpdate = !0;
}
class Tx extends pn {
  get maxGeometryCount() {
    return this._maxGeometryCount;
  }
  constructor(e, t, n = t * 2, i) {
    super(new xt(), i), this.isBatchedMesh = !0, this.perObjectFrustumCulled = !0, this.sortObjects = !0, this.boundingBox = null, this.boundingSphere = null, this.customSort = null, this._drawRanges = [], this._reservedRanges = [], this._visibility = [], this._active = [], this._bounds = [], this._maxGeometryCount = e, this._maxVertexCount = t, this._maxIndexCount = n, this._geometryInitialized = !1, this._geometryCount = 0, this._multiDrawCounts = new Int32Array(e), this._multiDrawStarts = new Int32Array(e), this._multiDrawCount = 0, this._visibilityChanged = !0, this._matricesTexture = null, this._initMatricesTexture();
  }
  _initMatricesTexture() {
    let e = Math.sqrt(this._maxGeometryCount * 4);
    e = Math.ceil(e / 4) * 4, e = Math.max(e, 4);
    const t = new Float32Array(e * e * 4), n = new er(t, e, e, Wn, Hi);
    this._matricesTexture = n;
  }
  _initializeGeometry(e) {
    const t = this.geometry, n = this._maxVertexCount, i = this._maxGeometryCount, o = this._maxIndexCount;
    if (this._geometryInitialized === !1) {
      for (const c in e.attributes) {
        const h = e.getAttribute(c), { array: f, itemSize: p, normalized: m } = h, g = new f.constructor(n * p), v = new h.constructor(g, p, m);
        v.setUsage(h.usage), t.setAttribute(c, v);
      }
      if (e.getIndex() !== null) {
        const c = n > 65536 ? new Uint32Array(o) : new Uint16Array(o);
        t.setIndex(new zt(c, 1));
      }
      const l = i > 65536 ? new Uint32Array(n) : new Uint16Array(n);
      t.setAttribute(ao, new zt(l, 1)), this._geometryInitialized = !0;
    }
  }
  // Make sure the geometry is compatible with the existing combined geometry atributes
  _validateGeometry(e) {
    if (e.getAttribute(ao))
      throw new Error(`BatchedMesh: Geometry cannot use attribute "${ao}"`);
    const t = this.geometry;
    if (!!e.getIndex() != !!t.getIndex())
      throw new Error('BatchedMesh: All geometries must consistently have "index".');
    for (const n in t.attributes) {
      if (n === ao)
        continue;
      if (!e.hasAttribute(n))
        throw new Error(`BatchedMesh: Added geometry missing "${n}". All geometries must have consistent attributes.`);
      const i = e.getAttribute(n), o = t.getAttribute(n);
      if (i.itemSize !== o.itemSize || i.normalized !== o.normalized)
        throw new Error("BatchedMesh: All attributes must have a consistent itemSize and normalized value.");
    }
  }
  setCustomSort(e) {
    return this.customSort = e, this;
  }
  computeBoundingBox() {
    this.boundingBox === null && (this.boundingBox = new kn());
    const e = this._geometryCount, t = this.boundingBox, n = this._active;
    t.makeEmpty();
    for (let i = 0; i < e; i++)
      n[i] !== !1 && (this.getMatrixAt(i, Ks), this.getBoundingBoxAt(i, hu).applyMatrix4(Ks), t.union(hu));
  }
  computeBoundingSphere() {
    this.boundingSphere === null && (this.boundingSphere = new In());
    const e = this._geometryCount, t = this.boundingSphere, n = this._active;
    t.makeEmpty();
    for (let i = 0; i < e; i++)
      n[i] !== !1 && (this.getMatrixAt(i, Ks), this.getBoundingSphereAt(i, Ia).applyMatrix4(Ks), t.union(Ia));
  }
  addGeometry(e, t = -1, n = -1) {
    if (this._initializeGeometry(e), this._validateGeometry(e), this._geometryCount >= this._maxGeometryCount)
      throw new Error("BatchedMesh: Maximum geometry count reached.");
    const i = {
      vertexStart: -1,
      vertexCount: -1,
      indexStart: -1,
      indexCount: -1
    };
    let o = null;
    const l = this._reservedRanges, c = this._drawRanges, h = this._bounds;
    this._geometryCount !== 0 && (o = l[l.length - 1]), t === -1 ? i.vertexCount = e.getAttribute("position").count : i.vertexCount = t, o === null ? i.vertexStart = 0 : i.vertexStart = o.vertexStart + o.vertexCount;
    const f = e.getIndex(), p = f !== null;
    if (p && (n === -1 ? i.indexCount = f.count : i.indexCount = n, o === null ? i.indexStart = 0 : i.indexStart = o.indexStart + o.indexCount), i.indexStart !== -1 && i.indexStart + i.indexCount > this._maxIndexCount || i.vertexStart + i.vertexCount > this._maxVertexCount)
      throw new Error("BatchedMesh: Reserved space request exceeds the maximum buffer size.");
    const m = this._visibility, g = this._active, v = this._matricesTexture, x = this._matricesTexture.image.data;
    m.push(!0), g.push(!0);
    const E = this._geometryCount;
    this._geometryCount++, kR.toArray(x, E * 16), v.needsUpdate = !0, l.push(i), c.push({
      start: p ? i.indexStart : i.vertexStart,
      count: -1
    }), h.push({
      boxInitialized: !1,
      box: new kn(),
      sphereInitialized: !1,
      sphere: new In()
    });
    const S = this.geometry.getAttribute(ao);
    for (let y = 0; y < i.vertexCount; y++)
      S.setX(i.vertexStart + y, E);
    return S.needsUpdate = !0, this.setGeometryAt(E, e), E;
  }
  setGeometryAt(e, t) {
    if (e >= this._geometryCount)
      throw new Error("BatchedMesh: Maximum geometry count reached.");
    this._validateGeometry(t);
    const n = this.geometry, i = n.getIndex() !== null, o = n.getIndex(), l = t.getIndex(), c = this._reservedRanges[e];
    if (i && l.count > c.indexCount || t.attributes.position.count > c.vertexCount)
      throw new Error("BatchedMesh: Reserved space not large enough for provided geometry.");
    const h = c.vertexStart, f = c.vertexCount;
    for (const v in n.attributes) {
      if (v === ao)
        continue;
      const x = t.getAttribute(v), E = n.getAttribute(v);
      qR(x, E, h);
      const S = x.itemSize;
      for (let y = x.count, T = f; y < T; y++) {
        const b = h + y;
        for (let A = 0; A < S; A++)
          E.setComponent(b, A, 0);
      }
      E.needsUpdate = !0;
    }
    if (i) {
      const v = c.indexStart;
      for (let x = 0; x < l.count; x++)
        o.setX(v + x, h + l.getX(x));
      for (let x = l.count, E = c.indexCount; x < E; x++)
        o.setX(v + x, h);
      o.needsUpdate = !0;
    }
    const p = this._bounds[e];
    t.boundingBox !== null ? (p.box.copy(t.boundingBox), p.boxInitialized = !0) : p.boxInitialized = !1, t.boundingSphere !== null ? (p.sphere.copy(t.boundingSphere), p.sphereInitialized = !0) : p.sphereInitialized = !1;
    const m = this._drawRanges[e], g = t.getAttribute("position");
    return m.count = i ? l.count : g.count, this._visibilityChanged = !0, e;
  }
  deleteGeometry(e) {
    const t = this._active;
    return e >= t.length || t[e] === !1 ? this : (t[e] = !1, this._visibilityChanged = !0, this);
  }
  // get bounding box and compute it if it doesn't exist
  getBoundingBoxAt(e, t) {
    if (this._active[e] === !1)
      return this;
    const i = this._bounds[e], o = i.box, l = this.geometry;
    if (i.boxInitialized === !1) {
      o.makeEmpty();
      const c = l.index, h = l.attributes.position, f = this._drawRanges[e];
      for (let p = f.start, m = f.start + f.count; p < m; p++) {
        let g = p;
        c && (g = c.getX(g)), o.expandByPoint(fl.fromBufferAttribute(h, g));
      }
      i.boxInitialized = !0;
    }
    return t.copy(o), t;
  }
  // get bounding sphere and compute it if it doesn't exist
  getBoundingSphereAt(e, t) {
    if (this._active[e] === !1)
      return this;
    const i = this._bounds[e], o = i.sphere, l = this.geometry;
    if (i.sphereInitialized === !1) {
      o.makeEmpty(), this.getBoundingBoxAt(e, hu), hu.getCenter(o.center);
      const c = l.index, h = l.attributes.position, f = this._drawRanges[e];
      let p = 0;
      for (let m = f.start, g = f.start + f.count; m < g; m++) {
        let v = m;
        c && (v = c.getX(v)), fl.fromBufferAttribute(h, v), p = Math.max(p, o.center.distanceToSquared(fl));
      }
      o.radius = Math.sqrt(p), i.sphereInitialized = !0;
    }
    return t.copy(o), t;
  }
  setMatrixAt(e, t) {
    const n = this._active, i = this._matricesTexture, o = this._matricesTexture.image.data, l = this._geometryCount;
    return e >= l || n[e] === !1 ? this : (t.toArray(o, e * 16), i.needsUpdate = !0, this);
  }
  getMatrixAt(e, t) {
    const n = this._active, i = this._matricesTexture.image.data, o = this._geometryCount;
    return e >= o || n[e] === !1 ? null : t.fromArray(i, e * 16);
  }
  setVisibleAt(e, t) {
    const n = this._visibility, i = this._active, o = this._geometryCount;
    return e >= o || i[e] === !1 || n[e] === t ? this : (n[e] = t, this._visibilityChanged = !0, this);
  }
  getVisibleAt(e) {
    const t = this._visibility, n = this._active, i = this._geometryCount;
    return e >= i || n[e] === !1 ? !1 : t[e];
  }
  raycast(e, t) {
    const n = this._visibility, i = this._active, o = this._drawRanges, l = this._geometryCount, c = this.matrixWorld, h = this.geometry;
    Dn.material = this.material, Dn.geometry.index = h.index, Dn.geometry.attributes = h.attributes, Dn.geometry.boundingBox === null && (Dn.geometry.boundingBox = new kn()), Dn.geometry.boundingSphere === null && (Dn.geometry.boundingSphere = new In());
    for (let f = 0; f < l; f++) {
      if (!n[f] || !i[f])
        continue;
      const p = o[f];
      Dn.geometry.setDrawRange(p.start, p.count), this.getMatrixAt(f, Dn.matrixWorld).premultiply(c), this.getBoundingBoxAt(f, Dn.geometry.boundingBox), this.getBoundingSphereAt(f, Dn.geometry.boundingSphere), Dn.raycast(e, fu);
      for (let m = 0, g = fu.length; m < g; m++) {
        const v = fu[m];
        v.object = this, v.batchId = f, t.push(v);
      }
      fu.length = 0;
    }
    Dn.material = null, Dn.geometry.index = null, Dn.geometry.attributes = {}, Dn.geometry.setDrawRange(0, 1 / 0);
  }
  copy(e) {
    return super.copy(e), this.geometry = e.geometry.clone(), this.perObjectFrustumCulled = e.perObjectFrustumCulled, this.sortObjects = e.sortObjects, this.boundingBox = e.boundingBox !== null ? e.boundingBox.clone() : null, this.boundingSphere = e.boundingSphere !== null ? e.boundingSphere.clone() : null, this._drawRanges = e._drawRanges.map((t) => ({ ...t })), this._reservedRanges = e._reservedRanges.map((t) => ({ ...t })), this._visibility = e._visibility.slice(), this._active = e._active.slice(), this._bounds = e._bounds.map((t) => ({
      boxInitialized: t.boxInitialized,
      box: t.box.clone(),
      sphereInitialized: t.sphereInitialized,
      sphere: t.sphere.clone()
    })), this._maxGeometryCount = e._maxGeometryCount, this._maxVertexCount = e._maxVertexCount, this._maxIndexCount = e._maxIndexCount, this._geometryInitialized = e._geometryInitialized, this._geometryCount = e._geometryCount, this._multiDrawCounts = e._multiDrawCounts.slice(), this._multiDrawStarts = e._multiDrawStarts.slice(), this._matricesTexture = e._matricesTexture.clone(), this._matricesTexture.image.data = this._matricesTexture.image.slice(), this;
  }
  dispose() {
    return this.geometry.dispose(), this._matricesTexture.dispose(), this._matricesTexture = null, this;
  }
  onBeforeRender(e, t, n, i, o) {
    if (!this._visibilityChanged && !this.perObjectFrustumCulled && !this.sortObjects)
      return;
    const l = i.getIndex(), c = l === null ? 1 : l.array.BYTES_PER_ELEMENT, h = this._visibility, f = this._multiDrawStarts, p = this._multiDrawCounts, m = this._drawRanges, g = this.perObjectFrustumCulled;
    g && (t_.multiplyMatrices(n.projectionMatrix, n.matrixWorldInverse).multiply(this.matrixWorld), wd.setFromProjectionMatrix(
      t_,
      e.isWebGPURenderer ? vo : Fi
    ));
    let v = 0;
    if (this.sortObjects) {
      e_.copy(this.matrixWorld).invert(), fl.setFromMatrixPosition(n.matrixWorld).applyMatrix4(e_);
      for (let S = 0, y = h.length; S < y; S++)
        if (h[S]) {
          this.getMatrixAt(S, Ks), this.getBoundingSphereAt(S, Ia).applyMatrix4(Ks);
          let T = !1;
          if (g && (T = !wd.intersectsSphere(Ia)), !T) {
            const b = fl.distanceTo(Ia.center);
            Rd.push(m[S], b);
          }
        }
      const x = Rd.list, E = this.customSort;
      E === null ? x.sort(o.transparent ? WR : GR) : E.call(this, x, n);
      for (let S = 0, y = x.length; S < y; S++) {
        const T = x[S];
        f[v] = T.start * c, p[v] = T.count, v++;
      }
      Rd.reset();
    } else
      for (let x = 0, E = h.length; x < E; x++)
        if (h[x]) {
          let S = !1;
          if (g && (this.getMatrixAt(x, Ks), this.getBoundingSphereAt(x, Ia).applyMatrix4(Ks), S = !wd.intersectsSphere(Ia)), !S) {
            const y = m[x];
            f[v] = y.start * c, p[v] = y.count, v++;
          }
        }
    this._multiDrawCount = v, this._visibilityChanged = !1;
  }
  onBeforeShadow(e, t, n, i, o, l) {
    this.onBeforeRender(e, null, i, o, l);
  }
}
class qn extends zn {
  constructor(e) {
    super(), this.isLineBasicMaterial = !0, this.type = "LineBasicMaterial", this.color = new Fe(16777215), this.map = null, this.linewidth = 1, this.linecap = "round", this.linejoin = "round", this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.linewidth = e.linewidth, this.linecap = e.linecap, this.linejoin = e.linejoin, this.fog = e.fog, this;
  }
}
const n_ = /* @__PURE__ */ new I(), i_ = /* @__PURE__ */ new I(), s_ = /* @__PURE__ */ new rt(), Cd = /* @__PURE__ */ new rr(), du = /* @__PURE__ */ new In();
class aa extends Nt {
  constructor(e = new xt(), t = new qn()) {
    super(), this.isLine = !0, this.type = "Line", this.geometry = e, this.material = t, this.updateMorphTargets();
  }
  copy(e, t) {
    return super.copy(e, t), this.material = Array.isArray(e.material) ? e.material.slice() : e.material, this.geometry = e.geometry, this;
  }
  computeLineDistances() {
    const e = this.geometry;
    if (e.index === null) {
      const t = e.attributes.position, n = [0];
      for (let i = 1, o = t.count; i < o; i++)
        n_.fromBufferAttribute(t, i - 1), i_.fromBufferAttribute(t, i), n[i] = n[i - 1], n[i] += n_.distanceTo(i_);
      e.setAttribute("lineDistance", new Ye(n, 1));
    } else
      console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
    return this;
  }
  raycast(e, t) {
    const n = this.geometry, i = this.matrixWorld, o = e.params.Line.threshold, l = n.drawRange;
    if (n.boundingSphere === null && n.computeBoundingSphere(), du.copy(n.boundingSphere), du.applyMatrix4(i), du.radius += o, e.ray.intersectsSphere(du) === !1) return;
    s_.copy(i).invert(), Cd.copy(e.ray).applyMatrix4(s_);
    const c = o / ((this.scale.x + this.scale.y + this.scale.z) / 3), h = c * c, f = new I(), p = new I(), m = new I(), g = new I(), v = this.isLineSegments ? 2 : 1, x = n.index, S = n.attributes.position;
    if (x !== null) {
      const y = Math.max(0, l.start), T = Math.min(x.count, l.start + l.count);
      for (let b = y, A = T - 1; b < A; b += v) {
        const N = x.getX(b), R = x.getX(b + 1);
        if (f.fromBufferAttribute(S, N), p.fromBufferAttribute(S, R), Cd.distanceSqToSegment(f, p, g, m) > h) continue;
        g.applyMatrix4(this.matrixWorld);
        const H = e.ray.origin.distanceTo(g);
        H < e.near || H > e.far || t.push({
          distance: H,
          // What do we want? intersection point on the ray or on the segment??
          // point: raycaster.ray.at( distance ),
          point: m.clone().applyMatrix4(this.matrixWorld),
          index: b,
          face: null,
          faceIndex: null,
          object: this
        });
      }
    } else {
      const y = Math.max(0, l.start), T = Math.min(S.count, l.start + l.count);
      for (let b = y, A = T - 1; b < A; b += v) {
        if (f.fromBufferAttribute(S, b), p.fromBufferAttribute(S, b + 1), Cd.distanceSqToSegment(f, p, g, m) > h) continue;
        g.applyMatrix4(this.matrixWorld);
        const R = e.ray.origin.distanceTo(g);
        R < e.near || R > e.far || t.push({
          distance: R,
          // What do we want? intersection point on the ray or on the segment??
          // point: raycaster.ray.at( distance ),
          point: m.clone().applyMatrix4(this.matrixWorld),
          index: b,
          face: null,
          faceIndex: null,
          object: this
        });
      }
    }
  }
  updateMorphTargets() {
    const t = this.geometry.morphAttributes, n = Object.keys(t);
    if (n.length > 0) {
      const i = t[n[0]];
      if (i !== void 0) {
        this.morphTargetInfluences = [], this.morphTargetDictionary = {};
        for (let o = 0, l = i.length; o < l; o++) {
          const c = i[o].name || String(o);
          this.morphTargetInfluences.push(0), this.morphTargetDictionary[c] = o;
        }
      }
    }
  }
}
const a_ = /* @__PURE__ */ new I(), r_ = /* @__PURE__ */ new I();
class es extends aa {
  constructor(e, t) {
    super(e, t), this.isLineSegments = !0, this.type = "LineSegments";
  }
  computeLineDistances() {
    const e = this.geometry;
    if (e.index === null) {
      const t = e.attributes.position, n = [];
      for (let i = 0, o = t.count; i < o; i += 2)
        a_.fromBufferAttribute(t, i), r_.fromBufferAttribute(t, i + 1), n[i] = i === 0 ? 0 : n[i - 1], n[i + 1] = n[i] + a_.distanceTo(r_);
      e.setAttribute("lineDistance", new Ye(n, 1));
    } else
      console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
    return this;
  }
}
class Ax extends aa {
  constructor(e, t) {
    super(e, t), this.isLineLoop = !0, this.type = "LineLoop";
  }
}
class Em extends zn {
  constructor(e) {
    super(), this.isPointsMaterial = !0, this.type = "PointsMaterial", this.color = new Fe(16777215), this.map = null, this.alphaMap = null, this.size = 1, this.sizeAttenuation = !0, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.alphaMap = e.alphaMap, this.size = e.size, this.sizeAttenuation = e.sizeAttenuation, this.fog = e.fog, this;
  }
}
const o_ = /* @__PURE__ */ new rt(), Bp = /* @__PURE__ */ new rr(), pu = /* @__PURE__ */ new In(), mu = /* @__PURE__ */ new I();
class wx extends Nt {
  constructor(e = new xt(), t = new Em()) {
    super(), this.isPoints = !0, this.type = "Points", this.geometry = e, this.material = t, this.updateMorphTargets();
  }
  copy(e, t) {
    return super.copy(e, t), this.material = Array.isArray(e.material) ? e.material.slice() : e.material, this.geometry = e.geometry, this;
  }
  raycast(e, t) {
    const n = this.geometry, i = this.matrixWorld, o = e.params.Points.threshold, l = n.drawRange;
    if (n.boundingSphere === null && n.computeBoundingSphere(), pu.copy(n.boundingSphere), pu.applyMatrix4(i), pu.radius += o, e.ray.intersectsSphere(pu) === !1) return;
    o_.copy(i).invert(), Bp.copy(e.ray).applyMatrix4(o_);
    const c = o / ((this.scale.x + this.scale.y + this.scale.z) / 3), h = c * c, f = n.index, m = n.attributes.position;
    if (f !== null) {
      const g = Math.max(0, l.start), v = Math.min(f.count, l.start + l.count);
      for (let x = g, E = v; x < E; x++) {
        const S = f.getX(x);
        mu.fromBufferAttribute(m, S), l_(mu, S, h, i, e, t, this);
      }
    } else {
      const g = Math.max(0, l.start), v = Math.min(m.count, l.start + l.count);
      for (let x = g, E = v; x < E; x++)
        mu.fromBufferAttribute(m, x), l_(mu, x, h, i, e, t, this);
    }
  }
  updateMorphTargets() {
    const t = this.geometry.morphAttributes, n = Object.keys(t);
    if (n.length > 0) {
      const i = t[n[0]];
      if (i !== void 0) {
        this.morphTargetInfluences = [], this.morphTargetDictionary = {};
        for (let o = 0, l = i.length; o < l; o++) {
          const c = i[o].name || String(o);
          this.morphTargetInfluences.push(0), this.morphTargetDictionary[c] = o;
        }
      }
    }
  }
}
function l_(a, e, t, n, i, o, l) {
  const c = Bp.distanceSqToPoint(a);
  if (c < t) {
    const h = new I();
    Bp.closestPointToPoint(a, h), h.applyMatrix4(n);
    const f = i.ray.origin.distanceTo(h);
    if (f < i.near || f > i.far) return;
    o.push({
      distance: f,
      distanceToRay: Math.sqrt(c),
      point: h,
      index: e,
      face: null,
      object: l
    });
  }
}
class YR extends un {
  constructor(e, t, n, i, o, l, c, h, f) {
    super(e, t, n, i, o, l, c, h, f), this.isVideoTexture = !0, this.minFilter = l !== void 0 ? l : ln, this.magFilter = o !== void 0 ? o : ln, this.generateMipmaps = !1;
    const p = this;
    function m() {
      p.needsUpdate = !0, e.requestVideoFrameCallback(m);
    }
    "requestVideoFrameCallback" in e && e.requestVideoFrameCallback(m);
  }
  clone() {
    return new this.constructor(this.image).copy(this);
  }
  update() {
    const e = this.image;
    "requestVideoFrameCallback" in e === !1 && e.readyState >= e.HAVE_CURRENT_DATA && (this.needsUpdate = !0);
  }
}
class jR extends un {
  constructor(e, t) {
    super({ width: e, height: t }), this.isFramebufferTexture = !0, this.magFilter = on, this.minFilter = on, this.generateMipmaps = !1, this.needsUpdate = !0;
  }
}
class ph extends un {
  constructor(e, t, n, i, o, l, c, h, f, p, m, g) {
    super(null, l, c, h, f, p, i, o, m, g), this.isCompressedTexture = !0, this.image = { width: t, height: n }, this.mipmaps = e, this.flipY = !1, this.generateMipmaps = !1;
  }
}
class ZR extends ph {
  constructor(e, t, n, i, o, l) {
    super(e, t, n, o, l), this.isCompressedArrayTexture = !0, this.image.depth = i, this.wrapR = Pn;
  }
}
class KR extends ph {
  constructor(e, t, n) {
    super(void 0, e[0].width, e[0].height, t, n, ws), this.isCompressedCubeTexture = !0, this.isCubeTexture = !0, this.image = e;
  }
}
class JR extends un {
  constructor(e, t, n, i, o, l, c, h, f) {
    super(e, t, n, i, o, l, c, h, f), this.isCanvasTexture = !0, this.needsUpdate = !0;
  }
}
class Wi {
  constructor() {
    this.type = "Curve", this.arcLengthDivisions = 200;
  }
  // Virtual base class method to overwrite and implement in subclasses
  //	- t [0 .. 1]
  getPoint() {
    return console.warn("THREE.Curve: .getPoint() not implemented."), null;
  }
  // Get point at relative position in curve according to arc length
  // - u [0 .. 1]
  getPointAt(e, t) {
    const n = this.getUtoTmapping(e);
    return this.getPoint(n, t);
  }
  // Get sequence of points using getPoint( t )
  getPoints(e = 5) {
    const t = [];
    for (let n = 0; n <= e; n++)
      t.push(this.getPoint(n / e));
    return t;
  }
  // Get sequence of points using getPointAt( u )
  getSpacedPoints(e = 5) {
    const t = [];
    for (let n = 0; n <= e; n++)
      t.push(this.getPointAt(n / e));
    return t;
  }
  // Get total curve arc length
  getLength() {
    const e = this.getLengths();
    return e[e.length - 1];
  }
  // Get list of cumulative segment lengths
  getLengths(e = this.arcLengthDivisions) {
    if (this.cacheArcLengths && this.cacheArcLengths.length === e + 1 && !this.needsUpdate)
      return this.cacheArcLengths;
    this.needsUpdate = !1;
    const t = [];
    let n, i = this.getPoint(0), o = 0;
    t.push(0);
    for (let l = 1; l <= e; l++)
      n = this.getPoint(l / e), o += n.distanceTo(i), t.push(o), i = n;
    return this.cacheArcLengths = t, t;
  }
  updateArcLengths() {
    this.needsUpdate = !0, this.getLengths();
  }
  // Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant
  getUtoTmapping(e, t) {
    const n = this.getLengths();
    let i = 0;
    const o = n.length;
    let l;
    t ? l = t : l = e * n[o - 1];
    let c = 0, h = o - 1, f;
    for (; c <= h; )
      if (i = Math.floor(c + (h - c) / 2), f = n[i] - l, f < 0)
        c = i + 1;
      else if (f > 0)
        h = i - 1;
      else {
        h = i;
        break;
      }
    if (i = h, n[i] === l)
      return i / (o - 1);
    const p = n[i], g = n[i + 1] - p, v = (l - p) / g;
    return (i + v) / (o - 1);
  }
  // Returns a unit vector tangent at t
  // In case any sub curve does not implement its tangent derivation,
  // 2 points a small delta apart will be used to find its gradient
  // which seems to give a reasonable approximation
  getTangent(e, t) {
    let i = e - 1e-4, o = e + 1e-4;
    i < 0 && (i = 0), o > 1 && (o = 1);
    const l = this.getPoint(i), c = this.getPoint(o), h = t || (l.isVector2 ? new de() : new I());
    return h.copy(c).sub(l).normalize(), h;
  }
  getTangentAt(e, t) {
    const n = this.getUtoTmapping(e);
    return this.getTangent(n, t);
  }
  computeFrenetFrames(e, t) {
    const n = new I(), i = [], o = [], l = [], c = new I(), h = new rt();
    for (let v = 0; v <= e; v++) {
      const x = v / e;
      i[v] = this.getTangentAt(x, new I());
    }
    o[0] = new I(), l[0] = new I();
    let f = Number.MAX_VALUE;
    const p = Math.abs(i[0].x), m = Math.abs(i[0].y), g = Math.abs(i[0].z);
    p <= f && (f = p, n.set(1, 0, 0)), m <= f && (f = m, n.set(0, 1, 0)), g <= f && n.set(0, 0, 1), c.crossVectors(i[0], n).normalize(), o[0].crossVectors(i[0], c), l[0].crossVectors(i[0], o[0]);
    for (let v = 1; v <= e; v++) {
      if (o[v] = o[v - 1].clone(), l[v] = l[v - 1].clone(), c.crossVectors(i[v - 1], i[v]), c.length() > Number.EPSILON) {
        c.normalize();
        const x = Math.acos(sn(i[v - 1].dot(i[v]), -1, 1));
        o[v].applyMatrix4(h.makeRotationAxis(c, x));
      }
      l[v].crossVectors(i[v], o[v]);
    }
    if (t === !0) {
      let v = Math.acos(sn(o[0].dot(o[e]), -1, 1));
      v /= e, i[0].dot(c.crossVectors(o[0], o[e])) > 0 && (v = -v);
      for (let x = 1; x <= e; x++)
        o[x].applyMatrix4(h.makeRotationAxis(i[x], v * x)), l[x].crossVectors(i[x], o[x]);
    }
    return {
      tangents: i,
      normals: o,
      binormals: l
    };
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    return this.arcLengthDivisions = e.arcLengthDivisions, this;
  }
  toJSON() {
    const e = {
      metadata: {
        version: 4.6,
        type: "Curve",
        generator: "Curve.toJSON"
      }
    };
    return e.arcLengthDivisions = this.arcLengthDivisions, e.type = this.type, e;
  }
  fromJSON(e) {
    return this.arcLengthDivisions = e.arcLengthDivisions, this;
  }
}
class mh extends Wi {
  constructor(e = 0, t = 0, n = 1, i = 1, o = 0, l = Math.PI * 2, c = !1, h = 0) {
    super(), this.isEllipseCurve = !0, this.type = "EllipseCurve", this.aX = e, this.aY = t, this.xRadius = n, this.yRadius = i, this.aStartAngle = o, this.aEndAngle = l, this.aClockwise = c, this.aRotation = h;
  }
  getPoint(e, t) {
    const n = t || new de(), i = Math.PI * 2;
    let o = this.aEndAngle - this.aStartAngle;
    const l = Math.abs(o) < Number.EPSILON;
    for (; o < 0; ) o += i;
    for (; o > i; ) o -= i;
    o < Number.EPSILON && (l ? o = 0 : o = i), this.aClockwise === !0 && !l && (o === i ? o = -i : o = o - i);
    const c = this.aStartAngle + e * o;
    let h = this.aX + this.xRadius * Math.cos(c), f = this.aY + this.yRadius * Math.sin(c);
    if (this.aRotation !== 0) {
      const p = Math.cos(this.aRotation), m = Math.sin(this.aRotation), g = h - this.aX, v = f - this.aY;
      h = g * p - v * m + this.aX, f = g * m + v * p + this.aY;
    }
    return n.set(h, f);
  }
  copy(e) {
    return super.copy(e), this.aX = e.aX, this.aY = e.aY, this.xRadius = e.xRadius, this.yRadius = e.yRadius, this.aStartAngle = e.aStartAngle, this.aEndAngle = e.aEndAngle, this.aClockwise = e.aClockwise, this.aRotation = e.aRotation, this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.aX = this.aX, e.aY = this.aY, e.xRadius = this.xRadius, e.yRadius = this.yRadius, e.aStartAngle = this.aStartAngle, e.aEndAngle = this.aEndAngle, e.aClockwise = this.aClockwise, e.aRotation = this.aRotation, e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.aX = e.aX, this.aY = e.aY, this.xRadius = e.xRadius, this.yRadius = e.yRadius, this.aStartAngle = e.aStartAngle, this.aEndAngle = e.aEndAngle, this.aClockwise = e.aClockwise, this.aRotation = e.aRotation, this;
  }
}
class Rx extends mh {
  constructor(e, t, n, i, o, l) {
    super(e, t, n, n, i, o, l), this.isArcCurve = !0, this.type = "ArcCurve";
  }
}
function bm() {
  let a = 0, e = 0, t = 0, n = 0;
  function i(o, l, c, h) {
    a = o, e = c, t = -3 * o + 3 * l - 2 * c - h, n = 2 * o - 2 * l + c + h;
  }
  return {
    initCatmullRom: function(o, l, c, h, f) {
      i(l, c, f * (c - o), f * (h - l));
    },
    initNonuniformCatmullRom: function(o, l, c, h, f, p, m) {
      let g = (l - o) / f - (c - o) / (f + p) + (c - l) / p, v = (c - l) / p - (h - l) / (p + m) + (h - c) / m;
      g *= p, v *= p, i(l, c, g, v);
    },
    calc: function(o) {
      const l = o * o, c = l * o;
      return a + e * o + t * l + n * c;
    }
  };
}
const gu = /* @__PURE__ */ new I(), Ld = /* @__PURE__ */ new bm(), Ud = /* @__PURE__ */ new bm(), Nd = /* @__PURE__ */ new bm();
class Cx extends Wi {
  constructor(e = [], t = !1, n = "centripetal", i = 0.5) {
    super(), this.isCatmullRomCurve3 = !0, this.type = "CatmullRomCurve3", this.points = e, this.closed = t, this.curveType = n, this.tension = i;
  }
  getPoint(e, t = new I()) {
    const n = t, i = this.points, o = i.length, l = (o - (this.closed ? 0 : 1)) * e;
    let c = Math.floor(l), h = l - c;
    this.closed ? c += c > 0 ? 0 : (Math.floor(Math.abs(c) / o) + 1) * o : h === 0 && c === o - 1 && (c = o - 2, h = 1);
    let f, p;
    this.closed || c > 0 ? f = i[(c - 1) % o] : (gu.subVectors(i[0], i[1]).add(i[0]), f = gu);
    const m = i[c % o], g = i[(c + 1) % o];
    if (this.closed || c + 2 < o ? p = i[(c + 2) % o] : (gu.subVectors(i[o - 1], i[o - 2]).add(i[o - 1]), p = gu), this.curveType === "centripetal" || this.curveType === "chordal") {
      const v = this.curveType === "chordal" ? 0.5 : 0.25;
      let x = Math.pow(f.distanceToSquared(m), v), E = Math.pow(m.distanceToSquared(g), v), S = Math.pow(g.distanceToSquared(p), v);
      E < 1e-4 && (E = 1), x < 1e-4 && (x = E), S < 1e-4 && (S = E), Ld.initNonuniformCatmullRom(f.x, m.x, g.x, p.x, x, E, S), Ud.initNonuniformCatmullRom(f.y, m.y, g.y, p.y, x, E, S), Nd.initNonuniformCatmullRom(f.z, m.z, g.z, p.z, x, E, S);
    } else this.curveType === "catmullrom" && (Ld.initCatmullRom(f.x, m.x, g.x, p.x, this.tension), Ud.initCatmullRom(f.y, m.y, g.y, p.y, this.tension), Nd.initCatmullRom(f.z, m.z, g.z, p.z, this.tension));
    return n.set(
      Ld.calc(h),
      Ud.calc(h),
      Nd.calc(h)
    ), n;
  }
  copy(e) {
    super.copy(e), this.points = [];
    for (let t = 0, n = e.points.length; t < n; t++) {
      const i = e.points[t];
      this.points.push(i.clone());
    }
    return this.closed = e.closed, this.curveType = e.curveType, this.tension = e.tension, this;
  }
  toJSON() {
    const e = super.toJSON();
    e.points = [];
    for (let t = 0, n = this.points.length; t < n; t++) {
      const i = this.points[t];
      e.points.push(i.toArray());
    }
    return e.closed = this.closed, e.curveType = this.curveType, e.tension = this.tension, e;
  }
  fromJSON(e) {
    super.fromJSON(e), this.points = [];
    for (let t = 0, n = e.points.length; t < n; t++) {
      const i = e.points[t];
      this.points.push(new I().fromArray(i));
    }
    return this.closed = e.closed, this.curveType = e.curveType, this.tension = e.tension, this;
  }
}
function c_(a, e, t, n, i) {
  const o = (n - e) * 0.5, l = (i - t) * 0.5, c = a * a, h = a * c;
  return (2 * t - 2 * n + o + l) * h + (-3 * t + 3 * n - 2 * o - l) * c + o * a + t;
}
function QR(a, e) {
  const t = 1 - a;
  return t * t * e;
}
function $R(a, e) {
  return 2 * (1 - a) * a * e;
}
function eC(a, e) {
  return a * a * e;
}
function yl(a, e, t, n) {
  return QR(a, e) + $R(a, t) + eC(a, n);
}
function tC(a, e) {
  const t = 1 - a;
  return t * t * t * e;
}
function nC(a, e) {
  const t = 1 - a;
  return 3 * t * t * a * e;
}
function iC(a, e) {
  return 3 * (1 - a) * a * a * e;
}
function sC(a, e) {
  return a * a * a * e;
}
function xl(a, e, t, n, i) {
  return tC(a, e) + nC(a, t) + iC(a, n) + sC(a, i);
}
class Tm extends Wi {
  constructor(e = new de(), t = new de(), n = new de(), i = new de()) {
    super(), this.isCubicBezierCurve = !0, this.type = "CubicBezierCurve", this.v0 = e, this.v1 = t, this.v2 = n, this.v3 = i;
  }
  getPoint(e, t = new de()) {
    const n = t, i = this.v0, o = this.v1, l = this.v2, c = this.v3;
    return n.set(
      xl(e, i.x, o.x, l.x, c.x),
      xl(e, i.y, o.y, l.y, c.y)
    ), n;
  }
  copy(e) {
    return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this.v3.copy(e.v3), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e.v3 = this.v3.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this.v3.fromArray(e.v3), this;
  }
}
class Lx extends Wi {
  constructor(e = new I(), t = new I(), n = new I(), i = new I()) {
    super(), this.isCubicBezierCurve3 = !0, this.type = "CubicBezierCurve3", this.v0 = e, this.v1 = t, this.v2 = n, this.v3 = i;
  }
  getPoint(e, t = new I()) {
    const n = t, i = this.v0, o = this.v1, l = this.v2, c = this.v3;
    return n.set(
      xl(e, i.x, o.x, l.x, c.x),
      xl(e, i.y, o.y, l.y, c.y),
      xl(e, i.z, o.z, l.z, c.z)
    ), n;
  }
  copy(e) {
    return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this.v3.copy(e.v3), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e.v3 = this.v3.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this.v3.fromArray(e.v3), this;
  }
}
class Am extends Wi {
  constructor(e = new de(), t = new de()) {
    super(), this.isLineCurve = !0, this.type = "LineCurve", this.v1 = e, this.v2 = t;
  }
  getPoint(e, t = new de()) {
    const n = t;
    return e === 1 ? n.copy(this.v2) : (n.copy(this.v2).sub(this.v1), n.multiplyScalar(e).add(this.v1)), n;
  }
  // Line curve is linear, so we can overwrite default getPointAt
  getPointAt(e, t) {
    return this.getPoint(e, t);
  }
  getTangent(e, t = new de()) {
    return t.subVectors(this.v2, this.v1).normalize();
  }
  getTangentAt(e, t) {
    return this.getTangent(e, t);
  }
  copy(e) {
    return super.copy(e), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
  }
}
class Ux extends Wi {
  constructor(e = new I(), t = new I()) {
    super(), this.isLineCurve3 = !0, this.type = "LineCurve3", this.v1 = e, this.v2 = t;
  }
  getPoint(e, t = new I()) {
    const n = t;
    return e === 1 ? n.copy(this.v2) : (n.copy(this.v2).sub(this.v1), n.multiplyScalar(e).add(this.v1)), n;
  }
  // Line curve is linear, so we can overwrite default getPointAt
  getPointAt(e, t) {
    return this.getPoint(e, t);
  }
  getTangent(e, t = new I()) {
    return t.subVectors(this.v2, this.v1).normalize();
  }
  getTangentAt(e, t) {
    return this.getTangent(e, t);
  }
  copy(e) {
    return super.copy(e), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
  }
}
class wm extends Wi {
  constructor(e = new de(), t = new de(), n = new de()) {
    super(), this.isQuadraticBezierCurve = !0, this.type = "QuadraticBezierCurve", this.v0 = e, this.v1 = t, this.v2 = n;
  }
  getPoint(e, t = new de()) {
    const n = t, i = this.v0, o = this.v1, l = this.v2;
    return n.set(
      yl(e, i.x, o.x, l.x),
      yl(e, i.y, o.y, l.y)
    ), n;
  }
  copy(e) {
    return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
  }
}
class Rm extends Wi {
  constructor(e = new I(), t = new I(), n = new I()) {
    super(), this.isQuadraticBezierCurve3 = !0, this.type = "QuadraticBezierCurve3", this.v0 = e, this.v1 = t, this.v2 = n;
  }
  getPoint(e, t = new I()) {
    const n = t, i = this.v0, o = this.v1, l = this.v2;
    return n.set(
      yl(e, i.x, o.x, l.x),
      yl(e, i.y, o.y, l.y),
      yl(e, i.z, o.z, l.z)
    ), n;
  }
  copy(e) {
    return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
  }
}
class Cm extends Wi {
  constructor(e = []) {
    super(), this.isSplineCurve = !0, this.type = "SplineCurve", this.points = e;
  }
  getPoint(e, t = new de()) {
    const n = t, i = this.points, o = (i.length - 1) * e, l = Math.floor(o), c = o - l, h = i[l === 0 ? l : l - 1], f = i[l], p = i[l > i.length - 2 ? i.length - 1 : l + 1], m = i[l > i.length - 3 ? i.length - 1 : l + 2];
    return n.set(
      c_(c, h.x, f.x, p.x, m.x),
      c_(c, h.y, f.y, p.y, m.y)
    ), n;
  }
  copy(e) {
    super.copy(e), this.points = [];
    for (let t = 0, n = e.points.length; t < n; t++) {
      const i = e.points[t];
      this.points.push(i.clone());
    }
    return this;
  }
  toJSON() {
    const e = super.toJSON();
    e.points = [];
    for (let t = 0, n = this.points.length; t < n; t++) {
      const i = this.points[t];
      e.points.push(i.toArray());
    }
    return e;
  }
  fromJSON(e) {
    super.fromJSON(e), this.points = [];
    for (let t = 0, n = e.points.length; t < n; t++) {
      const i = e.points[t];
      this.points.push(new de().fromArray(i));
    }
    return this;
  }
}
var Yu = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  ArcCurve: Rx,
  CatmullRomCurve3: Cx,
  CubicBezierCurve: Tm,
  CubicBezierCurve3: Lx,
  EllipseCurve: mh,
  LineCurve: Am,
  LineCurve3: Ux,
  QuadraticBezierCurve: wm,
  QuadraticBezierCurve3: Rm,
  SplineCurve: Cm
});
class Nx extends Wi {
  constructor() {
    super(), this.type = "CurvePath", this.curves = [], this.autoClose = !1;
  }
  add(e) {
    this.curves.push(e);
  }
  closePath() {
    const e = this.curves[0].getPoint(0), t = this.curves[this.curves.length - 1].getPoint(1);
    if (!e.equals(t)) {
      const n = e.isVector2 === !0 ? "LineCurve" : "LineCurve3";
      this.curves.push(new Yu[n](t, e));
    }
    return this;
  }
  // To get accurate point with reference to
  // entire path distance at time t,
  // following has to be done:
  // 1. Length of each sub path have to be known
  // 2. Locate and identify type of curve
  // 3. Get t for the curve
  // 4. Return curve.getPointAt(t')
  getPoint(e, t) {
    const n = e * this.getLength(), i = this.getCurveLengths();
    let o = 0;
    for (; o < i.length; ) {
      if (i[o] >= n) {
        const l = i[o] - n, c = this.curves[o], h = c.getLength(), f = h === 0 ? 0 : 1 - l / h;
        return c.getPointAt(f, t);
      }
      o++;
    }
    return null;
  }
  // We cannot use the default THREE.Curve getPoint() with getLength() because in
  // THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
  // getPoint() depends on getLength
  getLength() {
    const e = this.getCurveLengths();
    return e[e.length - 1];
  }
  // cacheLengths must be recalculated.
  updateArcLengths() {
    this.needsUpdate = !0, this.cacheLengths = null, this.getCurveLengths();
  }
  // Compute lengths and cache them
  // We cannot overwrite getLengths() because UtoT mapping uses it.
  getCurveLengths() {
    if (this.cacheLengths && this.cacheLengths.length === this.curves.length)
      return this.cacheLengths;
    const e = [];
    let t = 0;
    for (let n = 0, i = this.curves.length; n < i; n++)
      t += this.curves[n].getLength(), e.push(t);
    return this.cacheLengths = e, e;
  }
  getSpacedPoints(e = 40) {
    const t = [];
    for (let n = 0; n <= e; n++)
      t.push(this.getPoint(n / e));
    return this.autoClose && t.push(t[0]), t;
  }
  getPoints(e = 12) {
    const t = [];
    let n;
    for (let i = 0, o = this.curves; i < o.length; i++) {
      const l = o[i], c = l.isEllipseCurve ? e * 2 : l.isLineCurve || l.isLineCurve3 ? 1 : l.isSplineCurve ? e * l.points.length : e, h = l.getPoints(c);
      for (let f = 0; f < h.length; f++) {
        const p = h[f];
        n && n.equals(p) || (t.push(p), n = p);
      }
    }
    return this.autoClose && t.length > 1 && !t[t.length - 1].equals(t[0]) && t.push(t[0]), t;
  }
  copy(e) {
    super.copy(e), this.curves = [];
    for (let t = 0, n = e.curves.length; t < n; t++) {
      const i = e.curves[t];
      this.curves.push(i.clone());
    }
    return this.autoClose = e.autoClose, this;
  }
  toJSON() {
    const e = super.toJSON();
    e.autoClose = this.autoClose, e.curves = [];
    for (let t = 0, n = this.curves.length; t < n; t++) {
      const i = this.curves[t];
      e.curves.push(i.toJSON());
    }
    return e;
  }
  fromJSON(e) {
    super.fromJSON(e), this.autoClose = e.autoClose, this.curves = [];
    for (let t = 0, n = e.curves.length; t < n; t++) {
      const i = e.curves[t];
      this.curves.push(new Yu[i.type]().fromJSON(i));
    }
    return this;
  }
}
class Ol extends Nx {
  constructor(e) {
    super(), this.type = "Path", this.currentPoint = new de(), e && this.setFromPoints(e);
  }
  setFromPoints(e) {
    this.moveTo(e[0].x, e[0].y);
    for (let t = 1, n = e.length; t < n; t++)
      this.lineTo(e[t].x, e[t].y);
    return this;
  }
  moveTo(e, t) {
    return this.currentPoint.set(e, t), this;
  }
  lineTo(e, t) {
    const n = new Am(this.currentPoint.clone(), new de(e, t));
    return this.curves.push(n), this.currentPoint.set(e, t), this;
  }
  quadraticCurveTo(e, t, n, i) {
    const o = new wm(
      this.currentPoint.clone(),
      new de(e, t),
      new de(n, i)
    );
    return this.curves.push(o), this.currentPoint.set(n, i), this;
  }
  bezierCurveTo(e, t, n, i, o, l) {
    const c = new Tm(
      this.currentPoint.clone(),
      new de(e, t),
      new de(n, i),
      new de(o, l)
    );
    return this.curves.push(c), this.currentPoint.set(o, l), this;
  }
  splineThru(e) {
    const t = [this.currentPoint.clone()].concat(e), n = new Cm(t);
    return this.curves.push(n), this.currentPoint.copy(e[e.length - 1]), this;
  }
  arc(e, t, n, i, o, l) {
    const c = this.currentPoint.x, h = this.currentPoint.y;
    return this.absarc(
      e + c,
      t + h,
      n,
      i,
      o,
      l
    ), this;
  }
  absarc(e, t, n, i, o, l) {
    return this.absellipse(e, t, n, n, i, o, l), this;
  }
  ellipse(e, t, n, i, o, l, c, h) {
    const f = this.currentPoint.x, p = this.currentPoint.y;
    return this.absellipse(e + f, t + p, n, i, o, l, c, h), this;
  }
  absellipse(e, t, n, i, o, l, c, h) {
    const f = new mh(e, t, n, i, o, l, c, h);
    if (this.curves.length > 0) {
      const m = f.getPoint(0);
      m.equals(this.currentPoint) || this.lineTo(m.x, m.y);
    }
    this.curves.push(f);
    const p = f.getPoint(1);
    return this.currentPoint.copy(p), this;
  }
  copy(e) {
    return super.copy(e), this.currentPoint.copy(e.currentPoint), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.currentPoint = this.currentPoint.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.currentPoint.fromArray(e.currentPoint), this;
  }
}
class Zl extends xt {
  constructor(e = [new de(0, -0.5), new de(0.5, 0), new de(0, 0.5)], t = 12, n = 0, i = Math.PI * 2) {
    super(), this.type = "LatheGeometry", this.parameters = {
      points: e,
      segments: t,
      phiStart: n,
      phiLength: i
    }, t = Math.floor(t), i = sn(i, 0, Math.PI * 2);
    const o = [], l = [], c = [], h = [], f = [], p = 1 / t, m = new I(), g = new de(), v = new I(), x = new I(), E = new I();
    let S = 0, y = 0;
    for (let T = 0; T <= e.length - 1; T++)
      switch (T) {
        case 0:
          S = e[T + 1].x - e[T].x, y = e[T + 1].y - e[T].y, v.x = y * 1, v.y = -S, v.z = y * 0, E.copy(v), v.normalize(), h.push(v.x, v.y, v.z);
          break;
        case e.length - 1:
          h.push(E.x, E.y, E.z);
          break;
        default:
          S = e[T + 1].x - e[T].x, y = e[T + 1].y - e[T].y, v.x = y * 1, v.y = -S, v.z = y * 0, x.copy(v), v.x += E.x, v.y += E.y, v.z += E.z, v.normalize(), h.push(v.x, v.y, v.z), E.copy(x);
      }
    for (let T = 0; T <= t; T++) {
      const b = n + T * p * i, A = Math.sin(b), N = Math.cos(b);
      for (let R = 0; R <= e.length - 1; R++) {
        m.x = e[R].x * A, m.y = e[R].y, m.z = e[R].x * N, l.push(m.x, m.y, m.z), g.x = T / t, g.y = R / (e.length - 1), c.push(g.x, g.y);
        const P = h[3 * R + 0] * A, H = h[3 * R + 1], w = h[3 * R + 0] * N;
        f.push(P, H, w);
      }
    }
    for (let T = 0; T < t; T++)
      for (let b = 0; b < e.length - 1; b++) {
        const A = b + T * e.length, N = A, R = A + e.length, P = A + e.length + 1, H = A + 1;
        o.push(N, R, H), o.push(P, H, R);
      }
    this.setIndex(o), this.setAttribute("position", new Ye(l, 3)), this.setAttribute("uv", new Ye(c, 2)), this.setAttribute("normal", new Ye(f, 3));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new Zl(e.points, e.segments, e.phiStart, e.phiLength);
  }
}
class gh extends Zl {
  constructor(e = 1, t = 1, n = 4, i = 8) {
    const o = new Ol();
    o.absarc(0, -t / 2, e, Math.PI * 1.5, 0), o.absarc(0, t / 2, e, 0, Math.PI * 0.5), super(o.getPoints(n), i), this.type = "CapsuleGeometry", this.parameters = {
      radius: e,
      length: t,
      capSegments: n,
      radialSegments: i
    };
  }
  static fromJSON(e) {
    return new gh(e.radius, e.length, e.capSegments, e.radialSegments);
  }
}
class vh extends xt {
  constructor(e = 1, t = 32, n = 0, i = Math.PI * 2) {
    super(), this.type = "CircleGeometry", this.parameters = {
      radius: e,
      segments: t,
      thetaStart: n,
      thetaLength: i
    }, t = Math.max(3, t);
    const o = [], l = [], c = [], h = [], f = new I(), p = new de();
    l.push(0, 0, 0), c.push(0, 0, 1), h.push(0.5, 0.5);
    for (let m = 0, g = 3; m <= t; m++, g += 3) {
      const v = n + m / t * i;
      f.x = e * Math.cos(v), f.y = e * Math.sin(v), l.push(f.x, f.y, f.z), c.push(0, 0, 1), p.x = (l[g] / e + 1) / 2, p.y = (l[g + 1] / e + 1) / 2, h.push(p.x, p.y);
    }
    for (let m = 1; m <= t; m++)
      o.push(m, m + 1, 0);
    this.setIndex(o), this.setAttribute("position", new Ye(l, 3)), this.setAttribute("normal", new Ye(c, 3)), this.setAttribute("uv", new Ye(h, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new vh(e.radius, e.segments, e.thetaStart, e.thetaLength);
  }
}
class Ao extends xt {
  constructor(e = 1, t = 1, n = 1, i = 32, o = 1, l = !1, c = 0, h = Math.PI * 2) {
    super(), this.type = "CylinderGeometry", this.parameters = {
      radiusTop: e,
      radiusBottom: t,
      height: n,
      radialSegments: i,
      heightSegments: o,
      openEnded: l,
      thetaStart: c,
      thetaLength: h
    };
    const f = this;
    i = Math.floor(i), o = Math.floor(o);
    const p = [], m = [], g = [], v = [];
    let x = 0;
    const E = [], S = n / 2;
    let y = 0;
    T(), l === !1 && (e > 0 && b(!0), t > 0 && b(!1)), this.setIndex(p), this.setAttribute("position", new Ye(m, 3)), this.setAttribute("normal", new Ye(g, 3)), this.setAttribute("uv", new Ye(v, 2));
    function T() {
      const A = new I(), N = new I();
      let R = 0;
      const P = (t - e) / n;
      for (let H = 0; H <= o; H++) {
        const w = [], C = H / o, X = C * (t - e) + e;
        for (let ne = 0; ne <= i; ne++) {
          const ae = ne / i, z = ae * h + c, q = Math.sin(z), W = Math.cos(z);
          N.x = X * q, N.y = -C * n + S, N.z = X * W, m.push(N.x, N.y, N.z), A.set(q, P, W).normalize(), g.push(A.x, A.y, A.z), v.push(ae, 1 - C), w.push(x++);
        }
        E.push(w);
      }
      for (let H = 0; H < i; H++)
        for (let w = 0; w < o; w++) {
          const C = E[w][H], X = E[w + 1][H], ne = E[w + 1][H + 1], ae = E[w][H + 1];
          p.push(C, X, ae), p.push(X, ne, ae), R += 6;
        }
      f.addGroup(y, R, 0), y += R;
    }
    function b(A) {
      const N = x, R = new de(), P = new I();
      let H = 0;
      const w = A === !0 ? e : t, C = A === !0 ? 1 : -1;
      for (let ne = 1; ne <= i; ne++)
        m.push(0, S * C, 0), g.push(0, C, 0), v.push(0.5, 0.5), x++;
      const X = x;
      for (let ne = 0; ne <= i; ne++) {
        const z = ne / i * h + c, q = Math.cos(z), W = Math.sin(z);
        P.x = w * W, P.y = S * C, P.z = w * q, m.push(P.x, P.y, P.z), g.push(0, C, 0), R.x = q * 0.5 + 0.5, R.y = W * 0.5 * C + 0.5, v.push(R.x, R.y), x++;
      }
      for (let ne = 0; ne < i; ne++) {
        const ae = N + ne, z = X + ne;
        A === !0 ? p.push(z, z + 1, ae) : p.push(z + 1, z, ae), H += 3;
      }
      f.addGroup(y, H, A === !0 ? 1 : 2), y += H;
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new Ao(e.radiusTop, e.radiusBottom, e.height, e.radialSegments, e.heightSegments, e.openEnded, e.thetaStart, e.thetaLength);
  }
}
class _h extends Ao {
  constructor(e = 1, t = 1, n = 32, i = 1, o = !1, l = 0, c = Math.PI * 2) {
    super(0, e, t, n, i, o, l, c), this.type = "ConeGeometry", this.parameters = {
      radius: e,
      height: t,
      radialSegments: n,
      heightSegments: i,
      openEnded: o,
      thetaStart: l,
      thetaLength: c
    };
  }
  static fromJSON(e) {
    return new _h(e.radius, e.height, e.radialSegments, e.heightSegments, e.openEnded, e.thetaStart, e.thetaLength);
  }
}
class la extends xt {
  constructor(e = [], t = [], n = 1, i = 0) {
    super(), this.type = "PolyhedronGeometry", this.parameters = {
      vertices: e,
      indices: t,
      radius: n,
      detail: i
    };
    const o = [], l = [];
    c(i), f(n), p(), this.setAttribute("position", new Ye(o, 3)), this.setAttribute("normal", new Ye(o.slice(), 3)), this.setAttribute("uv", new Ye(l, 2)), i === 0 ? this.computeVertexNormals() : this.normalizeNormals();
    function c(T) {
      const b = new I(), A = new I(), N = new I();
      for (let R = 0; R < t.length; R += 3)
        v(t[R + 0], b), v(t[R + 1], A), v(t[R + 2], N), h(b, A, N, T);
    }
    function h(T, b, A, N) {
      const R = N + 1, P = [];
      for (let H = 0; H <= R; H++) {
        P[H] = [];
        const w = T.clone().lerp(A, H / R), C = b.clone().lerp(A, H / R), X = R - H;
        for (let ne = 0; ne <= X; ne++)
          ne === 0 && H === R ? P[H][ne] = w : P[H][ne] = w.clone().lerp(C, ne / X);
      }
      for (let H = 0; H < R; H++)
        for (let w = 0; w < 2 * (R - H) - 1; w++) {
          const C = Math.floor(w / 2);
          w % 2 === 0 ? (g(P[H][C + 1]), g(P[H + 1][C]), g(P[H][C])) : (g(P[H][C + 1]), g(P[H + 1][C + 1]), g(P[H + 1][C]));
        }
    }
    function f(T) {
      const b = new I();
      for (let A = 0; A < o.length; A += 3)
        b.x = o[A + 0], b.y = o[A + 1], b.z = o[A + 2], b.normalize().multiplyScalar(T), o[A + 0] = b.x, o[A + 1] = b.y, o[A + 2] = b.z;
    }
    function p() {
      const T = new I();
      for (let b = 0; b < o.length; b += 3) {
        T.x = o[b + 0], T.y = o[b + 1], T.z = o[b + 2];
        const A = S(T) / 2 / Math.PI + 0.5, N = y(T) / Math.PI + 0.5;
        l.push(A, 1 - N);
      }
      x(), m();
    }
    function m() {
      for (let T = 0; T < l.length; T += 6) {
        const b = l[T + 0], A = l[T + 2], N = l[T + 4], R = Math.max(b, A, N), P = Math.min(b, A, N);
        R > 0.9 && P < 0.1 && (b < 0.2 && (l[T + 0] += 1), A < 0.2 && (l[T + 2] += 1), N < 0.2 && (l[T + 4] += 1));
      }
    }
    function g(T) {
      o.push(T.x, T.y, T.z);
    }
    function v(T, b) {
      const A = T * 3;
      b.x = e[A + 0], b.y = e[A + 1], b.z = e[A + 2];
    }
    function x() {
      const T = new I(), b = new I(), A = new I(), N = new I(), R = new de(), P = new de(), H = new de();
      for (let w = 0, C = 0; w < o.length; w += 9, C += 6) {
        T.set(o[w + 0], o[w + 1], o[w + 2]), b.set(o[w + 3], o[w + 4], o[w + 5]), A.set(o[w + 6], o[w + 7], o[w + 8]), R.set(l[C + 0], l[C + 1]), P.set(l[C + 2], l[C + 3]), H.set(l[C + 4], l[C + 5]), N.copy(T).add(b).add(A).divideScalar(3);
        const X = S(N);
        E(R, C + 0, T, X), E(P, C + 2, b, X), E(H, C + 4, A, X);
      }
    }
    function E(T, b, A, N) {
      N < 0 && T.x === 1 && (l[b] = T.x - 1), A.x === 0 && A.z === 0 && (l[b] = N / 2 / Math.PI + 0.5);
    }
    function S(T) {
      return Math.atan2(T.z, -T.x);
    }
    function y(T) {
      return Math.atan2(-T.y, Math.sqrt(T.x * T.x + T.z * T.z));
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new la(e.vertices, e.indices, e.radius, e.details);
  }
}
class yh extends la {
  constructor(e = 1, t = 0) {
    const n = (1 + Math.sqrt(5)) / 2, i = 1 / n, o = [
      // (±1, ±1, ±1)
      -1,
      -1,
      -1,
      -1,
      -1,
      1,
      -1,
      1,
      -1,
      -1,
      1,
      1,
      1,
      -1,
      -1,
      1,
      -1,
      1,
      1,
      1,
      -1,
      1,
      1,
      1,
      // (0, ±1/φ, ±φ)
      0,
      -i,
      -n,
      0,
      -i,
      n,
      0,
      i,
      -n,
      0,
      i,
      n,
      // (±1/φ, ±φ, 0)
      -i,
      -n,
      0,
      -i,
      n,
      0,
      i,
      -n,
      0,
      i,
      n,
      0,
      // (±φ, 0, ±1/φ)
      -n,
      0,
      -i,
      n,
      0,
      -i,
      -n,
      0,
      i,
      n,
      0,
      i
    ], l = [
      3,
      11,
      7,
      3,
      7,
      15,
      3,
      15,
      13,
      7,
      19,
      17,
      7,
      17,
      6,
      7,
      6,
      15,
      17,
      4,
      8,
      17,
      8,
      10,
      17,
      10,
      6,
      8,
      0,
      16,
      8,
      16,
      2,
      8,
      2,
      10,
      0,
      12,
      1,
      0,
      1,
      18,
      0,
      18,
      16,
      6,
      10,
      2,
      6,
      2,
      13,
      6,
      13,
      15,
      2,
      16,
      18,
      2,
      18,
      3,
      2,
      3,
      13,
      18,
      1,
      9,
      18,
      9,
      11,
      18,
      11,
      3,
      4,
      14,
      12,
      4,
      12,
      0,
      4,
      0,
      8,
      11,
      9,
      5,
      11,
      5,
      19,
      11,
      19,
      7,
      19,
      5,
      14,
      19,
      14,
      4,
      19,
      4,
      17,
      1,
      12,
      14,
      1,
      14,
      5,
      1,
      5,
      9
    ];
    super(o, l, e, t), this.type = "DodecahedronGeometry", this.parameters = {
      radius: e,
      detail: t
    };
  }
  static fromJSON(e) {
    return new yh(e.radius, e.detail);
  }
}
const vu = /* @__PURE__ */ new I(), _u = /* @__PURE__ */ new I(), Dd = /* @__PURE__ */ new I(), yu = /* @__PURE__ */ new $n();
class Dx extends xt {
  constructor(e = null, t = 1) {
    if (super(), this.type = "EdgesGeometry", this.parameters = {
      geometry: e,
      thresholdAngle: t
    }, e !== null) {
      const i = Math.pow(10, 4), o = Math.cos($a * t), l = e.getIndex(), c = e.getAttribute("position"), h = l ? l.count : c.count, f = [0, 0, 0], p = ["a", "b", "c"], m = new Array(3), g = {}, v = [];
      for (let x = 0; x < h; x += 3) {
        l ? (f[0] = l.getX(x), f[1] = l.getX(x + 1), f[2] = l.getX(x + 2)) : (f[0] = x, f[1] = x + 1, f[2] = x + 2);
        const { a: E, b: S, c: y } = yu;
        if (E.fromBufferAttribute(c, f[0]), S.fromBufferAttribute(c, f[1]), y.fromBufferAttribute(c, f[2]), yu.getNormal(Dd), m[0] = `${Math.round(E.x * i)},${Math.round(E.y * i)},${Math.round(E.z * i)}`, m[1] = `${Math.round(S.x * i)},${Math.round(S.y * i)},${Math.round(S.z * i)}`, m[2] = `${Math.round(y.x * i)},${Math.round(y.y * i)},${Math.round(y.z * i)}`, !(m[0] === m[1] || m[1] === m[2] || m[2] === m[0]))
          for (let T = 0; T < 3; T++) {
            const b = (T + 1) % 3, A = m[T], N = m[b], R = yu[p[T]], P = yu[p[b]], H = `${A}_${N}`, w = `${N}_${A}`;
            w in g && g[w] ? (Dd.dot(g[w].normal) <= o && (v.push(R.x, R.y, R.z), v.push(P.x, P.y, P.z)), g[w] = null) : H in g || (g[H] = {
              index0: f[T],
              index1: f[b],
              normal: Dd.clone()
            });
          }
      }
      for (const x in g)
        if (g[x]) {
          const { index0: E, index1: S } = g[x];
          vu.fromBufferAttribute(c, E), _u.fromBufferAttribute(c, S), v.push(vu.x, vu.y, vu.z), v.push(_u.x, _u.y, _u.z);
        }
      this.setAttribute("position", new Ye(v, 3));
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
}
class tr extends Ol {
  constructor(e) {
    super(e), this.uuid = mi(), this.type = "Shape", this.holes = [];
  }
  getPointsHoles(e) {
    const t = [];
    for (let n = 0, i = this.holes.length; n < i; n++)
      t[n] = this.holes[n].getPoints(e);
    return t;
  }
  // get points of shape and holes (keypoints based on segments parameter)
  extractPoints(e) {
    return {
      shape: this.getPoints(e),
      holes: this.getPointsHoles(e)
    };
  }
  copy(e) {
    super.copy(e), this.holes = [];
    for (let t = 0, n = e.holes.length; t < n; t++) {
      const i = e.holes[t];
      this.holes.push(i.clone());
    }
    return this;
  }
  toJSON() {
    const e = super.toJSON();
    e.uuid = this.uuid, e.holes = [];
    for (let t = 0, n = this.holes.length; t < n; t++) {
      const i = this.holes[t];
      e.holes.push(i.toJSON());
    }
    return e;
  }
  fromJSON(e) {
    super.fromJSON(e), this.uuid = e.uuid, this.holes = [];
    for (let t = 0, n = e.holes.length; t < n; t++) {
      const i = e.holes[t];
      this.holes.push(new Ol().fromJSON(i));
    }
    return this;
  }
}
const aC = {
  triangulate: function(a, e, t = 2) {
    const n = e && e.length, i = n ? e[0] * t : a.length;
    let o = Px(a, 0, i, t, !0);
    const l = [];
    if (!o || o.next === o.prev) return l;
    let c, h, f, p, m, g, v;
    if (n && (o = uC(a, e, o, t)), a.length > 80 * t) {
      c = f = a[0], h = p = a[1];
      for (let x = t; x < i; x += t)
        m = a[x], g = a[x + 1], m < c && (c = m), g < h && (h = g), m > f && (f = m), g > p && (p = g);
      v = Math.max(f - c, p - h), v = v !== 0 ? 32767 / v : 0;
    }
    return Il(o, l, t, c, h, v, 0), l;
  }
};
function Px(a, e, t, n, i) {
  let o, l;
  if (i === SC(a, e, t, n) > 0)
    for (o = e; o < t; o += n) l = u_(o, a[o], a[o + 1], l);
  else
    for (o = t - n; o >= e; o -= n) l = u_(o, a[o], a[o + 1], l);
  return l && xh(l, l.next) && (Bl(l), l = l.next), l;
}
function sr(a, e) {
  if (!a) return a;
  e || (e = a);
  let t = a, n;
  do
    if (n = !1, !t.steiner && (xh(t, t.next) || Jt(t.prev, t, t.next) === 0)) {
      if (Bl(t), t = e = t.prev, t === t.next) break;
      n = !0;
    } else
      t = t.next;
  while (n || t !== e);
  return e;
}
function Il(a, e, t, n, i, o, l) {
  if (!a) return;
  !l && o && mC(a, n, i, o);
  let c = a, h, f;
  for (; a.prev !== a.next; ) {
    if (h = a.prev, f = a.next, o ? oC(a, n, i, o) : rC(a)) {
      e.push(h.i / t | 0), e.push(a.i / t | 0), e.push(f.i / t | 0), Bl(a), a = f.next, c = f.next;
      continue;
    }
    if (a = f, a === c) {
      l ? l === 1 ? (a = lC(sr(a), e, t), Il(a, e, t, n, i, o, 2)) : l === 2 && cC(a, e, t, n, i, o) : Il(sr(a), e, t, n, i, o, 1);
      break;
    }
  }
}
function rC(a) {
  const e = a.prev, t = a, n = a.next;
  if (Jt(e, t, n) >= 0) return !1;
  const i = e.x, o = t.x, l = n.x, c = e.y, h = t.y, f = n.y, p = i < o ? i < l ? i : l : o < l ? o : l, m = c < h ? c < f ? c : f : h < f ? h : f, g = i > o ? i > l ? i : l : o > l ? o : l, v = c > h ? c > f ? c : f : h > f ? h : f;
  let x = n.next;
  for (; x !== e; ) {
    if (x.x >= p && x.x <= g && x.y >= m && x.y <= v && po(i, c, o, h, l, f, x.x, x.y) && Jt(x.prev, x, x.next) >= 0) return !1;
    x = x.next;
  }
  return !0;
}
function oC(a, e, t, n) {
  const i = a.prev, o = a, l = a.next;
  if (Jt(i, o, l) >= 0) return !1;
  const c = i.x, h = o.x, f = l.x, p = i.y, m = o.y, g = l.y, v = c < h ? c < f ? c : f : h < f ? h : f, x = p < m ? p < g ? p : g : m < g ? m : g, E = c > h ? c > f ? c : f : h > f ? h : f, S = p > m ? p > g ? p : g : m > g ? m : g, y = Hp(v, x, e, t, n), T = Hp(E, S, e, t, n);
  let b = a.prevZ, A = a.nextZ;
  for (; b && b.z >= y && A && A.z <= T; ) {
    if (b.x >= v && b.x <= E && b.y >= x && b.y <= S && b !== i && b !== l && po(c, p, h, m, f, g, b.x, b.y) && Jt(b.prev, b, b.next) >= 0 || (b = b.prevZ, A.x >= v && A.x <= E && A.y >= x && A.y <= S && A !== i && A !== l && po(c, p, h, m, f, g, A.x, A.y) && Jt(A.prev, A, A.next) >= 0)) return !1;
    A = A.nextZ;
  }
  for (; b && b.z >= y; ) {
    if (b.x >= v && b.x <= E && b.y >= x && b.y <= S && b !== i && b !== l && po(c, p, h, m, f, g, b.x, b.y) && Jt(b.prev, b, b.next) >= 0) return !1;
    b = b.prevZ;
  }
  for (; A && A.z <= T; ) {
    if (A.x >= v && A.x <= E && A.y >= x && A.y <= S && A !== i && A !== l && po(c, p, h, m, f, g, A.x, A.y) && Jt(A.prev, A, A.next) >= 0) return !1;
    A = A.nextZ;
  }
  return !0;
}
function lC(a, e, t) {
  let n = a;
  do {
    const i = n.prev, o = n.next.next;
    !xh(i, o) && Ox(i, n, n.next, o) && zl(i, o) && zl(o, i) && (e.push(i.i / t | 0), e.push(n.i / t | 0), e.push(o.i / t | 0), Bl(n), Bl(n.next), n = a = o), n = n.next;
  } while (n !== a);
  return sr(n);
}
function cC(a, e, t, n, i, o) {
  let l = a;
  do {
    let c = l.next.next;
    for (; c !== l.prev; ) {
      if (l.i !== c.i && _C(l, c)) {
        let h = Ix(l, c);
        l = sr(l, l.next), h = sr(h, h.next), Il(l, e, t, n, i, o, 0), Il(h, e, t, n, i, o, 0);
        return;
      }
      c = c.next;
    }
    l = l.next;
  } while (l !== a);
}
function uC(a, e, t, n) {
  const i = [];
  let o, l, c, h, f;
  for (o = 0, l = e.length; o < l; o++)
    c = e[o] * n, h = o < l - 1 ? e[o + 1] * n : a.length, f = Px(a, c, h, n, !1), f === f.next && (f.steiner = !0), i.push(vC(f));
  for (i.sort(hC), o = 0; o < i.length; o++)
    t = fC(i[o], t);
  return t;
}
function hC(a, e) {
  return a.x - e.x;
}
function fC(a, e) {
  const t = dC(a, e);
  if (!t)
    return e;
  const n = Ix(t, a);
  return sr(n, n.next), sr(t, t.next);
}
function dC(a, e) {
  let t = e, n = -1 / 0, i;
  const o = a.x, l = a.y;
  do {
    if (l <= t.y && l >= t.next.y && t.next.y !== t.y) {
      const g = t.x + (l - t.y) * (t.next.x - t.x) / (t.next.y - t.y);
      if (g <= o && g > n && (n = g, i = t.x < t.next.x ? t : t.next, g === o))
        return i;
    }
    t = t.next;
  } while (t !== e);
  if (!i) return null;
  const c = i, h = i.x, f = i.y;
  let p = 1 / 0, m;
  t = i;
  do
    o >= t.x && t.x >= h && o !== t.x && po(l < f ? o : n, l, h, f, l < f ? n : o, l, t.x, t.y) && (m = Math.abs(l - t.y) / (o - t.x), zl(t, a) && (m < p || m === p && (t.x > i.x || t.x === i.x && pC(i, t))) && (i = t, p = m)), t = t.next;
  while (t !== c);
  return i;
}
function pC(a, e) {
  return Jt(a.prev, a, e.prev) < 0 && Jt(e.next, a, a.next) < 0;
}
function mC(a, e, t, n) {
  let i = a;
  do
    i.z === 0 && (i.z = Hp(i.x, i.y, e, t, n)), i.prevZ = i.prev, i.nextZ = i.next, i = i.next;
  while (i !== a);
  i.prevZ.nextZ = null, i.prevZ = null, gC(i);
}
function gC(a) {
  let e, t, n, i, o, l, c, h, f = 1;
  do {
    for (t = a, a = null, o = null, l = 0; t; ) {
      for (l++, n = t, c = 0, e = 0; e < f && (c++, n = n.nextZ, !!n); e++)
        ;
      for (h = f; c > 0 || h > 0 && n; )
        c !== 0 && (h === 0 || !n || t.z <= n.z) ? (i = t, t = t.nextZ, c--) : (i = n, n = n.nextZ, h--), o ? o.nextZ = i : a = i, i.prevZ = o, o = i;
      t = n;
    }
    o.nextZ = null, f *= 2;
  } while (l > 1);
  return a;
}
function Hp(a, e, t, n, i) {
  return a = (a - t) * i | 0, e = (e - n) * i | 0, a = (a | a << 8) & 16711935, a = (a | a << 4) & 252645135, a = (a | a << 2) & 858993459, a = (a | a << 1) & 1431655765, e = (e | e << 8) & 16711935, e = (e | e << 4) & 252645135, e = (e | e << 2) & 858993459, e = (e | e << 1) & 1431655765, a | e << 1;
}
function vC(a) {
  let e = a, t = a;
  do
    (e.x < t.x || e.x === t.x && e.y < t.y) && (t = e), e = e.next;
  while (e !== a);
  return t;
}
function po(a, e, t, n, i, o, l, c) {
  return (i - l) * (e - c) >= (a - l) * (o - c) && (a - l) * (n - c) >= (t - l) * (e - c) && (t - l) * (o - c) >= (i - l) * (n - c);
}
function _C(a, e) {
  return a.next.i !== e.i && a.prev.i !== e.i && !yC(a, e) && // dones't intersect other edges
  (zl(a, e) && zl(e, a) && xC(a, e) && // locally visible
  (Jt(a.prev, a, e.prev) || Jt(a, e.prev, e)) || // does not create opposite-facing sectors
  xh(a, e) && Jt(a.prev, a, a.next) > 0 && Jt(e.prev, e, e.next) > 0);
}
function Jt(a, e, t) {
  return (e.y - a.y) * (t.x - e.x) - (e.x - a.x) * (t.y - e.y);
}
function xh(a, e) {
  return a.x === e.x && a.y === e.y;
}
function Ox(a, e, t, n) {
  const i = Su(Jt(a, e, t)), o = Su(Jt(a, e, n)), l = Su(Jt(t, n, a)), c = Su(Jt(t, n, e));
  return !!(i !== o && l !== c || i === 0 && xu(a, t, e) || o === 0 && xu(a, n, e) || l === 0 && xu(t, a, n) || c === 0 && xu(t, e, n));
}
function xu(a, e, t) {
  return e.x <= Math.max(a.x, t.x) && e.x >= Math.min(a.x, t.x) && e.y <= Math.max(a.y, t.y) && e.y >= Math.min(a.y, t.y);
}
function Su(a) {
  return a > 0 ? 1 : a < 0 ? -1 : 0;
}
function yC(a, e) {
  let t = a;
  do {
    if (t.i !== a.i && t.next.i !== a.i && t.i !== e.i && t.next.i !== e.i && Ox(t, t.next, a, e)) return !0;
    t = t.next;
  } while (t !== a);
  return !1;
}
function zl(a, e) {
  return Jt(a.prev, a, a.next) < 0 ? Jt(a, e, a.next) >= 0 && Jt(a, a.prev, e) >= 0 : Jt(a, e, a.prev) < 0 || Jt(a, a.next, e) < 0;
}
function xC(a, e) {
  let t = a, n = !1;
  const i = (a.x + e.x) / 2, o = (a.y + e.y) / 2;
  do
    t.y > o != t.next.y > o && t.next.y !== t.y && i < (t.next.x - t.x) * (o - t.y) / (t.next.y - t.y) + t.x && (n = !n), t = t.next;
  while (t !== a);
  return n;
}
function Ix(a, e) {
  const t = new Fp(a.i, a.x, a.y), n = new Fp(e.i, e.x, e.y), i = a.next, o = e.prev;
  return a.next = e, e.prev = a, t.next = i, i.prev = t, n.next = t, t.prev = n, o.next = n, n.prev = o, n;
}
function u_(a, e, t, n) {
  const i = new Fp(a, e, t);
  return n ? (i.next = n.next, i.prev = n, n.next.prev = i, n.next = i) : (i.prev = i, i.next = i), i;
}
function Bl(a) {
  a.next.prev = a.prev, a.prev.next = a.next, a.prevZ && (a.prevZ.nextZ = a.nextZ), a.nextZ && (a.nextZ.prevZ = a.prevZ);
}
function Fp(a, e, t) {
  this.i = a, this.x = e, this.y = t, this.prev = null, this.next = null, this.z = 0, this.prevZ = null, this.nextZ = null, this.steiner = !1;
}
function SC(a, e, t, n) {
  let i = 0;
  for (let o = e, l = t - n; o < t; o += n)
    i += (a[l] - a[o]) * (a[o + 1] + a[l + 1]), l = o;
  return i;
}
class $i {
  // calculate area of the contour polygon
  static area(e) {
    const t = e.length;
    let n = 0;
    for (let i = t - 1, o = 0; o < t; i = o++)
      n += e[i].x * e[o].y - e[o].x * e[i].y;
    return n * 0.5;
  }
  static isClockWise(e) {
    return $i.area(e) < 0;
  }
  static triangulateShape(e, t) {
    const n = [], i = [], o = [];
    h_(e), f_(n, e);
    let l = e.length;
    t.forEach(h_);
    for (let h = 0; h < t.length; h++)
      i.push(l), l += t[h].length, f_(n, t[h]);
    const c = aC.triangulate(n, i);
    for (let h = 0; h < c.length; h += 3)
      o.push(c.slice(h, h + 3));
    return o;
  }
}
function h_(a) {
  const e = a.length;
  e > 2 && a[e - 1].equals(a[0]) && a.pop();
}
function f_(a, e) {
  for (let t = 0; t < e.length; t++)
    a.push(e[t].x), a.push(e[t].y);
}
class Sh extends xt {
  constructor(e = new tr([new de(0.5, 0.5), new de(-0.5, 0.5), new de(-0.5, -0.5), new de(0.5, -0.5)]), t = {}) {
    super(), this.type = "ExtrudeGeometry", this.parameters = {
      shapes: e,
      options: t
    }, e = Array.isArray(e) ? e : [e];
    const n = this, i = [], o = [];
    for (let c = 0, h = e.length; c < h; c++) {
      const f = e[c];
      l(f);
    }
    this.setAttribute("position", new Ye(i, 3)), this.setAttribute("uv", new Ye(o, 2)), this.computeVertexNormals();
    function l(c) {
      const h = [], f = t.curveSegments !== void 0 ? t.curveSegments : 12, p = t.steps !== void 0 ? t.steps : 1, m = t.depth !== void 0 ? t.depth : 1;
      let g = t.bevelEnabled !== void 0 ? t.bevelEnabled : !0, v = t.bevelThickness !== void 0 ? t.bevelThickness : 0.2, x = t.bevelSize !== void 0 ? t.bevelSize : v - 0.1, E = t.bevelOffset !== void 0 ? t.bevelOffset : 0, S = t.bevelSegments !== void 0 ? t.bevelSegments : 3;
      const y = t.extrudePath, T = t.UVGenerator !== void 0 ? t.UVGenerator : MC;
      let b, A = !1, N, R, P, H;
      y && (b = y.getSpacedPoints(p), A = !0, g = !1, N = y.computeFrenetFrames(p, !1), R = new I(), P = new I(), H = new I()), g || (S = 0, v = 0, x = 0, E = 0);
      const w = c.extractPoints(f);
      let C = w.shape;
      const X = w.holes;
      if (!$i.isClockWise(C)) {
        C = C.reverse();
        for (let F = 0, Ee = X.length; F < Ee; F++) {
          const ue = X[F];
          $i.isClockWise(ue) && (X[F] = ue.reverse());
        }
      }
      const ae = $i.triangulateShape(C, X), z = C;
      for (let F = 0, Ee = X.length; F < Ee; F++) {
        const ue = X[F];
        C = C.concat(ue);
      }
      function q(F, Ee, ue) {
        return Ee || console.error("THREE.ExtrudeGeometry: vec does not exist"), F.clone().addScaledVector(Ee, ue);
      }
      const W = C.length, Q = ae.length;
      function Z(F, Ee, ue) {
        let Se, he, Ge;
        const Ne = F.x - Ee.x, D = F.y - Ee.y, L = ue.x - F.x, j = ue.y - F.y, _e = Ne * Ne + D * D, ve = Ne * j - D * L;
        if (Math.abs(ve) > Number.EPSILON) {
          const me = Math.sqrt(_e), We = Math.sqrt(L * L + j * j), Le = Ee.x - D / me, ze = Ee.y + Ne / me, Ze = ue.x - j / We, ot = ue.y + L / We, ye = ((Ze - Le) * j - (ot - ze) * L) / (Ne * j - D * L);
          Se = Le + Ne * ye - F.x, he = ze + D * ye - F.y;
          const Mt = Se * Se + he * he;
          if (Mt <= 2)
            return new de(Se, he);
          Ge = Math.sqrt(Mt / 2);
        } else {
          let me = !1;
          Ne > Number.EPSILON ? L > Number.EPSILON && (me = !0) : Ne < -Number.EPSILON ? L < -Number.EPSILON && (me = !0) : Math.sign(D) === Math.sign(j) && (me = !0), me ? (Se = -D, he = Ne, Ge = Math.sqrt(_e)) : (Se = Ne, he = D, Ge = Math.sqrt(_e / 2));
        }
        return new de(Se / Ge, he / Ge);
      }
      const K = [];
      for (let F = 0, Ee = z.length, ue = Ee - 1, Se = F + 1; F < Ee; F++, ue++, Se++)
        ue === Ee && (ue = 0), Se === Ee && (Se = 0), K[F] = Z(z[F], z[ue], z[Se]);
      const le = [];
      let oe, ge = K.concat();
      for (let F = 0, Ee = X.length; F < Ee; F++) {
        const ue = X[F];
        oe = [];
        for (let Se = 0, he = ue.length, Ge = he - 1, Ne = Se + 1; Se < he; Se++, Ge++, Ne++)
          Ge === he && (Ge = 0), Ne === he && (Ne = 0), oe[Se] = Z(ue[Se], ue[Ge], ue[Ne]);
        le.push(oe), ge = ge.concat(oe);
      }
      for (let F = 0; F < S; F++) {
        const Ee = F / S, ue = v * Math.cos(Ee * Math.PI / 2), Se = x * Math.sin(Ee * Math.PI / 2) + E;
        for (let he = 0, Ge = z.length; he < Ge; he++) {
          const Ne = q(z[he], K[he], Se);
          Ie(Ne.x, Ne.y, -ue);
        }
        for (let he = 0, Ge = X.length; he < Ge; he++) {
          const Ne = X[he];
          oe = le[he];
          for (let D = 0, L = Ne.length; D < L; D++) {
            const j = q(Ne[D], oe[D], Se);
            Ie(j.x, j.y, -ue);
          }
        }
      }
      const ee = x + E;
      for (let F = 0; F < W; F++) {
        const Ee = g ? q(C[F], ge[F], ee) : C[F];
        A ? (P.copy(N.normals[0]).multiplyScalar(Ee.x), R.copy(N.binormals[0]).multiplyScalar(Ee.y), H.copy(b[0]).add(P).add(R), Ie(H.x, H.y, H.z)) : Ie(Ee.x, Ee.y, 0);
      }
      for (let F = 1; F <= p; F++)
        for (let Ee = 0; Ee < W; Ee++) {
          const ue = g ? q(C[Ee], ge[Ee], ee) : C[Ee];
          A ? (P.copy(N.normals[F]).multiplyScalar(ue.x), R.copy(N.binormals[F]).multiplyScalar(ue.y), H.copy(b[F]).add(P).add(R), Ie(H.x, H.y, H.z)) : Ie(ue.x, ue.y, m / p * F);
        }
      for (let F = S - 1; F >= 0; F--) {
        const Ee = F / S, ue = v * Math.cos(Ee * Math.PI / 2), Se = x * Math.sin(Ee * Math.PI / 2) + E;
        for (let he = 0, Ge = z.length; he < Ge; he++) {
          const Ne = q(z[he], K[he], Se);
          Ie(Ne.x, Ne.y, m + ue);
        }
        for (let he = 0, Ge = X.length; he < Ge; he++) {
          const Ne = X[he];
          oe = le[he];
          for (let D = 0, L = Ne.length; D < L; D++) {
            const j = q(Ne[D], oe[D], Se);
            A ? Ie(j.x, j.y + b[p - 1].y, b[p - 1].x + ue) : Ie(j.x, j.y, m + ue);
          }
        }
      }
      ce(), be();
      function ce() {
        const F = i.length / 3;
        if (g) {
          let Ee = 0, ue = W * Ee;
          for (let Se = 0; Se < Q; Se++) {
            const he = ae[Se];
            je(he[2] + ue, he[1] + ue, he[0] + ue);
          }
          Ee = p + S * 2, ue = W * Ee;
          for (let Se = 0; Se < Q; Se++) {
            const he = ae[Se];
            je(he[0] + ue, he[1] + ue, he[2] + ue);
          }
        } else {
          for (let Ee = 0; Ee < Q; Ee++) {
            const ue = ae[Ee];
            je(ue[2], ue[1], ue[0]);
          }
          for (let Ee = 0; Ee < Q; Ee++) {
            const ue = ae[Ee];
            je(ue[0] + W * p, ue[1] + W * p, ue[2] + W * p);
          }
        }
        n.addGroup(F, i.length / 3 - F, 0);
      }
      function be() {
        const F = i.length / 3;
        let Ee = 0;
        Ve(z, Ee), Ee += z.length;
        for (let ue = 0, Se = X.length; ue < Se; ue++) {
          const he = X[ue];
          Ve(he, Ee), Ee += he.length;
        }
        n.addGroup(F, i.length / 3 - F, 1);
      }
      function Ve(F, Ee) {
        let ue = F.length;
        for (; --ue >= 0; ) {
          const Se = ue;
          let he = ue - 1;
          he < 0 && (he = F.length - 1);
          for (let Ge = 0, Ne = p + S * 2; Ge < Ne; Ge++) {
            const D = W * Ge, L = W * (Ge + 1), j = Ee + Se + D, _e = Ee + he + D, ve = Ee + he + L, me = Ee + Se + L;
            st(j, _e, ve, me);
          }
        }
      }
      function Ie(F, Ee, ue) {
        h.push(F), h.push(Ee), h.push(ue);
      }
      function je(F, Ee, ue) {
        qe(F), qe(Ee), qe(ue);
        const Se = i.length / 3, he = T.generateTopUV(n, i, Se - 3, Se - 2, Se - 1);
        nt(he[0]), nt(he[1]), nt(he[2]);
      }
      function st(F, Ee, ue, Se) {
        qe(F), qe(Ee), qe(Se), qe(Ee), qe(ue), qe(Se);
        const he = i.length / 3, Ge = T.generateSideWallUV(n, i, he - 6, he - 3, he - 2, he - 1);
        nt(Ge[0]), nt(Ge[1]), nt(Ge[3]), nt(Ge[1]), nt(Ge[2]), nt(Ge[3]);
      }
      function qe(F) {
        i.push(h[F * 3 + 0]), i.push(h[F * 3 + 1]), i.push(h[F * 3 + 2]);
      }
      function nt(F) {
        o.push(F.x), o.push(F.y);
      }
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  toJSON() {
    const e = super.toJSON(), t = this.parameters.shapes, n = this.parameters.options;
    return EC(t, n, e);
  }
  static fromJSON(e, t) {
    const n = [];
    for (let o = 0, l = e.shapes.length; o < l; o++) {
      const c = t[e.shapes[o]];
      n.push(c);
    }
    const i = e.options.extrudePath;
    return i !== void 0 && (e.options.extrudePath = new Yu[i.type]().fromJSON(i)), new Sh(n, e.options);
  }
}
const MC = {
  generateTopUV: function(a, e, t, n, i) {
    const o = e[t * 3], l = e[t * 3 + 1], c = e[n * 3], h = e[n * 3 + 1], f = e[i * 3], p = e[i * 3 + 1];
    return [
      new de(o, l),
      new de(c, h),
      new de(f, p)
    ];
  },
  generateSideWallUV: function(a, e, t, n, i, o) {
    const l = e[t * 3], c = e[t * 3 + 1], h = e[t * 3 + 2], f = e[n * 3], p = e[n * 3 + 1], m = e[n * 3 + 2], g = e[i * 3], v = e[i * 3 + 1], x = e[i * 3 + 2], E = e[o * 3], S = e[o * 3 + 1], y = e[o * 3 + 2];
    return Math.abs(c - p) < Math.abs(l - f) ? [
      new de(l, 1 - h),
      new de(f, 1 - m),
      new de(g, 1 - x),
      new de(E, 1 - y)
    ] : [
      new de(c, 1 - h),
      new de(p, 1 - m),
      new de(v, 1 - x),
      new de(S, 1 - y)
    ];
  }
};
function EC(a, e, t) {
  if (t.shapes = [], Array.isArray(a))
    for (let n = 0, i = a.length; n < i; n++) {
      const o = a[n];
      t.shapes.push(o.uuid);
    }
  else
    t.shapes.push(a.uuid);
  return t.options = Object.assign({}, e), e.extrudePath !== void 0 && (t.options.extrudePath = e.extrudePath.toJSON()), t;
}
class Mh extends la {
  constructor(e = 1, t = 0) {
    const n = (1 + Math.sqrt(5)) / 2, i = [
      -1,
      n,
      0,
      1,
      n,
      0,
      -1,
      -n,
      0,
      1,
      -n,
      0,
      0,
      -1,
      n,
      0,
      1,
      n,
      0,
      -1,
      -n,
      0,
      1,
      -n,
      n,
      0,
      -1,
      n,
      0,
      1,
      -n,
      0,
      -1,
      -n,
      0,
      1
    ], o = [
      0,
      11,
      5,
      0,
      5,
      1,
      0,
      1,
      7,
      0,
      7,
      10,
      0,
      10,
      11,
      1,
      5,
      9,
      5,
      11,
      4,
      11,
      10,
      2,
      10,
      7,
      6,
      7,
      1,
      8,
      3,
      9,
      4,
      3,
      4,
      2,
      3,
      2,
      6,
      3,
      6,
      8,
      3,
      8,
      9,
      4,
      9,
      5,
      2,
      4,
      11,
      6,
      2,
      10,
      8,
      6,
      7,
      9,
      8,
      1
    ];
    super(i, o, e, t), this.type = "IcosahedronGeometry", this.parameters = {
      radius: e,
      detail: t
    };
  }
  static fromJSON(e) {
    return new Mh(e.radius, e.detail);
  }
}
class Kl extends la {
  constructor(e = 1, t = 0) {
    const n = [
      1,
      0,
      0,
      -1,
      0,
      0,
      0,
      1,
      0,
      0,
      -1,
      0,
      0,
      0,
      1,
      0,
      0,
      -1
    ], i = [
      0,
      2,
      4,
      0,
      4,
      3,
      0,
      3,
      5,
      0,
      5,
      2,
      1,
      2,
      5,
      1,
      5,
      3,
      1,
      3,
      4,
      1,
      4,
      2
    ];
    super(n, i, e, t), this.type = "OctahedronGeometry", this.parameters = {
      radius: e,
      detail: t
    };
  }
  static fromJSON(e) {
    return new Kl(e.radius, e.detail);
  }
}
class Eh extends xt {
  constructor(e = 0.5, t = 1, n = 32, i = 1, o = 0, l = Math.PI * 2) {
    super(), this.type = "RingGeometry", this.parameters = {
      innerRadius: e,
      outerRadius: t,
      thetaSegments: n,
      phiSegments: i,
      thetaStart: o,
      thetaLength: l
    }, n = Math.max(3, n), i = Math.max(1, i);
    const c = [], h = [], f = [], p = [];
    let m = e;
    const g = (t - e) / i, v = new I(), x = new de();
    for (let E = 0; E <= i; E++) {
      for (let S = 0; S <= n; S++) {
        const y = o + S / n * l;
        v.x = m * Math.cos(y), v.y = m * Math.sin(y), h.push(v.x, v.y, v.z), f.push(0, 0, 1), x.x = (v.x / t + 1) / 2, x.y = (v.y / t + 1) / 2, p.push(x.x, x.y);
      }
      m += g;
    }
    for (let E = 0; E < i; E++) {
      const S = E * (n + 1);
      for (let y = 0; y < n; y++) {
        const T = y + S, b = T, A = T + n + 1, N = T + n + 2, R = T + 1;
        c.push(b, A, R), c.push(A, N, R);
      }
    }
    this.setIndex(c), this.setAttribute("position", new Ye(h, 3)), this.setAttribute("normal", new Ye(f, 3)), this.setAttribute("uv", new Ye(p, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new Eh(e.innerRadius, e.outerRadius, e.thetaSegments, e.phiSegments, e.thetaStart, e.thetaLength);
  }
}
class bh extends xt {
  constructor(e = new tr([new de(0, 0.5), new de(-0.5, -0.5), new de(0.5, -0.5)]), t = 12) {
    super(), this.type = "ShapeGeometry", this.parameters = {
      shapes: e,
      curveSegments: t
    };
    const n = [], i = [], o = [], l = [];
    let c = 0, h = 0;
    if (Array.isArray(e) === !1)
      f(e);
    else
      for (let p = 0; p < e.length; p++)
        f(e[p]), this.addGroup(c, h, p), c += h, h = 0;
    this.setIndex(n), this.setAttribute("position", new Ye(i, 3)), this.setAttribute("normal", new Ye(o, 3)), this.setAttribute("uv", new Ye(l, 2));
    function f(p) {
      const m = i.length / 3, g = p.extractPoints(t);
      let v = g.shape;
      const x = g.holes;
      $i.isClockWise(v) === !1 && (v = v.reverse());
      for (let S = 0, y = x.length; S < y; S++) {
        const T = x[S];
        $i.isClockWise(T) === !0 && (x[S] = T.reverse());
      }
      const E = $i.triangulateShape(v, x);
      for (let S = 0, y = x.length; S < y; S++) {
        const T = x[S];
        v = v.concat(T);
      }
      for (let S = 0, y = v.length; S < y; S++) {
        const T = v[S];
        i.push(T.x, T.y, 0), o.push(0, 0, 1), l.push(T.x, T.y);
      }
      for (let S = 0, y = E.length; S < y; S++) {
        const T = E[S], b = T[0] + m, A = T[1] + m, N = T[2] + m;
        n.push(b, A, N), h += 3;
      }
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  toJSON() {
    const e = super.toJSON(), t = this.parameters.shapes;
    return bC(t, e);
  }
  static fromJSON(e, t) {
    const n = [];
    for (let i = 0, o = e.shapes.length; i < o; i++) {
      const l = t[e.shapes[i]];
      n.push(l);
    }
    return new bh(n, e.curveSegments);
  }
}
function bC(a, e) {
  if (e.shapes = [], Array.isArray(a))
    for (let t = 0, n = a.length; t < n; t++) {
      const i = a[t];
      e.shapes.push(i.uuid);
    }
  else
    e.shapes.push(a.uuid);
  return e;
}
class Jl extends xt {
  constructor(e = 1, t = 32, n = 16, i = 0, o = Math.PI * 2, l = 0, c = Math.PI) {
    super(), this.type = "SphereGeometry", this.parameters = {
      radius: e,
      widthSegments: t,
      heightSegments: n,
      phiStart: i,
      phiLength: o,
      thetaStart: l,
      thetaLength: c
    }, t = Math.max(3, Math.floor(t)), n = Math.max(2, Math.floor(n));
    const h = Math.min(l + c, Math.PI);
    let f = 0;
    const p = [], m = new I(), g = new I(), v = [], x = [], E = [], S = [];
    for (let y = 0; y <= n; y++) {
      const T = [], b = y / n;
      let A = 0;
      y === 0 && l === 0 ? A = 0.5 / t : y === n && h === Math.PI && (A = -0.5 / t);
      for (let N = 0; N <= t; N++) {
        const R = N / t;
        m.x = -e * Math.cos(i + R * o) * Math.sin(l + b * c), m.y = e * Math.cos(l + b * c), m.z = e * Math.sin(i + R * o) * Math.sin(l + b * c), x.push(m.x, m.y, m.z), g.copy(m).normalize(), E.push(g.x, g.y, g.z), S.push(R + A, 1 - b), T.push(f++);
      }
      p.push(T);
    }
    for (let y = 0; y < n; y++)
      for (let T = 0; T < t; T++) {
        const b = p[y][T + 1], A = p[y][T], N = p[y + 1][T], R = p[y + 1][T + 1];
        (y !== 0 || l > 0) && v.push(b, A, R), (y !== n - 1 || h < Math.PI) && v.push(A, N, R);
      }
    this.setIndex(v), this.setAttribute("position", new Ye(x, 3)), this.setAttribute("normal", new Ye(E, 3)), this.setAttribute("uv", new Ye(S, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new Jl(e.radius, e.widthSegments, e.heightSegments, e.phiStart, e.phiLength, e.thetaStart, e.thetaLength);
  }
}
class Th extends la {
  constructor(e = 1, t = 0) {
    const n = [
      1,
      1,
      1,
      -1,
      -1,
      1,
      -1,
      1,
      -1,
      1,
      -1,
      -1
    ], i = [
      2,
      1,
      0,
      0,
      3,
      2,
      1,
      3,
      0,
      2,
      3,
      1
    ];
    super(n, i, e, t), this.type = "TetrahedronGeometry", this.parameters = {
      radius: e,
      detail: t
    };
  }
  static fromJSON(e) {
    return new Th(e.radius, e.detail);
  }
}
class Ah extends xt {
  constructor(e = 1, t = 0.4, n = 12, i = 48, o = Math.PI * 2) {
    super(), this.type = "TorusGeometry", this.parameters = {
      radius: e,
      tube: t,
      radialSegments: n,
      tubularSegments: i,
      arc: o
    }, n = Math.floor(n), i = Math.floor(i);
    const l = [], c = [], h = [], f = [], p = new I(), m = new I(), g = new I();
    for (let v = 0; v <= n; v++)
      for (let x = 0; x <= i; x++) {
        const E = x / i * o, S = v / n * Math.PI * 2;
        m.x = (e + t * Math.cos(S)) * Math.cos(E), m.y = (e + t * Math.cos(S)) * Math.sin(E), m.z = t * Math.sin(S), c.push(m.x, m.y, m.z), p.x = e * Math.cos(E), p.y = e * Math.sin(E), g.subVectors(m, p).normalize(), h.push(g.x, g.y, g.z), f.push(x / i), f.push(v / n);
      }
    for (let v = 1; v <= n; v++)
      for (let x = 1; x <= i; x++) {
        const E = (i + 1) * v + x - 1, S = (i + 1) * (v - 1) + x - 1, y = (i + 1) * (v - 1) + x, T = (i + 1) * v + x;
        l.push(E, S, T), l.push(S, y, T);
      }
    this.setIndex(l), this.setAttribute("position", new Ye(c, 3)), this.setAttribute("normal", new Ye(h, 3)), this.setAttribute("uv", new Ye(f, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new Ah(e.radius, e.tube, e.radialSegments, e.tubularSegments, e.arc);
  }
}
class wh extends xt {
  constructor(e = 1, t = 0.4, n = 64, i = 8, o = 2, l = 3) {
    super(), this.type = "TorusKnotGeometry", this.parameters = {
      radius: e,
      tube: t,
      tubularSegments: n,
      radialSegments: i,
      p: o,
      q: l
    }, n = Math.floor(n), i = Math.floor(i);
    const c = [], h = [], f = [], p = [], m = new I(), g = new I(), v = new I(), x = new I(), E = new I(), S = new I(), y = new I();
    for (let b = 0; b <= n; ++b) {
      const A = b / n * o * Math.PI * 2;
      T(A, o, l, e, v), T(A + 0.01, o, l, e, x), S.subVectors(x, v), y.addVectors(x, v), E.crossVectors(S, y), y.crossVectors(E, S), E.normalize(), y.normalize();
      for (let N = 0; N <= i; ++N) {
        const R = N / i * Math.PI * 2, P = -t * Math.cos(R), H = t * Math.sin(R);
        m.x = v.x + (P * y.x + H * E.x), m.y = v.y + (P * y.y + H * E.y), m.z = v.z + (P * y.z + H * E.z), h.push(m.x, m.y, m.z), g.subVectors(m, v).normalize(), f.push(g.x, g.y, g.z), p.push(b / n), p.push(N / i);
      }
    }
    for (let b = 1; b <= n; b++)
      for (let A = 1; A <= i; A++) {
        const N = (i + 1) * (b - 1) + (A - 1), R = (i + 1) * b + (A - 1), P = (i + 1) * b + A, H = (i + 1) * (b - 1) + A;
        c.push(N, R, H), c.push(R, P, H);
      }
    this.setIndex(c), this.setAttribute("position", new Ye(h, 3)), this.setAttribute("normal", new Ye(f, 3)), this.setAttribute("uv", new Ye(p, 2));
    function T(b, A, N, R, P) {
      const H = Math.cos(b), w = Math.sin(b), C = N / A * b, X = Math.cos(C);
      P.x = R * (2 + X) * 0.5 * H, P.y = R * (2 + X) * w * 0.5, P.z = R * Math.sin(C) * 0.5;
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new wh(e.radius, e.tube, e.tubularSegments, e.radialSegments, e.p, e.q);
  }
}
class Rh extends xt {
  constructor(e = new Rm(new I(-1, -1, 0), new I(-1, 1, 0), new I(1, 1, 0)), t = 64, n = 1, i = 8, o = !1) {
    super(), this.type = "TubeGeometry", this.parameters = {
      path: e,
      tubularSegments: t,
      radius: n,
      radialSegments: i,
      closed: o
    };
    const l = e.computeFrenetFrames(t, o);
    this.tangents = l.tangents, this.normals = l.normals, this.binormals = l.binormals;
    const c = new I(), h = new I(), f = new de();
    let p = new I();
    const m = [], g = [], v = [], x = [];
    E(), this.setIndex(x), this.setAttribute("position", new Ye(m, 3)), this.setAttribute("normal", new Ye(g, 3)), this.setAttribute("uv", new Ye(v, 2));
    function E() {
      for (let b = 0; b < t; b++)
        S(b);
      S(o === !1 ? t : 0), T(), y();
    }
    function S(b) {
      p = e.getPointAt(b / t, p);
      const A = l.normals[b], N = l.binormals[b];
      for (let R = 0; R <= i; R++) {
        const P = R / i * Math.PI * 2, H = Math.sin(P), w = -Math.cos(P);
        h.x = w * A.x + H * N.x, h.y = w * A.y + H * N.y, h.z = w * A.z + H * N.z, h.normalize(), g.push(h.x, h.y, h.z), c.x = p.x + n * h.x, c.y = p.y + n * h.y, c.z = p.z + n * h.z, m.push(c.x, c.y, c.z);
      }
    }
    function y() {
      for (let b = 1; b <= t; b++)
        for (let A = 1; A <= i; A++) {
          const N = (i + 1) * (b - 1) + (A - 1), R = (i + 1) * b + (A - 1), P = (i + 1) * b + A, H = (i + 1) * (b - 1) + A;
          x.push(N, R, H), x.push(R, P, H);
        }
    }
    function T() {
      for (let b = 0; b <= t; b++)
        for (let A = 0; A <= i; A++)
          f.x = b / t, f.y = A / i, v.push(f.x, f.y);
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.path = this.parameters.path.toJSON(), e;
  }
  static fromJSON(e) {
    return new Rh(
      new Yu[e.path.type]().fromJSON(e.path),
      e.tubularSegments,
      e.radius,
      e.radialSegments,
      e.closed
    );
  }
}
class zx extends xt {
  constructor(e = null) {
    if (super(), this.type = "WireframeGeometry", this.parameters = {
      geometry: e
    }, e !== null) {
      const t = [], n = /* @__PURE__ */ new Set(), i = new I(), o = new I();
      if (e.index !== null) {
        const l = e.attributes.position, c = e.index;
        let h = e.groups;
        h.length === 0 && (h = [{ start: 0, count: c.count, materialIndex: 0 }]);
        for (let f = 0, p = h.length; f < p; ++f) {
          const m = h[f], g = m.start, v = m.count;
          for (let x = g, E = g + v; x < E; x += 3)
            for (let S = 0; S < 3; S++) {
              const y = c.getX(x + S), T = c.getX(x + (S + 1) % 3);
              i.fromBufferAttribute(l, y), o.fromBufferAttribute(l, T), d_(i, o, n) === !0 && (t.push(i.x, i.y, i.z), t.push(o.x, o.y, o.z));
            }
        }
      } else {
        const l = e.attributes.position;
        for (let c = 0, h = l.count / 3; c < h; c++)
          for (let f = 0; f < 3; f++) {
            const p = 3 * c + f, m = 3 * c + (f + 1) % 3;
            i.fromBufferAttribute(l, p), o.fromBufferAttribute(l, m), d_(i, o, n) === !0 && (t.push(i.x, i.y, i.z), t.push(o.x, o.y, o.z));
          }
      }
      this.setAttribute("position", new Ye(t, 3));
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
}
function d_(a, e, t) {
  const n = `${a.x},${a.y},${a.z}-${e.x},${e.y},${e.z}`, i = `${e.x},${e.y},${e.z}-${a.x},${a.y},${a.z}`;
  return t.has(n) === !0 || t.has(i) === !0 ? !1 : (t.add(n), t.add(i), !0);
}
var p_ = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  BoxGeometry: or,
  CapsuleGeometry: gh,
  CircleGeometry: vh,
  ConeGeometry: _h,
  CylinderGeometry: Ao,
  DodecahedronGeometry: yh,
  EdgesGeometry: Dx,
  ExtrudeGeometry: Sh,
  IcosahedronGeometry: Mh,
  LatheGeometry: Zl,
  OctahedronGeometry: Kl,
  PlaneGeometry: bo,
  PolyhedronGeometry: la,
  RingGeometry: Eh,
  ShapeGeometry: bh,
  SphereGeometry: Jl,
  TetrahedronGeometry: Th,
  TorusGeometry: Ah,
  TorusKnotGeometry: wh,
  TubeGeometry: Rh,
  WireframeGeometry: zx
});
class Bx extends zn {
  constructor(e) {
    super(), this.isShadowMaterial = !0, this.type = "ShadowMaterial", this.color = new Fe(0), this.transparent = !0, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.fog = e.fog, this;
  }
}
class Hx extends Gi {
  constructor(e) {
    super(e), this.isRawShaderMaterial = !0, this.type = "RawShaderMaterial";
  }
}
class Lm extends zn {
  constructor(e) {
    super(), this.isMeshStandardMaterial = !0, this.defines = { STANDARD: "" }, this.type = "MeshStandardMaterial", this.color = new Fe(16777215), this.roughness = 1, this.metalness = 0, this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new Fe(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = ra, this.normalScale = new de(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.roughnessMap = null, this.metalnessMap = null, this.alphaMap = null, this.envMap = null, this.envMapIntensity = 1, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = !1, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.defines = { STANDARD: "" }, this.color.copy(e.color), this.roughness = e.roughness, this.metalness = e.metalness, this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.roughnessMap = e.roughnessMap, this.metalnessMap = e.metalnessMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.envMapIntensity = e.envMapIntensity, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.flatShading = e.flatShading, this.fog = e.fog, this;
  }
}
class Fx extends Lm {
  constructor(e) {
    super(), this.isMeshPhysicalMaterial = !0, this.defines = {
      STANDARD: "",
      PHYSICAL: ""
    }, this.type = "MeshPhysicalMaterial", this.anisotropyRotation = 0, this.anisotropyMap = null, this.clearcoatMap = null, this.clearcoatRoughness = 0, this.clearcoatRoughnessMap = null, this.clearcoatNormalScale = new de(1, 1), this.clearcoatNormalMap = null, this.ior = 1.5, Object.defineProperty(this, "reflectivity", {
      get: function() {
        return sn(2.5 * (this.ior - 1) / (this.ior + 1), 0, 1);
      },
      set: function(t) {
        this.ior = (1 + 0.4 * t) / (1 - 0.4 * t);
      }
    }), this.iridescenceMap = null, this.iridescenceIOR = 1.3, this.iridescenceThicknessRange = [100, 400], this.iridescenceThicknessMap = null, this.sheenColor = new Fe(0), this.sheenColorMap = null, this.sheenRoughness = 1, this.sheenRoughnessMap = null, this.transmissionMap = null, this.thickness = 0, this.thicknessMap = null, this.attenuationDistance = 1 / 0, this.attenuationColor = new Fe(1, 1, 1), this.specularIntensity = 1, this.specularIntensityMap = null, this.specularColor = new Fe(1, 1, 1), this.specularColorMap = null, this._anisotropy = 0, this._clearcoat = 0, this._iridescence = 0, this._sheen = 0, this._transmission = 0, this.setValues(e);
  }
  get anisotropy() {
    return this._anisotropy;
  }
  set anisotropy(e) {
    this._anisotropy > 0 != e > 0 && this.version++, this._anisotropy = e;
  }
  get clearcoat() {
    return this._clearcoat;
  }
  set clearcoat(e) {
    this._clearcoat > 0 != e > 0 && this.version++, this._clearcoat = e;
  }
  get iridescence() {
    return this._iridescence;
  }
  set iridescence(e) {
    this._iridescence > 0 != e > 0 && this.version++, this._iridescence = e;
  }
  get sheen() {
    return this._sheen;
  }
  set sheen(e) {
    this._sheen > 0 != e > 0 && this.version++, this._sheen = e;
  }
  get transmission() {
    return this._transmission;
  }
  set transmission(e) {
    this._transmission > 0 != e > 0 && this.version++, this._transmission = e;
  }
  copy(e) {
    return super.copy(e), this.defines = {
      STANDARD: "",
      PHYSICAL: ""
    }, this.anisotropy = e.anisotropy, this.anisotropyRotation = e.anisotropyRotation, this.anisotropyMap = e.anisotropyMap, this.clearcoat = e.clearcoat, this.clearcoatMap = e.clearcoatMap, this.clearcoatRoughness = e.clearcoatRoughness, this.clearcoatRoughnessMap = e.clearcoatRoughnessMap, this.clearcoatNormalMap = e.clearcoatNormalMap, this.clearcoatNormalScale.copy(e.clearcoatNormalScale), this.ior = e.ior, this.iridescence = e.iridescence, this.iridescenceMap = e.iridescenceMap, this.iridescenceIOR = e.iridescenceIOR, this.iridescenceThicknessRange = [...e.iridescenceThicknessRange], this.iridescenceThicknessMap = e.iridescenceThicknessMap, this.sheen = e.sheen, this.sheenColor.copy(e.sheenColor), this.sheenColorMap = e.sheenColorMap, this.sheenRoughness = e.sheenRoughness, this.sheenRoughnessMap = e.sheenRoughnessMap, this.transmission = e.transmission, this.transmissionMap = e.transmissionMap, this.thickness = e.thickness, this.thicknessMap = e.thicknessMap, this.attenuationDistance = e.attenuationDistance, this.attenuationColor.copy(e.attenuationColor), this.specularIntensity = e.specularIntensity, this.specularIntensityMap = e.specularIntensityMap, this.specularColor.copy(e.specularColor), this.specularColorMap = e.specularColorMap, this;
  }
}
class Vx extends zn {
  constructor(e) {
    super(), this.isMeshPhongMaterial = !0, this.type = "MeshPhongMaterial", this.color = new Fe(16777215), this.specular = new Fe(1118481), this.shininess = 30, this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new Fe(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = ra, this.normalScale = new de(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = Xl, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = !1, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.specular.copy(e.specular), this.shininess = e.shininess, this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.specularMap = e.specularMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.combine = e.combine, this.reflectivity = e.reflectivity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.flatShading = e.flatShading, this.fog = e.fog, this;
  }
}
class Gx extends zn {
  constructor(e) {
    super(), this.isMeshToonMaterial = !0, this.defines = { TOON: "" }, this.type = "MeshToonMaterial", this.color = new Fe(16777215), this.map = null, this.gradientMap = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new Fe(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = ra, this.normalScale = new de(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.alphaMap = null, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.gradientMap = e.gradientMap, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.alphaMap = e.alphaMap, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.fog = e.fog, this;
  }
}
class Wx extends zn {
  constructor(e) {
    super(), this.isMeshNormalMaterial = !0, this.type = "MeshNormalMaterial", this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = ra, this.normalScale = new de(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = !1, this.wireframeLinewidth = 1, this.flatShading = !1, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.flatShading = e.flatShading, this;
  }
}
class Xx extends zn {
  constructor(e) {
    super(), this.isMeshLambertMaterial = !0, this.type = "MeshLambertMaterial", this.color = new Fe(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new Fe(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = ra, this.normalScale = new de(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = Xl, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = !1, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.specularMap = e.specularMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.combine = e.combine, this.reflectivity = e.reflectivity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.flatShading = e.flatShading, this.fog = e.fog, this;
  }
}
class kx extends zn {
  constructor(e) {
    super(), this.isMeshMatcapMaterial = !0, this.defines = { MATCAP: "" }, this.type = "MeshMatcapMaterial", this.color = new Fe(16777215), this.matcap = null, this.map = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = ra, this.normalScale = new de(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.alphaMap = null, this.flatShading = !1, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.defines = { MATCAP: "" }, this.color.copy(e.color), this.matcap = e.matcap, this.map = e.map, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.alphaMap = e.alphaMap, this.flatShading = e.flatShading, this.fog = e.fog, this;
  }
}
class qx extends qn {
  constructor(e) {
    super(), this.isLineDashedMaterial = !0, this.type = "LineDashedMaterial", this.scale = 1, this.dashSize = 3, this.gapSize = 1, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.scale = e.scale, this.dashSize = e.dashSize, this.gapSize = e.gapSize, this;
  }
}
function Ka(a, e, t) {
  return !a || // let 'undefined' and 'null' pass
  !t && a.constructor === e ? a : typeof e.BYTES_PER_ELEMENT == "number" ? new e(a) : Array.prototype.slice.call(a);
}
function Yx(a) {
  return ArrayBuffer.isView(a) && !(a instanceof DataView);
}
function jx(a) {
  function e(i, o) {
    return a[i] - a[o];
  }
  const t = a.length, n = new Array(t);
  for (let i = 0; i !== t; ++i) n[i] = i;
  return n.sort(e), n;
}
function Vp(a, e, t) {
  const n = a.length, i = new a.constructor(n);
  for (let o = 0, l = 0; l !== n; ++o) {
    const c = t[o] * e;
    for (let h = 0; h !== e; ++h)
      i[l++] = a[c + h];
  }
  return i;
}
function Um(a, e, t, n) {
  let i = 1, o = a[0];
  for (; o !== void 0 && o[n] === void 0; )
    o = a[i++];
  if (o === void 0) return;
  let l = o[n];
  if (l !== void 0)
    if (Array.isArray(l))
      do
        l = o[n], l !== void 0 && (e.push(o.time), t.push.apply(t, l)), o = a[i++];
      while (o !== void 0);
    else if (l.toArray !== void 0)
      do
        l = o[n], l !== void 0 && (e.push(o.time), l.toArray(t, t.length)), o = a[i++];
      while (o !== void 0);
    else
      do
        l = o[n], l !== void 0 && (e.push(o.time), t.push(l)), o = a[i++];
      while (o !== void 0);
}
function TC(a, e, t, n, i = 30) {
  const o = a.clone();
  o.name = e;
  const l = [];
  for (let h = 0; h < o.tracks.length; ++h) {
    const f = o.tracks[h], p = f.getValueSize(), m = [], g = [];
    for (let v = 0; v < f.times.length; ++v) {
      const x = f.times[v] * i;
      if (!(x < t || x >= n)) {
        m.push(f.times[v]);
        for (let E = 0; E < p; ++E)
          g.push(f.values[v * p + E]);
      }
    }
    m.length !== 0 && (f.times = Ka(m, f.times.constructor), f.values = Ka(g, f.values.constructor), l.push(f));
  }
  o.tracks = l;
  let c = 1 / 0;
  for (let h = 0; h < o.tracks.length; ++h)
    c > o.tracks[h].times[0] && (c = o.tracks[h].times[0]);
  for (let h = 0; h < o.tracks.length; ++h)
    o.tracks[h].shift(-1 * c);
  return o.resetDuration(), o;
}
function AC(a, e = 0, t = a, n = 30) {
  n <= 0 && (n = 30);
  const i = t.tracks.length, o = e / n;
  for (let l = 0; l < i; ++l) {
    const c = t.tracks[l], h = c.ValueTypeName;
    if (h === "bool" || h === "string") continue;
    const f = a.tracks.find(function(y) {
      return y.name === c.name && y.ValueTypeName === h;
    });
    if (f === void 0) continue;
    let p = 0;
    const m = c.getValueSize();
    c.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline && (p = m / 3);
    let g = 0;
    const v = f.getValueSize();
    f.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline && (g = v / 3);
    const x = c.times.length - 1;
    let E;
    if (o <= c.times[0]) {
      const y = p, T = m - p;
      E = c.values.slice(y, T);
    } else if (o >= c.times[x]) {
      const y = x * m + p, T = y + m - p;
      E = c.values.slice(y, T);
    } else {
      const y = c.createInterpolant(), T = p, b = m - p;
      y.evaluate(o), E = y.resultBuffer.slice(T, b);
    }
    h === "quaternion" && new On().fromArray(E).normalize().conjugate().toArray(E);
    const S = f.times.length;
    for (let y = 0; y < S; ++y) {
      const T = y * v + g;
      if (h === "quaternion")
        On.multiplyQuaternionsFlat(
          f.values,
          T,
          E,
          0,
          f.values,
          T
        );
      else {
        const b = v - g * 2;
        for (let A = 0; A < b; ++A)
          f.values[T + A] -= E[A];
      }
    }
  }
  return a.blendMode = lm, a;
}
const wC = {
  convertArray: Ka,
  isTypedArray: Yx,
  getKeyframeOrder: jx,
  sortedArray: Vp,
  flattenJSON: Um,
  subclip: TC,
  makeClipAdditive: AC
};
class Ql {
  constructor(e, t, n, i) {
    this.parameterPositions = e, this._cachedIndex = 0, this.resultBuffer = i !== void 0 ? i : new t.constructor(n), this.sampleValues = t, this.valueSize = n, this.settings = null, this.DefaultSettings_ = {};
  }
  evaluate(e) {
    const t = this.parameterPositions;
    let n = this._cachedIndex, i = t[n], o = t[n - 1];
    e: {
      t: {
        let l;
        n: {
          i: if (!(e < i)) {
            for (let c = n + 2; ; ) {
              if (i === void 0) {
                if (e < o) break i;
                return n = t.length, this._cachedIndex = n, this.copySampleValue_(n - 1);
              }
              if (n === c) break;
              if (o = i, i = t[++n], e < i)
                break t;
            }
            l = t.length;
            break n;
          }
          if (!(e >= o)) {
            const c = t[1];
            e < c && (n = 2, o = c);
            for (let h = n - 2; ; ) {
              if (o === void 0)
                return this._cachedIndex = 0, this.copySampleValue_(0);
              if (n === h) break;
              if (i = o, o = t[--n - 1], e >= o)
                break t;
            }
            l = n, n = 0;
            break n;
          }
          break e;
        }
        for (; n < l; ) {
          const c = n + l >>> 1;
          e < t[c] ? l = c : n = c + 1;
        }
        if (i = t[n], o = t[n - 1], o === void 0)
          return this._cachedIndex = 0, this.copySampleValue_(0);
        if (i === void 0)
          return n = t.length, this._cachedIndex = n, this.copySampleValue_(n - 1);
      }
      this._cachedIndex = n, this.intervalChanged_(n, o, i);
    }
    return this.interpolate_(n, o, e, i);
  }
  getSettings_() {
    return this.settings || this.DefaultSettings_;
  }
  copySampleValue_(e) {
    const t = this.resultBuffer, n = this.sampleValues, i = this.valueSize, o = e * i;
    for (let l = 0; l !== i; ++l)
      t[l] = n[o + l];
    return t;
  }
  // Template methods for derived classes:
  interpolate_() {
    throw new Error("call to abstract method");
  }
  intervalChanged_() {
  }
}
class Zx extends Ql {
  constructor(e, t, n, i) {
    super(e, t, n, i), this._weightPrev = -0, this._offsetPrev = -0, this._weightNext = -0, this._offsetNext = -0, this.DefaultSettings_ = {
      endingStart: Ya,
      endingEnd: Ya
    };
  }
  intervalChanged_(e, t, n) {
    const i = this.parameterPositions;
    let o = e - 2, l = e + 1, c = i[o], h = i[l];
    if (c === void 0)
      switch (this.getSettings_().endingStart) {
        case ja:
          o = e, c = 2 * t - n;
          break;
        case Cl:
          o = i.length - 2, c = t + i[o] - i[o + 1];
          break;
        default:
          o = e, c = n;
      }
    if (h === void 0)
      switch (this.getSettings_().endingEnd) {
        case ja:
          l = e, h = 2 * n - t;
          break;
        case Cl:
          l = 1, h = n + i[1] - i[0];
          break;
        default:
          l = e - 1, h = t;
      }
    const f = (n - t) * 0.5, p = this.valueSize;
    this._weightPrev = f / (t - c), this._weightNext = f / (h - n), this._offsetPrev = o * p, this._offsetNext = l * p;
  }
  interpolate_(e, t, n, i) {
    const o = this.resultBuffer, l = this.sampleValues, c = this.valueSize, h = e * c, f = h - c, p = this._offsetPrev, m = this._offsetNext, g = this._weightPrev, v = this._weightNext, x = (n - t) / (i - t), E = x * x, S = E * x, y = -g * S + 2 * g * E - g * x, T = (1 + g) * S + (-1.5 - 2 * g) * E + (-0.5 + g) * x + 1, b = (-1 - v) * S + (1.5 + v) * E + 0.5 * x, A = v * S - v * E;
    for (let N = 0; N !== c; ++N)
      o[N] = y * l[p + N] + T * l[f + N] + b * l[h + N] + A * l[m + N];
    return o;
  }
}
class Nm extends Ql {
  constructor(e, t, n, i) {
    super(e, t, n, i);
  }
  interpolate_(e, t, n, i) {
    const o = this.resultBuffer, l = this.sampleValues, c = this.valueSize, h = e * c, f = h - c, p = (n - t) / (i - t), m = 1 - p;
    for (let g = 0; g !== c; ++g)
      o[g] = l[f + g] * m + l[h + g] * p;
    return o;
  }
}
class Kx extends Ql {
  constructor(e, t, n, i) {
    super(e, t, n, i);
  }
  interpolate_(e) {
    return this.copySampleValue_(e - 1);
  }
}
class Xi {
  constructor(e, t, n, i) {
    if (e === void 0) throw new Error("THREE.KeyframeTrack: track name is undefined");
    if (t === void 0 || t.length === 0) throw new Error("THREE.KeyframeTrack: no keyframes in track named " + e);
    this.name = e, this.times = Ka(t, this.TimeBufferType), this.values = Ka(n, this.ValueBufferType), this.setInterpolation(i || this.DefaultInterpolation);
  }
  // Serialization (in static context, because of constructor invocation
  // and automatic invocation of .toJSON):
  static toJSON(e) {
    const t = e.constructor;
    let n;
    if (t.toJSON !== this.toJSON)
      n = t.toJSON(e);
    else {
      n = {
        name: e.name,
        times: Ka(e.times, Array),
        values: Ka(e.values, Array)
      };
      const i = e.getInterpolation();
      i !== e.DefaultInterpolation && (n.interpolation = i);
    }
    return n.type = e.ValueTypeName, n;
  }
  InterpolantFactoryMethodDiscrete(e) {
    return new Kx(this.times, this.values, this.getValueSize(), e);
  }
  InterpolantFactoryMethodLinear(e) {
    return new Nm(this.times, this.values, this.getValueSize(), e);
  }
  InterpolantFactoryMethodSmooth(e) {
    return new Zx(this.times, this.values, this.getValueSize(), e);
  }
  setInterpolation(e) {
    let t;
    switch (e) {
      case wl:
        t = this.InterpolantFactoryMethodDiscrete;
        break;
      case Rl:
        t = this.InterpolantFactoryMethodLinear;
        break;
      case Hu:
        t = this.InterpolantFactoryMethodSmooth;
        break;
    }
    if (t === void 0) {
      const n = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
      if (this.createInterpolant === void 0)
        if (e !== this.DefaultInterpolation)
          this.setInterpolation(this.DefaultInterpolation);
        else
          throw new Error(n);
      return console.warn("THREE.KeyframeTrack:", n), this;
    }
    return this.createInterpolant = t, this;
  }
  getInterpolation() {
    switch (this.createInterpolant) {
      case this.InterpolantFactoryMethodDiscrete:
        return wl;
      case this.InterpolantFactoryMethodLinear:
        return Rl;
      case this.InterpolantFactoryMethodSmooth:
        return Hu;
    }
  }
  getValueSize() {
    return this.values.length / this.times.length;
  }
  // move all keyframes either forwards or backwards in time
  shift(e) {
    if (e !== 0) {
      const t = this.times;
      for (let n = 0, i = t.length; n !== i; ++n)
        t[n] += e;
    }
    return this;
  }
  // scale all keyframe times by a factor (useful for frame <-> seconds conversions)
  scale(e) {
    if (e !== 1) {
      const t = this.times;
      for (let n = 0, i = t.length; n !== i; ++n)
        t[n] *= e;
    }
    return this;
  }
  // removes keyframes before and after animation without changing any values within the range [startTime, endTime].
  // IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
  trim(e, t) {
    const n = this.times, i = n.length;
    let o = 0, l = i - 1;
    for (; o !== i && n[o] < e; )
      ++o;
    for (; l !== -1 && n[l] > t; )
      --l;
    if (++l, o !== 0 || l !== i) {
      o >= l && (l = Math.max(l, 1), o = l - 1);
      const c = this.getValueSize();
      this.times = n.slice(o, l), this.values = this.values.slice(o * c, l * c);
    }
    return this;
  }
  // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
  validate() {
    let e = !0;
    const t = this.getValueSize();
    t - Math.floor(t) !== 0 && (console.error("THREE.KeyframeTrack: Invalid value size in track.", this), e = !1);
    const n = this.times, i = this.values, o = n.length;
    o === 0 && (console.error("THREE.KeyframeTrack: Track is empty.", this), e = !1);
    let l = null;
    for (let c = 0; c !== o; c++) {
      const h = n[c];
      if (typeof h == "number" && isNaN(h)) {
        console.error("THREE.KeyframeTrack: Time is not a valid number.", this, c, h), e = !1;
        break;
      }
      if (l !== null && l > h) {
        console.error("THREE.KeyframeTrack: Out of order keys.", this, c, h, l), e = !1;
        break;
      }
      l = h;
    }
    if (i !== void 0 && Yx(i))
      for (let c = 0, h = i.length; c !== h; ++c) {
        const f = i[c];
        if (isNaN(f)) {
          console.error("THREE.KeyframeTrack: Value is not a valid number.", this, c, f), e = !1;
          break;
        }
      }
    return e;
  }
  // removes equivalent sequential keys as common in morph target sequences
  // (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
  optimize() {
    const e = this.times.slice(), t = this.values.slice(), n = this.getValueSize(), i = this.getInterpolation() === Hu, o = e.length - 1;
    let l = 1;
    for (let c = 1; c < o; ++c) {
      let h = !1;
      const f = e[c], p = e[c + 1];
      if (f !== p && (c !== 1 || f !== e[0]))
        if (i)
          h = !0;
        else {
          const m = c * n, g = m - n, v = m + n;
          for (let x = 0; x !== n; ++x) {
            const E = t[m + x];
            if (E !== t[g + x] || E !== t[v + x]) {
              h = !0;
              break;
            }
          }
        }
      if (h) {
        if (c !== l) {
          e[l] = e[c];
          const m = c * n, g = l * n;
          for (let v = 0; v !== n; ++v)
            t[g + v] = t[m + v];
        }
        ++l;
      }
    }
    if (o > 0) {
      e[l] = e[o];
      for (let c = o * n, h = l * n, f = 0; f !== n; ++f)
        t[h + f] = t[c + f];
      ++l;
    }
    return l !== e.length ? (this.times = e.slice(0, l), this.values = t.slice(0, l * n)) : (this.times = e, this.values = t), this;
  }
  clone() {
    const e = this.times.slice(), t = this.values.slice(), n = this.constructor, i = new n(this.name, e, t);
    return i.createInterpolant = this.createInterpolant, i;
  }
}
Xi.prototype.TimeBufferType = Float32Array;
Xi.prototype.ValueBufferType = Float32Array;
Xi.prototype.DefaultInterpolation = Rl;
class lr extends Xi {
}
lr.prototype.ValueTypeName = "bool";
lr.prototype.ValueBufferType = Array;
lr.prototype.DefaultInterpolation = wl;
lr.prototype.InterpolantFactoryMethodLinear = void 0;
lr.prototype.InterpolantFactoryMethodSmooth = void 0;
class Dm extends Xi {
}
Dm.prototype.ValueTypeName = "color";
class Hl extends Xi {
}
Hl.prototype.ValueTypeName = "number";
class Jx extends Ql {
  constructor(e, t, n, i) {
    super(e, t, n, i);
  }
  interpolate_(e, t, n, i) {
    const o = this.resultBuffer, l = this.sampleValues, c = this.valueSize, h = (n - t) / (i - t);
    let f = e * c;
    for (let p = f + c; f !== p; f += 4)
      On.slerpFlat(o, 0, l, f - c, l, f, h);
    return o;
  }
}
class wo extends Xi {
  InterpolantFactoryMethodLinear(e) {
    return new Jx(this.times, this.values, this.getValueSize(), e);
  }
}
wo.prototype.ValueTypeName = "quaternion";
wo.prototype.DefaultInterpolation = Rl;
wo.prototype.InterpolantFactoryMethodSmooth = void 0;
class cr extends Xi {
}
cr.prototype.ValueTypeName = "string";
cr.prototype.ValueBufferType = Array;
cr.prototype.DefaultInterpolation = wl;
cr.prototype.InterpolantFactoryMethodLinear = void 0;
cr.prototype.InterpolantFactoryMethodSmooth = void 0;
class Fl extends Xi {
}
Fl.prototype.ValueTypeName = "vector";
class Vl {
  constructor(e, t = -1, n, i = sh) {
    this.name = e, this.tracks = n, this.duration = t, this.blendMode = i, this.uuid = mi(), this.duration < 0 && this.resetDuration();
  }
  static parse(e) {
    const t = [], n = e.tracks, i = 1 / (e.fps || 1);
    for (let l = 0, c = n.length; l !== c; ++l)
      t.push(CC(n[l]).scale(i));
    const o = new this(e.name, e.duration, t, e.blendMode);
    return o.uuid = e.uuid, o;
  }
  static toJSON(e) {
    const t = [], n = e.tracks, i = {
      name: e.name,
      duration: e.duration,
      tracks: t,
      uuid: e.uuid,
      blendMode: e.blendMode
    };
    for (let o = 0, l = n.length; o !== l; ++o)
      t.push(Xi.toJSON(n[o]));
    return i;
  }
  static CreateFromMorphTargetSequence(e, t, n, i) {
    const o = t.length, l = [];
    for (let c = 0; c < o; c++) {
      let h = [], f = [];
      h.push(
        (c + o - 1) % o,
        c,
        (c + 1) % o
      ), f.push(0, 1, 0);
      const p = jx(h);
      h = Vp(h, 1, p), f = Vp(f, 1, p), !i && h[0] === 0 && (h.push(o), f.push(f[0])), l.push(
        new Hl(
          ".morphTargetInfluences[" + t[c].name + "]",
          h,
          f
        ).scale(1 / n)
      );
    }
    return new this(e, -1, l);
  }
  static findByName(e, t) {
    let n = e;
    if (!Array.isArray(e)) {
      const i = e;
      n = i.geometry && i.geometry.animations || i.animations;
    }
    for (let i = 0; i < n.length; i++)
      if (n[i].name === t)
        return n[i];
    return null;
  }
  static CreateClipsFromMorphTargetSequences(e, t, n) {
    const i = {}, o = /^([\w-]*?)([\d]+)$/;
    for (let c = 0, h = e.length; c < h; c++) {
      const f = e[c], p = f.name.match(o);
      if (p && p.length > 1) {
        const m = p[1];
        let g = i[m];
        g || (i[m] = g = []), g.push(f);
      }
    }
    const l = [];
    for (const c in i)
      l.push(this.CreateFromMorphTargetSequence(c, i[c], t, n));
    return l;
  }
  // parse the animation.hierarchy format
  static parseAnimation(e, t) {
    if (!e)
      return console.error("THREE.AnimationClip: No animation in JSONLoader data."), null;
    const n = function(m, g, v, x, E) {
      if (v.length !== 0) {
        const S = [], y = [];
        Um(v, S, y, x), S.length !== 0 && E.push(new m(g, S, y));
      }
    }, i = [], o = e.name || "default", l = e.fps || 30, c = e.blendMode;
    let h = e.length || -1;
    const f = e.hierarchy || [];
    for (let m = 0; m < f.length; m++) {
      const g = f[m].keys;
      if (!(!g || g.length === 0))
        if (g[0].morphTargets) {
          const v = {};
          let x;
          for (x = 0; x < g.length; x++)
            if (g[x].morphTargets)
              for (let E = 0; E < g[x].morphTargets.length; E++)
                v[g[x].morphTargets[E]] = -1;
          for (const E in v) {
            const S = [], y = [];
            for (let T = 0; T !== g[x].morphTargets.length; ++T) {
              const b = g[x];
              S.push(b.time), y.push(b.morphTarget === E ? 1 : 0);
            }
            i.push(new Hl(".morphTargetInfluence[" + E + "]", S, y));
          }
          h = v.length * l;
        } else {
          const v = ".bones[" + t[m].name + "]";
          n(
            Fl,
            v + ".position",
            g,
            "pos",
            i
          ), n(
            wo,
            v + ".quaternion",
            g,
            "rot",
            i
          ), n(
            Fl,
            v + ".scale",
            g,
            "scl",
            i
          );
        }
    }
    return i.length === 0 ? null : new this(o, h, i, c);
  }
  resetDuration() {
    const e = this.tracks;
    let t = 0;
    for (let n = 0, i = e.length; n !== i; ++n) {
      const o = this.tracks[n];
      t = Math.max(t, o.times[o.times.length - 1]);
    }
    return this.duration = t, this;
  }
  trim() {
    for (let e = 0; e < this.tracks.length; e++)
      this.tracks[e].trim(0, this.duration);
    return this;
  }
  validate() {
    let e = !0;
    for (let t = 0; t < this.tracks.length; t++)
      e = e && this.tracks[t].validate();
    return e;
  }
  optimize() {
    for (let e = 0; e < this.tracks.length; e++)
      this.tracks[e].optimize();
    return this;
  }
  clone() {
    const e = [];
    for (let t = 0; t < this.tracks.length; t++)
      e.push(this.tracks[t].clone());
    return new this.constructor(this.name, this.duration, e, this.blendMode);
  }
  toJSON() {
    return this.constructor.toJSON(this);
  }
}
function RC(a) {
  switch (a.toLowerCase()) {
    case "scalar":
    case "double":
    case "float":
    case "number":
    case "integer":
      return Hl;
    case "vector":
    case "vector2":
    case "vector3":
    case "vector4":
      return Fl;
    case "color":
      return Dm;
    case "quaternion":
      return wo;
    case "bool":
    case "boolean":
      return lr;
    case "string":
      return cr;
  }
  throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + a);
}
function CC(a) {
  if (a.type === void 0)
    throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");
  const e = RC(a.type);
  if (a.times === void 0) {
    const t = [], n = [];
    Um(a.keys, t, n, "value"), a.times = t, a.values = n;
  }
  return e.parse !== void 0 ? e.parse(a) : new e(a.name, a.times, a.values, a.interpolation);
}
const Es = {
  enabled: !1,
  files: {},
  add: function(a, e) {
    this.enabled !== !1 && (this.files[a] = e);
  },
  get: function(a) {
    if (this.enabled !== !1)
      return this.files[a];
  },
  remove: function(a) {
    delete this.files[a];
  },
  clear: function() {
    this.files = {};
  }
};
class Pm {
  constructor(e, t, n) {
    const i = this;
    let o = !1, l = 0, c = 0, h;
    const f = [];
    this.onStart = void 0, this.onLoad = e, this.onProgress = t, this.onError = n, this.itemStart = function(p) {
      c++, o === !1 && i.onStart !== void 0 && i.onStart(p, l, c), o = !0;
    }, this.itemEnd = function(p) {
      l++, i.onProgress !== void 0 && i.onProgress(p, l, c), l === c && (o = !1, i.onLoad !== void 0 && i.onLoad());
    }, this.itemError = function(p) {
      i.onError !== void 0 && i.onError(p);
    }, this.resolveURL = function(p) {
      return h ? h(p) : p;
    }, this.setURLModifier = function(p) {
      return h = p, this;
    }, this.addHandler = function(p, m) {
      return f.push(p, m), this;
    }, this.removeHandler = function(p) {
      const m = f.indexOf(p);
      return m !== -1 && f.splice(m, 2), this;
    }, this.getHandler = function(p) {
      for (let m = 0, g = f.length; m < g; m += 2) {
        const v = f[m], x = f[m + 1];
        if (v.global && (v.lastIndex = 0), v.test(p))
          return x;
      }
      return null;
    };
  }
}
const Qx = /* @__PURE__ */ new Pm();
class ti {
  constructor(e) {
    this.manager = e !== void 0 ? e : Qx, this.crossOrigin = "anonymous", this.withCredentials = !1, this.path = "", this.resourcePath = "", this.requestHeader = {};
  }
  load() {
  }
  loadAsync(e, t) {
    const n = this;
    return new Promise(function(i, o) {
      n.load(e, i, t, o);
    });
  }
  parse() {
  }
  setCrossOrigin(e) {
    return this.crossOrigin = e, this;
  }
  setWithCredentials(e) {
    return this.withCredentials = e, this;
  }
  setPath(e) {
    return this.path = e, this;
  }
  setResourcePath(e) {
    return this.resourcePath = e, this;
  }
  setRequestHeader(e) {
    return this.requestHeader = e, this;
  }
}
ti.DEFAULT_MATERIAL_NAME = "__DEFAULT";
const _s = {};
class LC extends Error {
  constructor(e, t) {
    super(e), this.response = t;
  }
}
class Rs extends ti {
  constructor(e) {
    super(e);
  }
  load(e, t, n, i) {
    e === void 0 && (e = ""), this.path !== void 0 && (e = this.path + e), e = this.manager.resolveURL(e);
    const o = Es.get(e);
    if (o !== void 0)
      return this.manager.itemStart(e), setTimeout(() => {
        t && t(o), this.manager.itemEnd(e);
      }, 0), o;
    if (_s[e] !== void 0) {
      _s[e].push({
        onLoad: t,
        onProgress: n,
        onError: i
      });
      return;
    }
    _s[e] = [], _s[e].push({
      onLoad: t,
      onProgress: n,
      onError: i
    });
    const l = new Request(e, {
      headers: new Headers(this.requestHeader),
      credentials: this.withCredentials ? "include" : "same-origin"
      // An abort controller could be added within a future PR
    }), c = this.mimeType, h = this.responseType;
    fetch(l).then((f) => {
      if (f.status === 200 || f.status === 0) {
        if (f.status === 0 && console.warn("THREE.FileLoader: HTTP Status 0 received."), typeof ReadableStream > "u" || f.body === void 0 || f.body.getReader === void 0)
          return f;
        const p = _s[e], m = f.body.getReader(), g = f.headers.get("Content-Length") || f.headers.get("X-File-Size"), v = g ? parseInt(g) : 0, x = v !== 0;
        let E = 0;
        const S = new ReadableStream({
          start(y) {
            T();
            function T() {
              m.read().then(({ done: b, value: A }) => {
                if (b)
                  y.close();
                else {
                  E += A.byteLength;
                  const N = new ProgressEvent("progress", { lengthComputable: x, loaded: E, total: v });
                  for (let R = 0, P = p.length; R < P; R++) {
                    const H = p[R];
                    H.onProgress && H.onProgress(N);
                  }
                  y.enqueue(A), T();
                }
              });
            }
          }
        });
        return new Response(S);
      } else
        throw new LC(`fetch for "${f.url}" responded with ${f.status}: ${f.statusText}`, f);
    }).then((f) => {
      switch (h) {
        case "arraybuffer":
          return f.arrayBuffer();
        case "blob":
          return f.blob();
        case "document":
          return f.text().then((p) => new DOMParser().parseFromString(p, c));
        case "json":
          return f.json();
        default:
          if (c === void 0)
            return f.text();
          {
            const m = /charset="?([^;"\s]*)"?/i.exec(c), g = m && m[1] ? m[1].toLowerCase() : void 0, v = new TextDecoder(g);
            return f.arrayBuffer().then((x) => v.decode(x));
          }
      }
    }).then((f) => {
      Es.add(e, f);
      const p = _s[e];
      delete _s[e];
      for (let m = 0, g = p.length; m < g; m++) {
        const v = p[m];
        v.onLoad && v.onLoad(f);
      }
    }).catch((f) => {
      const p = _s[e];
      if (p === void 0)
        throw this.manager.itemError(e), f;
      delete _s[e];
      for (let m = 0, g = p.length; m < g; m++) {
        const v = p[m];
        v.onError && v.onError(f);
      }
      this.manager.itemError(e);
    }).finally(() => {
      this.manager.itemEnd(e);
    }), this.manager.itemStart(e);
  }
  setResponseType(e) {
    return this.responseType = e, this;
  }
  setMimeType(e) {
    return this.mimeType = e, this;
  }
}
class UC extends ti {
  constructor(e) {
    super(e);
  }
  load(e, t, n, i) {
    const o = this, l = new Rs(this.manager);
    l.setPath(this.path), l.setRequestHeader(this.requestHeader), l.setWithCredentials(this.withCredentials), l.load(e, function(c) {
      try {
        t(o.parse(JSON.parse(c)));
      } catch (h) {
        i ? i(h) : console.error(h), o.manager.itemError(e);
      }
    }, n, i);
  }
  parse(e) {
    const t = [];
    for (let n = 0; n < e.length; n++) {
      const i = Vl.parse(e[n]);
      t.push(i);
    }
    return t;
  }
}
class NC extends ti {
  constructor(e) {
    super(e);
  }
  load(e, t, n, i) {
    const o = this, l = [], c = new ph(), h = new Rs(this.manager);
    h.setPath(this.path), h.setResponseType("arraybuffer"), h.setRequestHeader(this.requestHeader), h.setWithCredentials(o.withCredentials);
    let f = 0;
    function p(m) {
      h.load(e[m], function(g) {
        const v = o.parse(g, !0);
        l[m] = {
          width: v.width,
          height: v.height,
          format: v.format,
          mipmaps: v.mipmaps
        }, f += 1, f === 6 && (v.mipmapCount === 1 && (c.minFilter = ln), c.image = l, c.format = v.format, c.needsUpdate = !0, t && t(c));
      }, n, i);
    }
    if (Array.isArray(e))
      for (let m = 0, g = e.length; m < g; ++m)
        p(m);
    else
      h.load(e, function(m) {
        const g = o.parse(m, !0);
        if (g.isCubemap) {
          const v = g.mipmaps.length / g.mipmapCount;
          for (let x = 0; x < v; x++) {
            l[x] = { mipmaps: [] };
            for (let E = 0; E < g.mipmapCount; E++)
              l[x].mipmaps.push(g.mipmaps[x * g.mipmapCount + E]), l[x].format = g.format, l[x].width = g.width, l[x].height = g.height;
          }
          c.image = l;
        } else
          c.image.width = g.width, c.image.height = g.height, c.mipmaps = g.mipmaps;
        g.mipmapCount === 1 && (c.minFilter = ln), c.format = g.format, c.needsUpdate = !0, t && t(c);
      }, n, i);
    return c;
  }
}
class Gl extends ti {
  constructor(e) {
    super(e);
  }
  load(e, t, n, i) {
    this.path !== void 0 && (e = this.path + e), e = this.manager.resolveURL(e);
    const o = this, l = Es.get(e);
    if (l !== void 0)
      return o.manager.itemStart(e), setTimeout(function() {
        t && t(l), o.manager.itemEnd(e);
      }, 0), l;
    const c = Pl("img");
    function h() {
      p(), Es.add(e, this), t && t(this), o.manager.itemEnd(e);
    }
    function f(m) {
      p(), i && i(m), o.manager.itemError(e), o.manager.itemEnd(e);
    }
    function p() {
      c.removeEventListener("load", h, !1), c.removeEventListener("error", f, !1);
    }
    return c.addEventListener("load", h, !1), c.addEventListener("error", f, !1), e.slice(0, 5) !== "data:" && this.crossOrigin !== void 0 && (c.crossOrigin = this.crossOrigin), o.manager.itemStart(e), c.src = e, c;
  }
}
class DC extends ti {
  constructor(e) {
    super(e);
  }
  load(e, t, n, i) {
    const o = new Yl();
    o.colorSpace = nn;
    const l = new Gl(this.manager);
    l.setCrossOrigin(this.crossOrigin), l.setPath(this.path);
    let c = 0;
    function h(f) {
      l.load(e[f], function(p) {
        o.images[f] = p, c++, c === 6 && (o.needsUpdate = !0, t && t(o));
      }, void 0, i);
    }
    for (let f = 0; f < e.length; ++f)
      h(f);
    return o;
  }
}
class PC extends ti {
  constructor(e) {
    super(e);
  }
  load(e, t, n, i) {
    const o = this, l = new er(), c = new Rs(this.manager);
    return c.setResponseType("arraybuffer"), c.setRequestHeader(this.requestHeader), c.setPath(this.path), c.setWithCredentials(o.withCredentials), c.load(e, function(h) {
      let f;
      try {
        f = o.parse(h);
      } catch (p) {
        if (i !== void 0)
          i(p);
        else {
          console.error(p);
          return;
        }
      }
      f.image !== void 0 ? l.image = f.image : f.data !== void 0 && (l.image.width = f.width, l.image.height = f.height, l.image.data = f.data), l.wrapS = f.wrapS !== void 0 ? f.wrapS : Pn, l.wrapT = f.wrapT !== void 0 ? f.wrapT : Pn, l.magFilter = f.magFilter !== void 0 ? f.magFilter : ln, l.minFilter = f.minFilter !== void 0 ? f.minFilter : ln, l.anisotropy = f.anisotropy !== void 0 ? f.anisotropy : 1, f.colorSpace !== void 0 ? l.colorSpace = f.colorSpace : f.encoding !== void 0 && (l.encoding = f.encoding), f.flipY !== void 0 && (l.flipY = f.flipY), f.format !== void 0 && (l.format = f.format), f.type !== void 0 && (l.type = f.type), f.mipmaps !== void 0 && (l.mipmaps = f.mipmaps, l.minFilter = sa), f.mipmapCount === 1 && (l.minFilter = ln), f.generateMipmaps !== void 0 && (l.generateMipmaps = f.generateMipmaps), l.needsUpdate = !0, t && t(l, f);
    }, n, i), l;
  }
}
class OC extends ti {
  constructor(e) {
    super(e);
  }
  load(e, t, n, i) {
    const o = new un(), l = new Gl(this.manager);
    return l.setCrossOrigin(this.crossOrigin), l.setPath(this.path), l.load(e, function(c) {
      o.image = c, o.needsUpdate = !0, t !== void 0 && t(o);
    }, n, i), o;
  }
}
class ca extends Nt {
  constructor(e, t = 1) {
    super(), this.isLight = !0, this.type = "Light", this.color = new Fe(e), this.intensity = t;
  }
  dispose() {
  }
  copy(e, t) {
    return super.copy(e, t), this.color.copy(e.color), this.intensity = e.intensity, this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.object.color = this.color.getHex(), t.object.intensity = this.intensity, this.groundColor !== void 0 && (t.object.groundColor = this.groundColor.getHex()), this.distance !== void 0 && (t.object.distance = this.distance), this.angle !== void 0 && (t.object.angle = this.angle), this.decay !== void 0 && (t.object.decay = this.decay), this.penumbra !== void 0 && (t.object.penumbra = this.penumbra), this.shadow !== void 0 && (t.object.shadow = this.shadow.toJSON()), t;
  }
}
class $x extends ca {
  constructor(e, t, n) {
    super(e, n), this.isHemisphereLight = !0, this.type = "HemisphereLight", this.position.copy(Nt.DEFAULT_UP), this.updateMatrix(), this.groundColor = new Fe(t);
  }
  copy(e, t) {
    return super.copy(e, t), this.groundColor.copy(e.groundColor), this;
  }
}
const Pd = /* @__PURE__ */ new rt(), m_ = /* @__PURE__ */ new I(), g_ = /* @__PURE__ */ new I();
class Om {
  constructor(e) {
    this.camera = e, this.bias = 0, this.normalBias = 0, this.radius = 1, this.blurSamples = 8, this.mapSize = new de(512, 512), this.map = null, this.mapPass = null, this.matrix = new rt(), this.autoUpdate = !0, this.needsUpdate = !1, this._frustum = new jl(), this._frameExtents = new de(1, 1), this._viewportCount = 1, this._viewports = [
      new It(0, 0, 1, 1)
    ];
  }
  getViewportCount() {
    return this._viewportCount;
  }
  getFrustum() {
    return this._frustum;
  }
  updateMatrices(e) {
    const t = this.camera, n = this.matrix;
    m_.setFromMatrixPosition(e.matrixWorld), t.position.copy(m_), g_.setFromMatrixPosition(e.target.matrixWorld), t.lookAt(g_), t.updateMatrixWorld(), Pd.multiplyMatrices(t.projectionMatrix, t.matrixWorldInverse), this._frustum.setFromProjectionMatrix(Pd), n.set(
      0.5,
      0,
      0,
      0.5,
      0,
      0.5,
      0,
      0.5,
      0,
      0,
      0.5,
      0.5,
      0,
      0,
      0,
      1
    ), n.multiply(Pd);
  }
  getViewport(e) {
    return this._viewports[e];
  }
  getFrameExtents() {
    return this._frameExtents;
  }
  dispose() {
    this.map && this.map.dispose(), this.mapPass && this.mapPass.dispose();
  }
  copy(e) {
    return this.camera = e.camera.clone(), this.bias = e.bias, this.radius = e.radius, this.mapSize.copy(e.mapSize), this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  toJSON() {
    const e = {};
    return this.bias !== 0 && (e.bias = this.bias), this.normalBias !== 0 && (e.normalBias = this.normalBias), this.radius !== 1 && (e.radius = this.radius), (this.mapSize.x !== 512 || this.mapSize.y !== 512) && (e.mapSize = this.mapSize.toArray()), e.camera = this.camera.toJSON(!1).object, delete e.camera.matrix, e;
  }
}
class IC extends Om {
  constructor() {
    super(new cn(50, 1, 0.5, 500)), this.isSpotLightShadow = !0, this.focus = 1;
  }
  updateMatrices(e) {
    const t = this.camera, n = _o * 2 * e.angle * this.focus, i = this.mapSize.width / this.mapSize.height, o = e.distance || t.far;
    (n !== t.fov || i !== t.aspect || o !== t.far) && (t.fov = n, t.aspect = i, t.far = o, t.updateProjectionMatrix()), super.updateMatrices(e);
  }
  copy(e) {
    return super.copy(e), this.focus = e.focus, this;
  }
}
class eS extends ca {
  constructor(e, t, n = 0, i = Math.PI / 3, o = 0, l = 2) {
    super(e, t), this.isSpotLight = !0, this.type = "SpotLight", this.position.copy(Nt.DEFAULT_UP), this.updateMatrix(), this.target = new Nt(), this.distance = n, this.angle = i, this.penumbra = o, this.decay = l, this.map = null, this.shadow = new IC();
  }
  get power() {
    return this.intensity * Math.PI;
  }
  set power(e) {
    this.intensity = e / Math.PI;
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(e, t) {
    return super.copy(e, t), this.distance = e.distance, this.angle = e.angle, this.penumbra = e.penumbra, this.decay = e.decay, this.target = e.target.clone(), this.shadow = e.shadow.clone(), this;
  }
}
const v_ = /* @__PURE__ */ new rt(), dl = /* @__PURE__ */ new I(), Od = /* @__PURE__ */ new I();
class zC extends Om {
  constructor() {
    super(new cn(90, 1, 0.5, 500)), this.isPointLightShadow = !0, this._frameExtents = new de(4, 2), this._viewportCount = 6, this._viewports = [
      // These viewports map a cube-map onto a 2D texture with the
      // following orientation:
      //
      //  xzXZ
      //   y Y
      //
      // X - Positive x direction
      // x - Negative x direction
      // Y - Positive y direction
      // y - Negative y direction
      // Z - Positive z direction
      // z - Negative z direction
      // positive X
      new It(2, 1, 1, 1),
      // negative X
      new It(0, 1, 1, 1),
      // positive Z
      new It(3, 1, 1, 1),
      // negative Z
      new It(1, 1, 1, 1),
      // positive Y
      new It(3, 0, 1, 1),
      // negative Y
      new It(1, 0, 1, 1)
    ], this._cubeDirections = [
      new I(1, 0, 0),
      new I(-1, 0, 0),
      new I(0, 0, 1),
      new I(0, 0, -1),
      new I(0, 1, 0),
      new I(0, -1, 0)
    ], this._cubeUps = [
      new I(0, 1, 0),
      new I(0, 1, 0),
      new I(0, 1, 0),
      new I(0, 1, 0),
      new I(0, 0, 1),
      new I(0, 0, -1)
    ];
  }
  updateMatrices(e, t = 0) {
    const n = this.camera, i = this.matrix, o = e.distance || n.far;
    o !== n.far && (n.far = o, n.updateProjectionMatrix()), dl.setFromMatrixPosition(e.matrixWorld), n.position.copy(dl), Od.copy(n.position), Od.add(this._cubeDirections[t]), n.up.copy(this._cubeUps[t]), n.lookAt(Od), n.updateMatrixWorld(), i.makeTranslation(-dl.x, -dl.y, -dl.z), v_.multiplyMatrices(n.projectionMatrix, n.matrixWorldInverse), this._frustum.setFromProjectionMatrix(v_);
  }
}
class tS extends ca {
  constructor(e, t, n = 0, i = 2) {
    super(e, t), this.isPointLight = !0, this.type = "PointLight", this.distance = n, this.decay = i, this.shadow = new zC();
  }
  get power() {
    return this.intensity * 4 * Math.PI;
  }
  set power(e) {
    this.intensity = e / (4 * Math.PI);
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(e, t) {
    return super.copy(e, t), this.distance = e.distance, this.decay = e.decay, this.shadow = e.shadow.clone(), this;
  }
}
class BC extends Om {
  constructor() {
    super(new Ts(-5, 5, 5, -5, 0.5, 500)), this.isDirectionalLightShadow = !0;
  }
}
class nS extends ca {
  constructor(e, t) {
    super(e, t), this.isDirectionalLight = !0, this.type = "DirectionalLight", this.position.copy(Nt.DEFAULT_UP), this.updateMatrix(), this.target = new Nt(), this.shadow = new BC();
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(e) {
    return super.copy(e), this.target = e.target.clone(), this.shadow = e.shadow.clone(), this;
  }
}
class iS extends ca {
  constructor(e, t) {
    super(e, t), this.isAmbientLight = !0, this.type = "AmbientLight";
  }
}
class sS extends ca {
  constructor(e, t, n = 10, i = 10) {
    super(e, t), this.isRectAreaLight = !0, this.type = "RectAreaLight", this.width = n, this.height = i;
  }
  get power() {
    return this.intensity * this.width * this.height * Math.PI;
  }
  set power(e) {
    this.intensity = e / (this.width * this.height * Math.PI);
  }
  copy(e) {
    return super.copy(e), this.width = e.width, this.height = e.height, this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.object.width = this.width, t.object.height = this.height, t;
  }
}
class aS {
  constructor() {
    this.isSphericalHarmonics3 = !0, this.coefficients = [];
    for (let e = 0; e < 9; e++)
      this.coefficients.push(new I());
  }
  set(e) {
    for (let t = 0; t < 9; t++)
      this.coefficients[t].copy(e[t]);
    return this;
  }
  zero() {
    for (let e = 0; e < 9; e++)
      this.coefficients[e].set(0, 0, 0);
    return this;
  }
  // get the radiance in the direction of the normal
  // target is a Vector3
  getAt(e, t) {
    const n = e.x, i = e.y, o = e.z, l = this.coefficients;
    return t.copy(l[0]).multiplyScalar(0.282095), t.addScaledVector(l[1], 0.488603 * i), t.addScaledVector(l[2], 0.488603 * o), t.addScaledVector(l[3], 0.488603 * n), t.addScaledVector(l[4], 1.092548 * (n * i)), t.addScaledVector(l[5], 1.092548 * (i * o)), t.addScaledVector(l[6], 0.315392 * (3 * o * o - 1)), t.addScaledVector(l[7], 1.092548 * (n * o)), t.addScaledVector(l[8], 0.546274 * (n * n - i * i)), t;
  }
  // get the irradiance (radiance convolved with cosine lobe) in the direction of the normal
  // target is a Vector3
  // https://graphics.stanford.edu/papers/envmap/envmap.pdf
  getIrradianceAt(e, t) {
    const n = e.x, i = e.y, o = e.z, l = this.coefficients;
    return t.copy(l[0]).multiplyScalar(0.886227), t.addScaledVector(l[1], 2 * 0.511664 * i), t.addScaledVector(l[2], 2 * 0.511664 * o), t.addScaledVector(l[3], 2 * 0.511664 * n), t.addScaledVector(l[4], 2 * 0.429043 * n * i), t.addScaledVector(l[5], 2 * 0.429043 * i * o), t.addScaledVector(l[6], 0.743125 * o * o - 0.247708), t.addScaledVector(l[7], 2 * 0.429043 * n * o), t.addScaledVector(l[8], 0.429043 * (n * n - i * i)), t;
  }
  add(e) {
    for (let t = 0; t < 9; t++)
      this.coefficients[t].add(e.coefficients[t]);
    return this;
  }
  addScaledSH(e, t) {
    for (let n = 0; n < 9; n++)
      this.coefficients[n].addScaledVector(e.coefficients[n], t);
    return this;
  }
  scale(e) {
    for (let t = 0; t < 9; t++)
      this.coefficients[t].multiplyScalar(e);
    return this;
  }
  lerp(e, t) {
    for (let n = 0; n < 9; n++)
      this.coefficients[n].lerp(e.coefficients[n], t);
    return this;
  }
  equals(e) {
    for (let t = 0; t < 9; t++)
      if (!this.coefficients[t].equals(e.coefficients[t]))
        return !1;
    return !0;
  }
  copy(e) {
    return this.set(e.coefficients);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  fromArray(e, t = 0) {
    const n = this.coefficients;
    for (let i = 0; i < 9; i++)
      n[i].fromArray(e, t + i * 3);
    return this;
  }
  toArray(e = [], t = 0) {
    const n = this.coefficients;
    for (let i = 0; i < 9; i++)
      n[i].toArray(e, t + i * 3);
    return e;
  }
  // evaluate the basis functions
  // shBasis is an Array[ 9 ]
  static getBasisAt(e, t) {
    const n = e.x, i = e.y, o = e.z;
    t[0] = 0.282095, t[1] = 0.488603 * i, t[2] = 0.488603 * o, t[3] = 0.488603 * n, t[4] = 1.092548 * n * i, t[5] = 1.092548 * i * o, t[6] = 0.315392 * (3 * o * o - 1), t[7] = 1.092548 * n * o, t[8] = 0.546274 * (n * n - i * i);
  }
}
class rS extends ca {
  constructor(e = new aS(), t = 1) {
    super(void 0, t), this.isLightProbe = !0, this.sh = e;
  }
  copy(e) {
    return super.copy(e), this.sh.copy(e.sh), this;
  }
  fromJSON(e) {
    return this.intensity = e.intensity, this.sh.fromArray(e.sh), this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.object.sh = this.sh.toArray(), t;
  }
}
class Ch extends ti {
  constructor(e) {
    super(e), this.textures = {};
  }
  load(e, t, n, i) {
    const o = this, l = new Rs(o.manager);
    l.setPath(o.path), l.setRequestHeader(o.requestHeader), l.setWithCredentials(o.withCredentials), l.load(e, function(c) {
      try {
        t(o.parse(JSON.parse(c)));
      } catch (h) {
        i ? i(h) : console.error(h), o.manager.itemError(e);
      }
    }, n, i);
  }
  parse(e) {
    const t = this.textures;
    function n(o) {
      return t[o] === void 0 && console.warn("THREE.MaterialLoader: Undefined texture", o), t[o];
    }
    const i = Ch.createMaterialFromType(e.type);
    if (e.uuid !== void 0 && (i.uuid = e.uuid), e.name !== void 0 && (i.name = e.name), e.color !== void 0 && i.color !== void 0 && i.color.setHex(e.color), e.roughness !== void 0 && (i.roughness = e.roughness), e.metalness !== void 0 && (i.metalness = e.metalness), e.sheen !== void 0 && (i.sheen = e.sheen), e.sheenColor !== void 0 && (i.sheenColor = new Fe().setHex(e.sheenColor)), e.sheenRoughness !== void 0 && (i.sheenRoughness = e.sheenRoughness), e.emissive !== void 0 && i.emissive !== void 0 && i.emissive.setHex(e.emissive), e.specular !== void 0 && i.specular !== void 0 && i.specular.setHex(e.specular), e.specularIntensity !== void 0 && (i.specularIntensity = e.specularIntensity), e.specularColor !== void 0 && i.specularColor !== void 0 && i.specularColor.setHex(e.specularColor), e.shininess !== void 0 && (i.shininess = e.shininess), e.clearcoat !== void 0 && (i.clearcoat = e.clearcoat), e.clearcoatRoughness !== void 0 && (i.clearcoatRoughness = e.clearcoatRoughness), e.iridescence !== void 0 && (i.iridescence = e.iridescence), e.iridescenceIOR !== void 0 && (i.iridescenceIOR = e.iridescenceIOR), e.iridescenceThicknessRange !== void 0 && (i.iridescenceThicknessRange = e.iridescenceThicknessRange), e.transmission !== void 0 && (i.transmission = e.transmission), e.thickness !== void 0 && (i.thickness = e.thickness), e.attenuationDistance !== void 0 && (i.attenuationDistance = e.attenuationDistance), e.attenuationColor !== void 0 && i.attenuationColor !== void 0 && i.attenuationColor.setHex(e.attenuationColor), e.anisotropy !== void 0 && (i.anisotropy = e.anisotropy), e.anisotropyRotation !== void 0 && (i.anisotropyRotation = e.anisotropyRotation), e.fog !== void 0 && (i.fog = e.fog), e.flatShading !== void 0 && (i.flatShading = e.flatShading), e.blending !== void 0 && (i.blending = e.blending), e.combine !== void 0 && (i.combine = e.combine), e.side !== void 0 && (i.side = e.side), e.shadowSide !== void 0 && (i.shadowSide = e.shadowSide), e.opacity !== void 0 && (i.opacity = e.opacity), e.transparent !== void 0 && (i.transparent = e.transparent), e.alphaTest !== void 0 && (i.alphaTest = e.alphaTest), e.alphaHash !== void 0 && (i.alphaHash = e.alphaHash), e.depthFunc !== void 0 && (i.depthFunc = e.depthFunc), e.depthTest !== void 0 && (i.depthTest = e.depthTest), e.depthWrite !== void 0 && (i.depthWrite = e.depthWrite), e.colorWrite !== void 0 && (i.colorWrite = e.colorWrite), e.blendSrc !== void 0 && (i.blendSrc = e.blendSrc), e.blendDst !== void 0 && (i.blendDst = e.blendDst), e.blendEquation !== void 0 && (i.blendEquation = e.blendEquation), e.blendSrcAlpha !== void 0 && (i.blendSrcAlpha = e.blendSrcAlpha), e.blendDstAlpha !== void 0 && (i.blendDstAlpha = e.blendDstAlpha), e.blendEquationAlpha !== void 0 && (i.blendEquationAlpha = e.blendEquationAlpha), e.blendColor !== void 0 && i.blendColor !== void 0 && i.blendColor.setHex(e.blendColor), e.blendAlpha !== void 0 && (i.blendAlpha = e.blendAlpha), e.stencilWriteMask !== void 0 && (i.stencilWriteMask = e.stencilWriteMask), e.stencilFunc !== void 0 && (i.stencilFunc = e.stencilFunc), e.stencilRef !== void 0 && (i.stencilRef = e.stencilRef), e.stencilFuncMask !== void 0 && (i.stencilFuncMask = e.stencilFuncMask), e.stencilFail !== void 0 && (i.stencilFail = e.stencilFail), e.stencilZFail !== void 0 && (i.stencilZFail = e.stencilZFail), e.stencilZPass !== void 0 && (i.stencilZPass = e.stencilZPass), e.stencilWrite !== void 0 && (i.stencilWrite = e.stencilWrite), e.wireframe !== void 0 && (i.wireframe = e.wireframe), e.wireframeLinewidth !== void 0 && (i.wireframeLinewidth = e.wireframeLinewidth), e.wireframeLinecap !== void 0 && (i.wireframeLinecap = e.wireframeLinecap), e.wireframeLinejoin !== void 0 && (i.wireframeLinejoin = e.wireframeLinejoin), e.rotation !== void 0 && (i.rotation = e.rotation), e.linewidth !== void 0 && (i.linewidth = e.linewidth), e.dashSize !== void 0 && (i.dashSize = e.dashSize), e.gapSize !== void 0 && (i.gapSize = e.gapSize), e.scale !== void 0 && (i.scale = e.scale), e.polygonOffset !== void 0 && (i.polygonOffset = e.polygonOffset), e.polygonOffsetFactor !== void 0 && (i.polygonOffsetFactor = e.polygonOffsetFactor), e.polygonOffsetUnits !== void 0 && (i.polygonOffsetUnits = e.polygonOffsetUnits), e.dithering !== void 0 && (i.dithering = e.dithering), e.alphaToCoverage !== void 0 && (i.alphaToCoverage = e.alphaToCoverage), e.premultipliedAlpha !== void 0 && (i.premultipliedAlpha = e.premultipliedAlpha), e.forceSinglePass !== void 0 && (i.forceSinglePass = e.forceSinglePass), e.visible !== void 0 && (i.visible = e.visible), e.toneMapped !== void 0 && (i.toneMapped = e.toneMapped), e.userData !== void 0 && (i.userData = e.userData), e.vertexColors !== void 0 && (typeof e.vertexColors == "number" ? i.vertexColors = e.vertexColors > 0 : i.vertexColors = e.vertexColors), e.uniforms !== void 0)
      for (const o in e.uniforms) {
        const l = e.uniforms[o];
        switch (i.uniforms[o] = {}, l.type) {
          case "t":
            i.uniforms[o].value = n(l.value);
            break;
          case "c":
            i.uniforms[o].value = new Fe().setHex(l.value);
            break;
          case "v2":
            i.uniforms[o].value = new de().fromArray(l.value);
            break;
          case "v3":
            i.uniforms[o].value = new I().fromArray(l.value);
            break;
          case "v4":
            i.uniforms[o].value = new It().fromArray(l.value);
            break;
          case "m3":
            i.uniforms[o].value = new yt().fromArray(l.value);
            break;
          case "m4":
            i.uniforms[o].value = new rt().fromArray(l.value);
            break;
          default:
            i.uniforms[o].value = l.value;
        }
      }
    if (e.defines !== void 0 && (i.defines = e.defines), e.vertexShader !== void 0 && (i.vertexShader = e.vertexShader), e.fragmentShader !== void 0 && (i.fragmentShader = e.fragmentShader), e.glslVersion !== void 0 && (i.glslVersion = e.glslVersion), e.extensions !== void 0)
      for (const o in e.extensions)
        i.extensions[o] = e.extensions[o];
    if (e.lights !== void 0 && (i.lights = e.lights), e.clipping !== void 0 && (i.clipping = e.clipping), e.size !== void 0 && (i.size = e.size), e.sizeAttenuation !== void 0 && (i.sizeAttenuation = e.sizeAttenuation), e.map !== void 0 && (i.map = n(e.map)), e.matcap !== void 0 && (i.matcap = n(e.matcap)), e.alphaMap !== void 0 && (i.alphaMap = n(e.alphaMap)), e.bumpMap !== void 0 && (i.bumpMap = n(e.bumpMap)), e.bumpScale !== void 0 && (i.bumpScale = e.bumpScale), e.normalMap !== void 0 && (i.normalMap = n(e.normalMap)), e.normalMapType !== void 0 && (i.normalMapType = e.normalMapType), e.normalScale !== void 0) {
      let o = e.normalScale;
      Array.isArray(o) === !1 && (o = [o, o]), i.normalScale = new de().fromArray(o);
    }
    return e.displacementMap !== void 0 && (i.displacementMap = n(e.displacementMap)), e.displacementScale !== void 0 && (i.displacementScale = e.displacementScale), e.displacementBias !== void 0 && (i.displacementBias = e.displacementBias), e.roughnessMap !== void 0 && (i.roughnessMap = n(e.roughnessMap)), e.metalnessMap !== void 0 && (i.metalnessMap = n(e.metalnessMap)), e.emissiveMap !== void 0 && (i.emissiveMap = n(e.emissiveMap)), e.emissiveIntensity !== void 0 && (i.emissiveIntensity = e.emissiveIntensity), e.specularMap !== void 0 && (i.specularMap = n(e.specularMap)), e.specularIntensityMap !== void 0 && (i.specularIntensityMap = n(e.specularIntensityMap)), e.specularColorMap !== void 0 && (i.specularColorMap = n(e.specularColorMap)), e.envMap !== void 0 && (i.envMap = n(e.envMap)), e.envMapIntensity !== void 0 && (i.envMapIntensity = e.envMapIntensity), e.reflectivity !== void 0 && (i.reflectivity = e.reflectivity), e.refractionRatio !== void 0 && (i.refractionRatio = e.refractionRatio), e.lightMap !== void 0 && (i.lightMap = n(e.lightMap)), e.lightMapIntensity !== void 0 && (i.lightMapIntensity = e.lightMapIntensity), e.aoMap !== void 0 && (i.aoMap = n(e.aoMap)), e.aoMapIntensity !== void 0 && (i.aoMapIntensity = e.aoMapIntensity), e.gradientMap !== void 0 && (i.gradientMap = n(e.gradientMap)), e.clearcoatMap !== void 0 && (i.clearcoatMap = n(e.clearcoatMap)), e.clearcoatRoughnessMap !== void 0 && (i.clearcoatRoughnessMap = n(e.clearcoatRoughnessMap)), e.clearcoatNormalMap !== void 0 && (i.clearcoatNormalMap = n(e.clearcoatNormalMap)), e.clearcoatNormalScale !== void 0 && (i.clearcoatNormalScale = new de().fromArray(e.clearcoatNormalScale)), e.iridescenceMap !== void 0 && (i.iridescenceMap = n(e.iridescenceMap)), e.iridescenceThicknessMap !== void 0 && (i.iridescenceThicknessMap = n(e.iridescenceThicknessMap)), e.transmissionMap !== void 0 && (i.transmissionMap = n(e.transmissionMap)), e.thicknessMap !== void 0 && (i.thicknessMap = n(e.thicknessMap)), e.anisotropyMap !== void 0 && (i.anisotropyMap = n(e.anisotropyMap)), e.sheenColorMap !== void 0 && (i.sheenColorMap = n(e.sheenColorMap)), e.sheenRoughnessMap !== void 0 && (i.sheenRoughnessMap = n(e.sheenRoughnessMap)), i;
  }
  setTextures(e) {
    return this.textures = e, this;
  }
  static createMaterialFromType(e) {
    const t = {
      ShadowMaterial: Bx,
      SpriteMaterial: Sm,
      RawShaderMaterial: Hx,
      ShaderMaterial: Gi,
      PointsMaterial: Em,
      MeshPhysicalMaterial: Fx,
      MeshStandardMaterial: Lm,
      MeshPhongMaterial: Vx,
      MeshToonMaterial: Gx,
      MeshNormalMaterial: Wx,
      MeshLambertMaterial: Xx,
      MeshDepthMaterial: _m,
      MeshDistanceMaterial: ym,
      MeshBasicMaterial: oa,
      MeshMatcapMaterial: kx,
      LineDashedMaterial: qx,
      LineBasicMaterial: qn,
      Material: zn
    };
    return new t[e]();
  }
}
class Gp {
  static decodeText(e) {
    if (typeof TextDecoder < "u")
      return new TextDecoder().decode(e);
    let t = "";
    for (let n = 0, i = e.length; n < i; n++)
      t += String.fromCharCode(e[n]);
    try {
      return decodeURIComponent(escape(t));
    } catch {
      return t;
    }
  }
  static extractUrlBase(e) {
    const t = e.lastIndexOf("/");
    return t === -1 ? "./" : e.slice(0, t + 1);
  }
  static resolveURL(e, t) {
    return typeof e != "string" || e === "" ? "" : (/^https?:\/\//i.test(t) && /^\//.test(e) && (t = t.replace(/(^https?:\/\/[^\/]+).*/i, "$1")), /^(https?:)?\/\//i.test(e) || /^data:.*,.*$/i.test(e) || /^blob:.*$/i.test(e) ? e : t + e);
  }
}
class oS extends xt {
  constructor() {
    super(), this.isInstancedBufferGeometry = !0, this.type = "InstancedBufferGeometry", this.instanceCount = 1 / 0;
  }
  copy(e) {
    return super.copy(e), this.instanceCount = e.instanceCount, this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.instanceCount = this.instanceCount, e.isInstancedBufferGeometry = !0, e;
  }
}
class lS extends ti {
  constructor(e) {
    super(e);
  }
  load(e, t, n, i) {
    const o = this, l = new Rs(o.manager);
    l.setPath(o.path), l.setRequestHeader(o.requestHeader), l.setWithCredentials(o.withCredentials), l.load(e, function(c) {
      try {
        t(o.parse(JSON.parse(c)));
      } catch (h) {
        i ? i(h) : console.error(h), o.manager.itemError(e);
      }
    }, n, i);
  }
  parse(e) {
    const t = {}, n = {};
    function i(v, x) {
      if (t[x] !== void 0) return t[x];
      const S = v.interleavedBuffers[x], y = o(v, S.buffer), T = co(S.type, y), b = new fh(T, S.stride);
      return b.uuid = S.uuid, t[x] = b, b;
    }
    function o(v, x) {
      if (n[x] !== void 0) return n[x];
      const S = v.arrayBuffers[x], y = new Uint32Array(S).buffer;
      return n[x] = y, y;
    }
    const l = e.isInstancedBufferGeometry ? new oS() : new xt(), c = e.data.index;
    if (c !== void 0) {
      const v = co(c.type, c.array);
      l.setIndex(new zt(v, 1));
    }
    const h = e.data.attributes;
    for (const v in h) {
      const x = h[v];
      let E;
      if (x.isInterleavedBufferAttribute) {
        const S = i(e.data, x.data);
        E = new ir(S, x.itemSize, x.offset, x.normalized);
      } else {
        const S = co(x.type, x.array), y = x.isInstancedBufferAttribute ? So : zt;
        E = new y(S, x.itemSize, x.normalized);
      }
      x.name !== void 0 && (E.name = x.name), x.usage !== void 0 && E.setUsage(x.usage), l.setAttribute(v, E);
    }
    const f = e.data.morphAttributes;
    if (f)
      for (const v in f) {
        const x = f[v], E = [];
        for (let S = 0, y = x.length; S < y; S++) {
          const T = x[S];
          let b;
          if (T.isInterleavedBufferAttribute) {
            const A = i(e.data, T.data);
            b = new ir(A, T.itemSize, T.offset, T.normalized);
          } else {
            const A = co(T.type, T.array);
            b = new zt(A, T.itemSize, T.normalized);
          }
          T.name !== void 0 && (b.name = T.name), E.push(b);
        }
        l.morphAttributes[v] = E;
      }
    e.data.morphTargetsRelative && (l.morphTargetsRelative = !0);
    const m = e.data.groups || e.data.drawcalls || e.data.offsets;
    if (m !== void 0)
      for (let v = 0, x = m.length; v !== x; ++v) {
        const E = m[v];
        l.addGroup(E.start, E.count, E.materialIndex);
      }
    const g = e.data.boundingSphere;
    if (g !== void 0) {
      const v = new I();
      g.center !== void 0 && v.fromArray(g.center), l.boundingSphere = new In(v, g.radius);
    }
    return e.name && (l.name = e.name), e.userData && (l.userData = e.userData), l;
  }
}
class HC extends ti {
  constructor(e) {
    super(e);
  }
  load(e, t, n, i) {
    const o = this, l = this.path === "" ? Gp.extractUrlBase(e) : this.path;
    this.resourcePath = this.resourcePath || l;
    const c = new Rs(this.manager);
    c.setPath(this.path), c.setRequestHeader(this.requestHeader), c.setWithCredentials(this.withCredentials), c.load(e, function(h) {
      let f = null;
      try {
        f = JSON.parse(h);
      } catch (m) {
        i !== void 0 && i(m), console.error("THREE:ObjectLoader: Can't parse " + e + ".", m.message);
        return;
      }
      const p = f.metadata;
      if (p === void 0 || p.type === void 0 || p.type.toLowerCase() === "geometry") {
        i !== void 0 && i(new Error("THREE.ObjectLoader: Can't load " + e)), console.error("THREE.ObjectLoader: Can't load " + e);
        return;
      }
      o.parse(f, t);
    }, n, i);
  }
  async loadAsync(e, t) {
    const n = this, i = this.path === "" ? Gp.extractUrlBase(e) : this.path;
    this.resourcePath = this.resourcePath || i;
    const o = new Rs(this.manager);
    o.setPath(this.path), o.setRequestHeader(this.requestHeader), o.setWithCredentials(this.withCredentials);
    const l = await o.loadAsync(e, t), c = JSON.parse(l), h = c.metadata;
    if (h === void 0 || h.type === void 0 || h.type.toLowerCase() === "geometry")
      throw new Error("THREE.ObjectLoader: Can't load " + e);
    return await n.parseAsync(c);
  }
  parse(e, t) {
    const n = this.parseAnimations(e.animations), i = this.parseShapes(e.shapes), o = this.parseGeometries(e.geometries, i), l = this.parseImages(e.images, function() {
      t !== void 0 && t(f);
    }), c = this.parseTextures(e.textures, l), h = this.parseMaterials(e.materials, c), f = this.parseObject(e.object, o, h, c, n), p = this.parseSkeletons(e.skeletons, f);
    if (this.bindSkeletons(f, p), t !== void 0) {
      let m = !1;
      for (const g in l)
        if (l[g].data instanceof HTMLImageElement) {
          m = !0;
          break;
        }
      m === !1 && t(f);
    }
    return f;
  }
  async parseAsync(e) {
    const t = this.parseAnimations(e.animations), n = this.parseShapes(e.shapes), i = this.parseGeometries(e.geometries, n), o = await this.parseImagesAsync(e.images), l = this.parseTextures(e.textures, o), c = this.parseMaterials(e.materials, l), h = this.parseObject(e.object, i, c, l, t), f = this.parseSkeletons(e.skeletons, h);
    return this.bindSkeletons(h, f), h;
  }
  parseShapes(e) {
    const t = {};
    if (e !== void 0)
      for (let n = 0, i = e.length; n < i; n++) {
        const o = new tr().fromJSON(e[n]);
        t[o.uuid] = o;
      }
    return t;
  }
  parseSkeletons(e, t) {
    const n = {}, i = {};
    if (t.traverse(function(o) {
      o.isBone && (i[o.uuid] = o);
    }), e !== void 0)
      for (let o = 0, l = e.length; o < l; o++) {
        const c = new dh().fromJSON(e[o], i);
        n[c.uuid] = c;
      }
    return n;
  }
  parseGeometries(e, t) {
    const n = {};
    if (e !== void 0) {
      const i = new lS();
      for (let o = 0, l = e.length; o < l; o++) {
        let c;
        const h = e[o];
        switch (h.type) {
          case "BufferGeometry":
          case "InstancedBufferGeometry":
            c = i.parse(h);
            break;
          default:
            h.type in p_ ? c = p_[h.type].fromJSON(h, t) : console.warn(`THREE.ObjectLoader: Unsupported geometry type "${h.type}"`);
        }
        c.uuid = h.uuid, h.name !== void 0 && (c.name = h.name), h.userData !== void 0 && (c.userData = h.userData), n[h.uuid] = c;
      }
    }
    return n;
  }
  parseMaterials(e, t) {
    const n = {}, i = {};
    if (e !== void 0) {
      const o = new Ch();
      o.setTextures(t);
      for (let l = 0, c = e.length; l < c; l++) {
        const h = e[l];
        n[h.uuid] === void 0 && (n[h.uuid] = o.parse(h)), i[h.uuid] = n[h.uuid];
      }
    }
    return i;
  }
  parseAnimations(e) {
    const t = {};
    if (e !== void 0)
      for (let n = 0; n < e.length; n++) {
        const i = e[n], o = Vl.parse(i);
        t[o.uuid] = o;
      }
    return t;
  }
  parseImages(e, t) {
    const n = this, i = {};
    let o;
    function l(h) {
      return n.manager.itemStart(h), o.load(h, function() {
        n.manager.itemEnd(h);
      }, void 0, function() {
        n.manager.itemError(h), n.manager.itemEnd(h);
      });
    }
    function c(h) {
      if (typeof h == "string") {
        const f = h, p = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(f) ? f : n.resourcePath + f;
        return l(p);
      } else
        return h.data ? {
          data: co(h.type, h.data),
          width: h.width,
          height: h.height
        } : null;
    }
    if (e !== void 0 && e.length > 0) {
      const h = new Pm(t);
      o = new Gl(h), o.setCrossOrigin(this.crossOrigin);
      for (let f = 0, p = e.length; f < p; f++) {
        const m = e[f], g = m.url;
        if (Array.isArray(g)) {
          const v = [];
          for (let x = 0, E = g.length; x < E; x++) {
            const S = g[x], y = c(S);
            y !== null && (y instanceof HTMLImageElement ? v.push(y) : v.push(new er(y.data, y.width, y.height)));
          }
          i[m.uuid] = new Za(v);
        } else {
          const v = c(m.url);
          i[m.uuid] = new Za(v);
        }
      }
    }
    return i;
  }
  async parseImagesAsync(e) {
    const t = this, n = {};
    let i;
    async function o(l) {
      if (typeof l == "string") {
        const c = l, h = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(c) ? c : t.resourcePath + c;
        return await i.loadAsync(h);
      } else
        return l.data ? {
          data: co(l.type, l.data),
          width: l.width,
          height: l.height
        } : null;
    }
    if (e !== void 0 && e.length > 0) {
      i = new Gl(this.manager), i.setCrossOrigin(this.crossOrigin);
      for (let l = 0, c = e.length; l < c; l++) {
        const h = e[l], f = h.url;
        if (Array.isArray(f)) {
          const p = [];
          for (let m = 0, g = f.length; m < g; m++) {
            const v = f[m], x = await o(v);
            x !== null && (x instanceof HTMLImageElement ? p.push(x) : p.push(new er(x.data, x.width, x.height)));
          }
          n[h.uuid] = new Za(p);
        } else {
          const p = await o(h.url);
          n[h.uuid] = new Za(p);
        }
      }
    }
    return n;
  }
  parseTextures(e, t) {
    function n(o, l) {
      return typeof o == "number" ? o : (console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.", o), l[o]);
    }
    const i = {};
    if (e !== void 0)
      for (let o = 0, l = e.length; o < l; o++) {
        const c = e[o];
        c.image === void 0 && console.warn('THREE.ObjectLoader: No "image" specified for', c.uuid), t[c.image] === void 0 && console.warn("THREE.ObjectLoader: Undefined image", c.image);
        const h = t[c.image], f = h.data;
        let p;
        Array.isArray(f) ? (p = new Yl(), f.length === 6 && (p.needsUpdate = !0)) : (f && f.data ? p = new er() : p = new un(), f && (p.needsUpdate = !0)), p.source = h, p.uuid = c.uuid, c.name !== void 0 && (p.name = c.name), c.mapping !== void 0 && (p.mapping = n(c.mapping, FC)), c.channel !== void 0 && (p.channel = c.channel), c.offset !== void 0 && p.offset.fromArray(c.offset), c.repeat !== void 0 && p.repeat.fromArray(c.repeat), c.center !== void 0 && p.center.fromArray(c.center), c.rotation !== void 0 && (p.rotation = c.rotation), c.wrap !== void 0 && (p.wrapS = n(c.wrap[0], __), p.wrapT = n(c.wrap[1], __)), c.format !== void 0 && (p.format = c.format), c.internalFormat !== void 0 && (p.internalFormat = c.internalFormat), c.type !== void 0 && (p.type = c.type), c.colorSpace !== void 0 && (p.colorSpace = c.colorSpace), c.encoding !== void 0 && (p.encoding = c.encoding), c.minFilter !== void 0 && (p.minFilter = n(c.minFilter, y_)), c.magFilter !== void 0 && (p.magFilter = n(c.magFilter, y_)), c.anisotropy !== void 0 && (p.anisotropy = c.anisotropy), c.flipY !== void 0 && (p.flipY = c.flipY), c.generateMipmaps !== void 0 && (p.generateMipmaps = c.generateMipmaps), c.premultiplyAlpha !== void 0 && (p.premultiplyAlpha = c.premultiplyAlpha), c.unpackAlignment !== void 0 && (p.unpackAlignment = c.unpackAlignment), c.compareFunction !== void 0 && (p.compareFunction = c.compareFunction), c.userData !== void 0 && (p.userData = c.userData), i[c.uuid] = p;
      }
    return i;
  }
  parseObject(e, t, n, i, o) {
    let l;
    function c(g) {
      return t[g] === void 0 && console.warn("THREE.ObjectLoader: Undefined geometry", g), t[g];
    }
    function h(g) {
      if (g !== void 0) {
        if (Array.isArray(g)) {
          const v = [];
          for (let x = 0, E = g.length; x < E; x++) {
            const S = g[x];
            n[S] === void 0 && console.warn("THREE.ObjectLoader: Undefined material", S), v.push(n[S]);
          }
          return v;
        }
        return n[g] === void 0 && console.warn("THREE.ObjectLoader: Undefined material", g), n[g];
      }
    }
    function f(g) {
      return i[g] === void 0 && console.warn("THREE.ObjectLoader: Undefined texture", g), i[g];
    }
    let p, m;
    switch (e.type) {
      case "Scene":
        l = new hh(), e.background !== void 0 && (Number.isInteger(e.background) ? l.background = new Fe(e.background) : l.background = f(e.background)), e.environment !== void 0 && (l.environment = f(e.environment)), e.fog !== void 0 && (e.fog.type === "Fog" ? l.fog = new uh(e.fog.color, e.fog.near, e.fog.far) : e.fog.type === "FogExp2" && (l.fog = new ch(e.fog.color, e.fog.density)), e.fog.name !== "" && (l.fog.name = e.fog.name)), e.backgroundBlurriness !== void 0 && (l.backgroundBlurriness = e.backgroundBlurriness), e.backgroundIntensity !== void 0 && (l.backgroundIntensity = e.backgroundIntensity);
        break;
      case "PerspectiveCamera":
        l = new cn(e.fov, e.aspect, e.near, e.far), e.focus !== void 0 && (l.focus = e.focus), e.zoom !== void 0 && (l.zoom = e.zoom), e.filmGauge !== void 0 && (l.filmGauge = e.filmGauge), e.filmOffset !== void 0 && (l.filmOffset = e.filmOffset), e.view !== void 0 && (l.view = Object.assign({}, e.view));
        break;
      case "OrthographicCamera":
        l = new Ts(e.left, e.right, e.top, e.bottom, e.near, e.far), e.zoom !== void 0 && (l.zoom = e.zoom), e.view !== void 0 && (l.view = Object.assign({}, e.view));
        break;
      case "AmbientLight":
        l = new iS(e.color, e.intensity);
        break;
      case "DirectionalLight":
        l = new nS(e.color, e.intensity);
        break;
      case "PointLight":
        l = new tS(e.color, e.intensity, e.distance, e.decay);
        break;
      case "RectAreaLight":
        l = new sS(e.color, e.intensity, e.width, e.height);
        break;
      case "SpotLight":
        l = new eS(e.color, e.intensity, e.distance, e.angle, e.penumbra, e.decay);
        break;
      case "HemisphereLight":
        l = new $x(e.color, e.groundColor, e.intensity);
        break;
      case "LightProbe":
        l = new rS().fromJSON(e);
        break;
      case "SkinnedMesh":
        p = c(e.geometry), m = h(e.material), l = new Ex(p, m), e.bindMode !== void 0 && (l.bindMode = e.bindMode), e.bindMatrix !== void 0 && l.bindMatrix.fromArray(e.bindMatrix), e.skeleton !== void 0 && (l.skeleton = e.skeleton);
        break;
      case "Mesh":
        p = c(e.geometry), m = h(e.material), l = new pn(p, m);
        break;
      case "InstancedMesh":
        p = c(e.geometry), m = h(e.material);
        const g = e.count, v = e.instanceMatrix, x = e.instanceColor;
        l = new bx(p, m, g), l.instanceMatrix = new So(new Float32Array(v.array), 16), x !== void 0 && (l.instanceColor = new So(new Float32Array(x.array), x.itemSize));
        break;
      case "BatchedMesh":
        p = c(e.geometry), m = h(e.material), l = new Tx(e.maxGeometryCount, e.maxVertexCount, e.maxIndexCount, m), l.geometry = p, l.perObjectFrustumCulled = e.perObjectFrustumCulled, l.sortObjects = e.sortObjects, l._drawRanges = e.drawRanges, l._reservedRanges = e.reservedRanges, l._visibility = e.visibility, l._active = e.active, l._bounds = e.bounds.map((E) => {
          const S = new kn();
          S.min.fromArray(E.boxMin), S.max.fromArray(E.boxMax);
          const y = new In();
          return y.radius = E.sphereRadius, y.center.fromArray(E.sphereCenter), {
            boxInitialized: E.boxInitialized,
            box: S,
            sphereInitialized: E.sphereInitialized,
            sphere: y
          };
        }), l._maxGeometryCount = e.maxGeometryCount, l._maxVertexCount = e.maxVertexCount, l._maxIndexCount = e.maxIndexCount, l._geometryInitialized = e.geometryInitialized, l._geometryCount = e.geometryCount, l._matricesTexture = f(e.matricesTexture.uuid);
        break;
      case "LOD":
        l = new Mx();
        break;
      case "Line":
        l = new aa(c(e.geometry), h(e.material));
        break;
      case "LineLoop":
        l = new Ax(c(e.geometry), h(e.material));
        break;
      case "LineSegments":
        l = new es(c(e.geometry), h(e.material));
        break;
      case "PointCloud":
      case "Points":
        l = new wx(c(e.geometry), h(e.material));
        break;
      case "Sprite":
        l = new Sx(h(e.material));
        break;
      case "Group":
        l = new fo();
        break;
      case "Bone":
        l = new Mm();
        break;
      default:
        l = new Nt();
    }
    if (l.uuid = e.uuid, e.name !== void 0 && (l.name = e.name), e.matrix !== void 0 ? (l.matrix.fromArray(e.matrix), e.matrixAutoUpdate !== void 0 && (l.matrixAutoUpdate = e.matrixAutoUpdate), l.matrixAutoUpdate && l.matrix.decompose(l.position, l.quaternion, l.scale)) : (e.position !== void 0 && l.position.fromArray(e.position), e.rotation !== void 0 && l.rotation.fromArray(e.rotation), e.quaternion !== void 0 && l.quaternion.fromArray(e.quaternion), e.scale !== void 0 && l.scale.fromArray(e.scale)), e.up !== void 0 && l.up.fromArray(e.up), e.castShadow !== void 0 && (l.castShadow = e.castShadow), e.receiveShadow !== void 0 && (l.receiveShadow = e.receiveShadow), e.shadow && (e.shadow.bias !== void 0 && (l.shadow.bias = e.shadow.bias), e.shadow.normalBias !== void 0 && (l.shadow.normalBias = e.shadow.normalBias), e.shadow.radius !== void 0 && (l.shadow.radius = e.shadow.radius), e.shadow.mapSize !== void 0 && l.shadow.mapSize.fromArray(e.shadow.mapSize), e.shadow.camera !== void 0 && (l.shadow.camera = this.parseObject(e.shadow.camera))), e.visible !== void 0 && (l.visible = e.visible), e.frustumCulled !== void 0 && (l.frustumCulled = e.frustumCulled), e.renderOrder !== void 0 && (l.renderOrder = e.renderOrder), e.userData !== void 0 && (l.userData = e.userData), e.layers !== void 0 && (l.layers.mask = e.layers), e.children !== void 0) {
      const g = e.children;
      for (let v = 0; v < g.length; v++)
        l.add(this.parseObject(g[v], t, n, i, o));
    }
    if (e.animations !== void 0) {
      const g = e.animations;
      for (let v = 0; v < g.length; v++) {
        const x = g[v];
        l.animations.push(o[x]);
      }
    }
    if (e.type === "LOD") {
      e.autoUpdate !== void 0 && (l.autoUpdate = e.autoUpdate);
      const g = e.levels;
      for (let v = 0; v < g.length; v++) {
        const x = g[v], E = l.getObjectByProperty("uuid", x.object);
        E !== void 0 && l.addLevel(E, x.distance, x.hysteresis);
      }
    }
    return l;
  }
  bindSkeletons(e, t) {
    Object.keys(t).length !== 0 && e.traverse(function(n) {
      if (n.isSkinnedMesh === !0 && n.skeleton !== void 0) {
        const i = t[n.skeleton];
        i === void 0 ? console.warn("THREE.ObjectLoader: No skeleton found with UUID:", n.skeleton) : n.bind(i, n.bindMatrix);
      }
    });
  }
}
const FC = {
  UVMapping: nh,
  CubeReflectionMapping: ws,
  CubeRefractionMapping: ia,
  EquirectangularReflectionMapping: El,
  EquirectangularRefractionMapping: bl,
  CubeUVReflectionMapping: Eo
}, __ = {
  RepeatWrapping: Tl,
  ClampToEdgeWrapping: Pn,
  MirroredRepeatWrapping: Al
}, y_ = {
  NearestFilter: on,
  NearestMipmapNearestFilter: Xu,
  NearestMipmapLinearFilter: gl,
  LinearFilter: ln,
  LinearMipmapNearestFilter: em,
  LinearMipmapLinearFilter: sa
};
class VC extends ti {
  constructor(e) {
    super(e), this.isImageBitmapLoader = !0, typeof createImageBitmap > "u" && console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."), typeof fetch > "u" && console.warn("THREE.ImageBitmapLoader: fetch() not supported."), this.options = { premultiplyAlpha: "none" };
  }
  setOptions(e) {
    return this.options = e, this;
  }
  load(e, t, n, i) {
    e === void 0 && (e = ""), this.path !== void 0 && (e = this.path + e), e = this.manager.resolveURL(e);
    const o = this, l = Es.get(e);
    if (l !== void 0) {
      if (o.manager.itemStart(e), l.then) {
        l.then((f) => {
          t && t(f), o.manager.itemEnd(e);
        }).catch((f) => {
          i && i(f);
        });
        return;
      }
      return setTimeout(function() {
        t && t(l), o.manager.itemEnd(e);
      }, 0), l;
    }
    const c = {};
    c.credentials = this.crossOrigin === "anonymous" ? "same-origin" : "include", c.headers = this.requestHeader;
    const h = fetch(e, c).then(function(f) {
      return f.blob();
    }).then(function(f) {
      return createImageBitmap(f, Object.assign(o.options, { colorSpaceConversion: "none" }));
    }).then(function(f) {
      return Es.add(e, f), t && t(f), o.manager.itemEnd(e), f;
    }).catch(function(f) {
      i && i(f), Es.remove(e), o.manager.itemError(e), o.manager.itemEnd(e);
    });
    Es.add(e, h), o.manager.itemStart(e);
  }
}
let Mu;
class Im {
  static getContext() {
    return Mu === void 0 && (Mu = new (window.AudioContext || window.webkitAudioContext)()), Mu;
  }
  static setContext(e) {
    Mu = e;
  }
}
class GC extends ti {
  constructor(e) {
    super(e);
  }
  load(e, t, n, i) {
    const o = this, l = new Rs(this.manager);
    l.setResponseType("arraybuffer"), l.setPath(this.path), l.setRequestHeader(this.requestHeader), l.setWithCredentials(this.withCredentials), l.load(e, function(h) {
      try {
        const f = h.slice(0);
        Im.getContext().decodeAudioData(f, function(m) {
          t(m);
        }).catch(c);
      } catch (f) {
        c(f);
      }
    }, n, i);
    function c(h) {
      i ? i(h) : console.error(h), o.manager.itemError(e);
    }
  }
}
const x_ = /* @__PURE__ */ new rt(), S_ = /* @__PURE__ */ new rt(), za = /* @__PURE__ */ new rt();
class WC {
  constructor() {
    this.type = "StereoCamera", this.aspect = 1, this.eyeSep = 0.064, this.cameraL = new cn(), this.cameraL.layers.enable(1), this.cameraL.matrixAutoUpdate = !1, this.cameraR = new cn(), this.cameraR.layers.enable(2), this.cameraR.matrixAutoUpdate = !1, this._cache = {
      focus: null,
      fov: null,
      aspect: null,
      near: null,
      far: null,
      zoom: null,
      eyeSep: null
    };
  }
  update(e) {
    const t = this._cache;
    if (t.focus !== e.focus || t.fov !== e.fov || t.aspect !== e.aspect * this.aspect || t.near !== e.near || t.far !== e.far || t.zoom !== e.zoom || t.eyeSep !== this.eyeSep) {
      t.focus = e.focus, t.fov = e.fov, t.aspect = e.aspect * this.aspect, t.near = e.near, t.far = e.far, t.zoom = e.zoom, t.eyeSep = this.eyeSep, za.copy(e.projectionMatrix);
      const i = t.eyeSep / 2, o = i * t.near / t.focus, l = t.near * Math.tan($a * t.fov * 0.5) / t.zoom;
      let c, h;
      S_.elements[12] = -i, x_.elements[12] = i, c = -l * t.aspect + o, h = l * t.aspect + o, za.elements[0] = 2 * t.near / (h - c), za.elements[8] = (h + c) / (h - c), this.cameraL.projectionMatrix.copy(za), c = -l * t.aspect - o, h = l * t.aspect - o, za.elements[0] = 2 * t.near / (h - c), za.elements[8] = (h + c) / (h - c), this.cameraR.projectionMatrix.copy(za);
    }
    this.cameraL.matrixWorld.copy(e.matrixWorld).multiply(S_), this.cameraR.matrixWorld.copy(e.matrixWorld).multiply(x_);
  }
}
class zm {
  constructor(e = !0) {
    this.autoStart = e, this.startTime = 0, this.oldTime = 0, this.elapsedTime = 0, this.running = !1;
  }
  start() {
    this.startTime = M_(), this.oldTime = this.startTime, this.elapsedTime = 0, this.running = !0;
  }
  stop() {
    this.getElapsedTime(), this.running = !1, this.autoStart = !1;
  }
  getElapsedTime() {
    return this.getDelta(), this.elapsedTime;
  }
  getDelta() {
    let e = 0;
    if (this.autoStart && !this.running)
      return this.start(), 0;
    if (this.running) {
      const t = M_();
      e = (t - this.oldTime) / 1e3, this.oldTime = t, this.elapsedTime += e;
    }
    return e;
  }
}
function M_() {
  return (typeof performance > "u" ? Date : performance).now();
}
const Ba = /* @__PURE__ */ new I(), E_ = /* @__PURE__ */ new On(), XC = /* @__PURE__ */ new I(), Ha = /* @__PURE__ */ new I();
class kC extends Nt {
  constructor() {
    super(), this.type = "AudioListener", this.context = Im.getContext(), this.gain = this.context.createGain(), this.gain.connect(this.context.destination), this.filter = null, this.timeDelta = 0, this._clock = new zm();
  }
  getInput() {
    return this.gain;
  }
  removeFilter() {
    return this.filter !== null && (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination), this.gain.connect(this.context.destination), this.filter = null), this;
  }
  getFilter() {
    return this.filter;
  }
  setFilter(e) {
    return this.filter !== null ? (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination)) : this.gain.disconnect(this.context.destination), this.filter = e, this.gain.connect(this.filter), this.filter.connect(this.context.destination), this;
  }
  getMasterVolume() {
    return this.gain.gain.value;
  }
  setMasterVolume(e) {
    return this.gain.gain.setTargetAtTime(e, this.context.currentTime, 0.01), this;
  }
  updateMatrixWorld(e) {
    super.updateMatrixWorld(e);
    const t = this.context.listener, n = this.up;
    if (this.timeDelta = this._clock.getDelta(), this.matrixWorld.decompose(Ba, E_, XC), Ha.set(0, 0, -1).applyQuaternion(E_), t.positionX) {
      const i = this.context.currentTime + this.timeDelta;
      t.positionX.linearRampToValueAtTime(Ba.x, i), t.positionY.linearRampToValueAtTime(Ba.y, i), t.positionZ.linearRampToValueAtTime(Ba.z, i), t.forwardX.linearRampToValueAtTime(Ha.x, i), t.forwardY.linearRampToValueAtTime(Ha.y, i), t.forwardZ.linearRampToValueAtTime(Ha.z, i), t.upX.linearRampToValueAtTime(n.x, i), t.upY.linearRampToValueAtTime(n.y, i), t.upZ.linearRampToValueAtTime(n.z, i);
    } else
      t.setPosition(Ba.x, Ba.y, Ba.z), t.setOrientation(Ha.x, Ha.y, Ha.z, n.x, n.y, n.z);
  }
}
class cS extends Nt {
  constructor(e) {
    super(), this.type = "Audio", this.listener = e, this.context = e.context, this.gain = this.context.createGain(), this.gain.connect(e.getInput()), this.autoplay = !1, this.buffer = null, this.detune = 0, this.loop = !1, this.loopStart = 0, this.loopEnd = 0, this.offset = 0, this.duration = void 0, this.playbackRate = 1, this.isPlaying = !1, this.hasPlaybackControl = !0, this.source = null, this.sourceType = "empty", this._startedAt = 0, this._progress = 0, this._connected = !1, this.filters = [];
  }
  getOutput() {
    return this.gain;
  }
  setNodeSource(e) {
    return this.hasPlaybackControl = !1, this.sourceType = "audioNode", this.source = e, this.connect(), this;
  }
  setMediaElementSource(e) {
    return this.hasPlaybackControl = !1, this.sourceType = "mediaNode", this.source = this.context.createMediaElementSource(e), this.connect(), this;
  }
  setMediaStreamSource(e) {
    return this.hasPlaybackControl = !1, this.sourceType = "mediaStreamNode", this.source = this.context.createMediaStreamSource(e), this.connect(), this;
  }
  setBuffer(e) {
    return this.buffer = e, this.sourceType = "buffer", this.autoplay && this.play(), this;
  }
  play(e = 0) {
    if (this.isPlaying === !0) {
      console.warn("THREE.Audio: Audio is already playing.");
      return;
    }
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    this._startedAt = this.context.currentTime + e;
    const t = this.context.createBufferSource();
    return t.buffer = this.buffer, t.loop = this.loop, t.loopStart = this.loopStart, t.loopEnd = this.loopEnd, t.onended = this.onEnded.bind(this), t.start(this._startedAt, this._progress + this.offset, this.duration), this.isPlaying = !0, this.source = t, this.setDetune(this.detune), this.setPlaybackRate(this.playbackRate), this.connect();
  }
  pause() {
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    return this.isPlaying === !0 && (this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate, this.loop === !0 && (this._progress = this._progress % (this.duration || this.buffer.duration)), this.source.stop(), this.source.onended = null, this.isPlaying = !1), this;
  }
  stop() {
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    return this._progress = 0, this.source !== null && (this.source.stop(), this.source.onended = null), this.isPlaying = !1, this;
  }
  connect() {
    if (this.filters.length > 0) {
      this.source.connect(this.filters[0]);
      for (let e = 1, t = this.filters.length; e < t; e++)
        this.filters[e - 1].connect(this.filters[e]);
      this.filters[this.filters.length - 1].connect(this.getOutput());
    } else
      this.source.connect(this.getOutput());
    return this._connected = !0, this;
  }
  disconnect() {
    if (this._connected !== !1) {
      if (this.filters.length > 0) {
        this.source.disconnect(this.filters[0]);
        for (let e = 1, t = this.filters.length; e < t; e++)
          this.filters[e - 1].disconnect(this.filters[e]);
        this.filters[this.filters.length - 1].disconnect(this.getOutput());
      } else
        this.source.disconnect(this.getOutput());
      return this._connected = !1, this;
    }
  }
  getFilters() {
    return this.filters;
  }
  setFilters(e) {
    return e || (e = []), this._connected === !0 ? (this.disconnect(), this.filters = e.slice(), this.connect()) : this.filters = e.slice(), this;
  }
  setDetune(e) {
    if (this.detune = e, this.source.detune !== void 0)
      return this.isPlaying === !0 && this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01), this;
  }
  getDetune() {
    return this.detune;
  }
  getFilter() {
    return this.getFilters()[0];
  }
  setFilter(e) {
    return this.setFilters(e ? [e] : []);
  }
  setPlaybackRate(e) {
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    return this.playbackRate = e, this.isPlaying === !0 && this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01), this;
  }
  getPlaybackRate() {
    return this.playbackRate;
  }
  onEnded() {
    this.isPlaying = !1;
  }
  getLoop() {
    return this.hasPlaybackControl === !1 ? (console.warn("THREE.Audio: this Audio has no playback control."), !1) : this.loop;
  }
  setLoop(e) {
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    return this.loop = e, this.isPlaying === !0 && (this.source.loop = this.loop), this;
  }
  setLoopStart(e) {
    return this.loopStart = e, this;
  }
  setLoopEnd(e) {
    return this.loopEnd = e, this;
  }
  getVolume() {
    return this.gain.gain.value;
  }
  setVolume(e) {
    return this.gain.gain.setTargetAtTime(e, this.context.currentTime, 0.01), this;
  }
}
const Fa = /* @__PURE__ */ new I(), b_ = /* @__PURE__ */ new On(), qC = /* @__PURE__ */ new I(), Va = /* @__PURE__ */ new I();
class YC extends cS {
  constructor(e) {
    super(e), this.panner = this.context.createPanner(), this.panner.panningModel = "HRTF", this.panner.connect(this.gain);
  }
  connect() {
    super.connect(), this.panner.connect(this.gain);
  }
  disconnect() {
    super.disconnect(), this.panner.disconnect(this.gain);
  }
  getOutput() {
    return this.panner;
  }
  getRefDistance() {
    return this.panner.refDistance;
  }
  setRefDistance(e) {
    return this.panner.refDistance = e, this;
  }
  getRolloffFactor() {
    return this.panner.rolloffFactor;
  }
  setRolloffFactor(e) {
    return this.panner.rolloffFactor = e, this;
  }
  getDistanceModel() {
    return this.panner.distanceModel;
  }
  setDistanceModel(e) {
    return this.panner.distanceModel = e, this;
  }
  getMaxDistance() {
    return this.panner.maxDistance;
  }
  setMaxDistance(e) {
    return this.panner.maxDistance = e, this;
  }
  setDirectionalCone(e, t, n) {
    return this.panner.coneInnerAngle = e, this.panner.coneOuterAngle = t, this.panner.coneOuterGain = n, this;
  }
  updateMatrixWorld(e) {
    if (super.updateMatrixWorld(e), this.hasPlaybackControl === !0 && this.isPlaying === !1) return;
    this.matrixWorld.decompose(Fa, b_, qC), Va.set(0, 0, 1).applyQuaternion(b_);
    const t = this.panner;
    if (t.positionX) {
      const n = this.context.currentTime + this.listener.timeDelta;
      t.positionX.linearRampToValueAtTime(Fa.x, n), t.positionY.linearRampToValueAtTime(Fa.y, n), t.positionZ.linearRampToValueAtTime(Fa.z, n), t.orientationX.linearRampToValueAtTime(Va.x, n), t.orientationY.linearRampToValueAtTime(Va.y, n), t.orientationZ.linearRampToValueAtTime(Va.z, n);
    } else
      t.setPosition(Fa.x, Fa.y, Fa.z), t.setOrientation(Va.x, Va.y, Va.z);
  }
}
class jC {
  constructor(e, t = 2048) {
    this.analyser = e.context.createAnalyser(), this.analyser.fftSize = t, this.data = new Uint8Array(this.analyser.frequencyBinCount), e.getOutput().connect(this.analyser);
  }
  getFrequencyData() {
    return this.analyser.getByteFrequencyData(this.data), this.data;
  }
  getAverageFrequency() {
    let e = 0;
    const t = this.getFrequencyData();
    for (let n = 0; n < t.length; n++)
      e += t[n];
    return e / t.length;
  }
}
class uS {
  constructor(e, t, n) {
    this.binding = e, this.valueSize = n;
    let i, o, l;
    switch (t) {
      case "quaternion":
        i = this._slerp, o = this._slerpAdditive, l = this._setAdditiveIdentityQuaternion, this.buffer = new Float64Array(n * 6), this._workIndex = 5;
        break;
      case "string":
      case "bool":
        i = this._select, o = this._select, l = this._setAdditiveIdentityOther, this.buffer = new Array(n * 5);
        break;
      default:
        i = this._lerp, o = this._lerpAdditive, l = this._setAdditiveIdentityNumeric, this.buffer = new Float64Array(n * 5);
    }
    this._mixBufferRegion = i, this._mixBufferRegionAdditive = o, this._setIdentity = l, this._origIndex = 3, this._addIndex = 4, this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0, this.useCount = 0, this.referenceCount = 0;
  }
  // accumulate data in the 'incoming' region into 'accu<i>'
  accumulate(e, t) {
    const n = this.buffer, i = this.valueSize, o = e * i + i;
    let l = this.cumulativeWeight;
    if (l === 0) {
      for (let c = 0; c !== i; ++c)
        n[o + c] = n[c];
      l = t;
    } else {
      l += t;
      const c = t / l;
      this._mixBufferRegion(n, o, 0, c, i);
    }
    this.cumulativeWeight = l;
  }
  // accumulate data in the 'incoming' region into 'add'
  accumulateAdditive(e) {
    const t = this.buffer, n = this.valueSize, i = n * this._addIndex;
    this.cumulativeWeightAdditive === 0 && this._setIdentity(), this._mixBufferRegionAdditive(t, i, 0, e, n), this.cumulativeWeightAdditive += e;
  }
  // apply the state of 'accu<i>' to the binding when accus differ
  apply(e) {
    const t = this.valueSize, n = this.buffer, i = e * t + t, o = this.cumulativeWeight, l = this.cumulativeWeightAdditive, c = this.binding;
    if (this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0, o < 1) {
      const h = t * this._origIndex;
      this._mixBufferRegion(
        n,
        i,
        h,
        1 - o,
        t
      );
    }
    l > 0 && this._mixBufferRegionAdditive(n, i, this._addIndex * t, 1, t);
    for (let h = t, f = t + t; h !== f; ++h)
      if (n[h] !== n[h + t]) {
        c.setValue(n, i);
        break;
      }
  }
  // remember the state of the bound property and copy it to both accus
  saveOriginalState() {
    const e = this.binding, t = this.buffer, n = this.valueSize, i = n * this._origIndex;
    e.getValue(t, i);
    for (let o = n, l = i; o !== l; ++o)
      t[o] = t[i + o % n];
    this._setIdentity(), this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0;
  }
  // apply the state previously taken via 'saveOriginalState' to the binding
  restoreOriginalState() {
    const e = this.valueSize * 3;
    this.binding.setValue(this.buffer, e);
  }
  _setAdditiveIdentityNumeric() {
    const e = this._addIndex * this.valueSize, t = e + this.valueSize;
    for (let n = e; n < t; n++)
      this.buffer[n] = 0;
  }
  _setAdditiveIdentityQuaternion() {
    this._setAdditiveIdentityNumeric(), this.buffer[this._addIndex * this.valueSize + 3] = 1;
  }
  _setAdditiveIdentityOther() {
    const e = this._origIndex * this.valueSize, t = this._addIndex * this.valueSize;
    for (let n = 0; n < this.valueSize; n++)
      this.buffer[t + n] = this.buffer[e + n];
  }
  // mix functions
  _select(e, t, n, i, o) {
    if (i >= 0.5)
      for (let l = 0; l !== o; ++l)
        e[t + l] = e[n + l];
  }
  _slerp(e, t, n, i) {
    On.slerpFlat(e, t, e, t, e, n, i);
  }
  _slerpAdditive(e, t, n, i, o) {
    const l = this._workIndex * o;
    On.multiplyQuaternionsFlat(e, l, e, t, e, n), On.slerpFlat(e, t, e, t, e, l, i);
  }
  _lerp(e, t, n, i, o) {
    const l = 1 - i;
    for (let c = 0; c !== o; ++c) {
      const h = t + c;
      e[h] = e[h] * l + e[n + c] * i;
    }
  }
  _lerpAdditive(e, t, n, i, o) {
    for (let l = 0; l !== o; ++l) {
      const c = t + l;
      e[c] = e[c] + e[n + l] * i;
    }
  }
}
const Bm = "\\[\\]\\.:\\/", ZC = new RegExp("[" + Bm + "]", "g"), Hm = "[^" + Bm + "]", KC = "[^" + Bm.replace("\\.", "") + "]", JC = /* @__PURE__ */ /((?:WC+[\/:])*)/.source.replace("WC", Hm), QC = /* @__PURE__ */ /(WCOD+)?/.source.replace("WCOD", KC), $C = /* @__PURE__ */ /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", Hm), e3 = /* @__PURE__ */ /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", Hm), t3 = new RegExp(
  "^" + JC + QC + $C + e3 + "$"
), n3 = ["material", "materials", "bones", "map"];
class i3 {
  constructor(e, t, n) {
    const i = n || Rt.parseTrackName(t);
    this._targetGroup = e, this._bindings = e.subscribe_(t, i);
  }
  getValue(e, t) {
    this.bind();
    const n = this._targetGroup.nCachedObjects_, i = this._bindings[n];
    i !== void 0 && i.getValue(e, t);
  }
  setValue(e, t) {
    const n = this._bindings;
    for (let i = this._targetGroup.nCachedObjects_, o = n.length; i !== o; ++i)
      n[i].setValue(e, t);
  }
  bind() {
    const e = this._bindings;
    for (let t = this._targetGroup.nCachedObjects_, n = e.length; t !== n; ++t)
      e[t].bind();
  }
  unbind() {
    const e = this._bindings;
    for (let t = this._targetGroup.nCachedObjects_, n = e.length; t !== n; ++t)
      e[t].unbind();
  }
}
class Rt {
  constructor(e, t, n) {
    this.path = t, this.parsedPath = n || Rt.parseTrackName(t), this.node = Rt.findNode(e, this.parsedPath.nodeName), this.rootNode = e, this.getValue = this._getValue_unbound, this.setValue = this._setValue_unbound;
  }
  static create(e, t, n) {
    return e && e.isAnimationObjectGroup ? new Rt.Composite(e, t, n) : new Rt(e, t, n);
  }
  /**
   * Replaces spaces with underscores and removes unsupported characters from
   * node names, to ensure compatibility with parseTrackName().
   *
   * @param {string} name Node name to be sanitized.
   * @return {string}
   */
  static sanitizeNodeName(e) {
    return e.replace(/\s/g, "_").replace(ZC, "");
  }
  static parseTrackName(e) {
    const t = t3.exec(e);
    if (t === null)
      throw new Error("PropertyBinding: Cannot parse trackName: " + e);
    const n = {
      // directoryName: matches[ 1 ], // (tschw) currently unused
      nodeName: t[2],
      objectName: t[3],
      objectIndex: t[4],
      propertyName: t[5],
      // required
      propertyIndex: t[6]
    }, i = n.nodeName && n.nodeName.lastIndexOf(".");
    if (i !== void 0 && i !== -1) {
      const o = n.nodeName.substring(i + 1);
      n3.indexOf(o) !== -1 && (n.nodeName = n.nodeName.substring(0, i), n.objectName = o);
    }
    if (n.propertyName === null || n.propertyName.length === 0)
      throw new Error("PropertyBinding: can not parse propertyName from trackName: " + e);
    return n;
  }
  static findNode(e, t) {
    if (t === void 0 || t === "" || t === "." || t === -1 || t === e.name || t === e.uuid)
      return e;
    if (e.skeleton) {
      const n = e.skeleton.getBoneByName(t);
      if (n !== void 0)
        return n;
    }
    if (e.children) {
      const n = function(o) {
        for (let l = 0; l < o.length; l++) {
          const c = o[l];
          if (c.name === t || c.uuid === t)
            return c;
          const h = n(c.children);
          if (h) return h;
        }
        return null;
      }, i = n(e.children);
      if (i)
        return i;
    }
    return null;
  }
  // these are used to "bind" a nonexistent property
  _getValue_unavailable() {
  }
  _setValue_unavailable() {
  }
  // Getters
  _getValue_direct(e, t) {
    e[t] = this.targetObject[this.propertyName];
  }
  _getValue_array(e, t) {
    const n = this.resolvedProperty;
    for (let i = 0, o = n.length; i !== o; ++i)
      e[t++] = n[i];
  }
  _getValue_arrayElement(e, t) {
    e[t] = this.resolvedProperty[this.propertyIndex];
  }
  _getValue_toArray(e, t) {
    this.resolvedProperty.toArray(e, t);
  }
  // Direct
  _setValue_direct(e, t) {
    this.targetObject[this.propertyName] = e[t];
  }
  _setValue_direct_setNeedsUpdate(e, t) {
    this.targetObject[this.propertyName] = e[t], this.targetObject.needsUpdate = !0;
  }
  _setValue_direct_setMatrixWorldNeedsUpdate(e, t) {
    this.targetObject[this.propertyName] = e[t], this.targetObject.matrixWorldNeedsUpdate = !0;
  }
  // EntireArray
  _setValue_array(e, t) {
    const n = this.resolvedProperty;
    for (let i = 0, o = n.length; i !== o; ++i)
      n[i] = e[t++];
  }
  _setValue_array_setNeedsUpdate(e, t) {
    const n = this.resolvedProperty;
    for (let i = 0, o = n.length; i !== o; ++i)
      n[i] = e[t++];
    this.targetObject.needsUpdate = !0;
  }
  _setValue_array_setMatrixWorldNeedsUpdate(e, t) {
    const n = this.resolvedProperty;
    for (let i = 0, o = n.length; i !== o; ++i)
      n[i] = e[t++];
    this.targetObject.matrixWorldNeedsUpdate = !0;
  }
  // ArrayElement
  _setValue_arrayElement(e, t) {
    this.resolvedProperty[this.propertyIndex] = e[t];
  }
  _setValue_arrayElement_setNeedsUpdate(e, t) {
    this.resolvedProperty[this.propertyIndex] = e[t], this.targetObject.needsUpdate = !0;
  }
  _setValue_arrayElement_setMatrixWorldNeedsUpdate(e, t) {
    this.resolvedProperty[this.propertyIndex] = e[t], this.targetObject.matrixWorldNeedsUpdate = !0;
  }
  // HasToFromArray
  _setValue_fromArray(e, t) {
    this.resolvedProperty.fromArray(e, t);
  }
  _setValue_fromArray_setNeedsUpdate(e, t) {
    this.resolvedProperty.fromArray(e, t), this.targetObject.needsUpdate = !0;
  }
  _setValue_fromArray_setMatrixWorldNeedsUpdate(e, t) {
    this.resolvedProperty.fromArray(e, t), this.targetObject.matrixWorldNeedsUpdate = !0;
  }
  _getValue_unbound(e, t) {
    this.bind(), this.getValue(e, t);
  }
  _setValue_unbound(e, t) {
    this.bind(), this.setValue(e, t);
  }
  // create getter / setter pair for a property in the scene graph
  bind() {
    let e = this.node;
    const t = this.parsedPath, n = t.objectName, i = t.propertyName;
    let o = t.propertyIndex;
    if (e || (e = Rt.findNode(this.rootNode, t.nodeName), this.node = e), this.getValue = this._getValue_unavailable, this.setValue = this._setValue_unavailable, !e) {
      console.warn("THREE.PropertyBinding: No target node found for track: " + this.path + ".");
      return;
    }
    if (n) {
      let f = t.objectIndex;
      switch (n) {
        case "materials":
          if (!e.material) {
            console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
            return;
          }
          if (!e.material.materials) {
            console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
            return;
          }
          e = e.material.materials;
          break;
        case "bones":
          if (!e.skeleton) {
            console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
            return;
          }
          e = e.skeleton.bones;
          for (let p = 0; p < e.length; p++)
            if (e[p].name === f) {
              f = p;
              break;
            }
          break;
        case "map":
          if ("map" in e) {
            e = e.map;
            break;
          }
          if (!e.material) {
            console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
            return;
          }
          if (!e.material.map) {
            console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.", this);
            return;
          }
          e = e.material.map;
          break;
        default:
          if (e[n] === void 0) {
            console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
            return;
          }
          e = e[n];
      }
      if (f !== void 0) {
        if (e[f] === void 0) {
          console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, e);
          return;
        }
        e = e[f];
      }
    }
    const l = e[i];
    if (l === void 0) {
      const f = t.nodeName;
      console.error("THREE.PropertyBinding: Trying to update property for track: " + f + "." + i + " but it wasn't found.", e);
      return;
    }
    let c = this.Versioning.None;
    this.targetObject = e, e.needsUpdate !== void 0 ? c = this.Versioning.NeedsUpdate : e.matrixWorldNeedsUpdate !== void 0 && (c = this.Versioning.MatrixWorldNeedsUpdate);
    let h = this.BindingType.Direct;
    if (o !== void 0) {
      if (i === "morphTargetInfluences") {
        if (!e.geometry) {
          console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
          return;
        }
        if (!e.geometry.morphAttributes) {
          console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
          return;
        }
        e.morphTargetDictionary[o] !== void 0 && (o = e.morphTargetDictionary[o]);
      }
      h = this.BindingType.ArrayElement, this.resolvedProperty = l, this.propertyIndex = o;
    } else l.fromArray !== void 0 && l.toArray !== void 0 ? (h = this.BindingType.HasFromToArray, this.resolvedProperty = l) : Array.isArray(l) ? (h = this.BindingType.EntireArray, this.resolvedProperty = l) : this.propertyName = i;
    this.getValue = this.GetterByBindingType[h], this.setValue = this.SetterByBindingTypeAndVersioning[h][c];
  }
  unbind() {
    this.node = null, this.getValue = this._getValue_unbound, this.setValue = this._setValue_unbound;
  }
}
Rt.Composite = i3;
Rt.prototype.BindingType = {
  Direct: 0,
  EntireArray: 1,
  ArrayElement: 2,
  HasFromToArray: 3
};
Rt.prototype.Versioning = {
  None: 0,
  NeedsUpdate: 1,
  MatrixWorldNeedsUpdate: 2
};
Rt.prototype.GetterByBindingType = [
  Rt.prototype._getValue_direct,
  Rt.prototype._getValue_array,
  Rt.prototype._getValue_arrayElement,
  Rt.prototype._getValue_toArray
];
Rt.prototype.SetterByBindingTypeAndVersioning = [
  [
    // Direct
    Rt.prototype._setValue_direct,
    Rt.prototype._setValue_direct_setNeedsUpdate,
    Rt.prototype._setValue_direct_setMatrixWorldNeedsUpdate
  ],
  [
    // EntireArray
    Rt.prototype._setValue_array,
    Rt.prototype._setValue_array_setNeedsUpdate,
    Rt.prototype._setValue_array_setMatrixWorldNeedsUpdate
  ],
  [
    // ArrayElement
    Rt.prototype._setValue_arrayElement,
    Rt.prototype._setValue_arrayElement_setNeedsUpdate,
    Rt.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate
  ],
  [
    // HasToFromArray
    Rt.prototype._setValue_fromArray,
    Rt.prototype._setValue_fromArray_setNeedsUpdate,
    Rt.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate
  ]
];
class s3 {
  constructor() {
    this.isAnimationObjectGroup = !0, this.uuid = mi(), this._objects = Array.prototype.slice.call(arguments), this.nCachedObjects_ = 0;
    const e = {};
    this._indicesByUUID = e;
    for (let n = 0, i = arguments.length; n !== i; ++n)
      e[arguments[n].uuid] = n;
    this._paths = [], this._parsedPaths = [], this._bindings = [], this._bindingsIndicesByPath = {};
    const t = this;
    this.stats = {
      objects: {
        get total() {
          return t._objects.length;
        },
        get inUse() {
          return this.total - t.nCachedObjects_;
        }
      },
      get bindingsPerObject() {
        return t._bindings.length;
      }
    };
  }
  add() {
    const e = this._objects, t = this._indicesByUUID, n = this._paths, i = this._parsedPaths, o = this._bindings, l = o.length;
    let c, h = e.length, f = this.nCachedObjects_;
    for (let p = 0, m = arguments.length; p !== m; ++p) {
      const g = arguments[p], v = g.uuid;
      let x = t[v];
      if (x === void 0) {
        x = h++, t[v] = x, e.push(g);
        for (let E = 0, S = l; E !== S; ++E)
          o[E].push(new Rt(g, n[E], i[E]));
      } else if (x < f) {
        c = e[x];
        const E = --f, S = e[E];
        t[S.uuid] = x, e[x] = S, t[v] = E, e[E] = g;
        for (let y = 0, T = l; y !== T; ++y) {
          const b = o[y], A = b[E];
          let N = b[x];
          b[x] = A, N === void 0 && (N = new Rt(g, n[y], i[y])), b[E] = N;
        }
      } else e[x] !== c && console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.");
    }
    this.nCachedObjects_ = f;
  }
  remove() {
    const e = this._objects, t = this._indicesByUUID, n = this._bindings, i = n.length;
    let o = this.nCachedObjects_;
    for (let l = 0, c = arguments.length; l !== c; ++l) {
      const h = arguments[l], f = h.uuid, p = t[f];
      if (p !== void 0 && p >= o) {
        const m = o++, g = e[m];
        t[g.uuid] = p, e[p] = g, t[f] = m, e[m] = h;
        for (let v = 0, x = i; v !== x; ++v) {
          const E = n[v], S = E[m], y = E[p];
          E[p] = S, E[m] = y;
        }
      }
    }
    this.nCachedObjects_ = o;
  }
  // remove & forget
  uncache() {
    const e = this._objects, t = this._indicesByUUID, n = this._bindings, i = n.length;
    let o = this.nCachedObjects_, l = e.length;
    for (let c = 0, h = arguments.length; c !== h; ++c) {
      const f = arguments[c], p = f.uuid, m = t[p];
      if (m !== void 0)
        if (delete t[p], m < o) {
          const g = --o, v = e[g], x = --l, E = e[x];
          t[v.uuid] = m, e[m] = v, t[E.uuid] = g, e[g] = E, e.pop();
          for (let S = 0, y = i; S !== y; ++S) {
            const T = n[S], b = T[g], A = T[x];
            T[m] = b, T[g] = A, T.pop();
          }
        } else {
          const g = --l, v = e[g];
          g > 0 && (t[v.uuid] = m), e[m] = v, e.pop();
          for (let x = 0, E = i; x !== E; ++x) {
            const S = n[x];
            S[m] = S[g], S.pop();
          }
        }
    }
    this.nCachedObjects_ = o;
  }
  // Internal interface used by befriended PropertyBinding.Composite:
  subscribe_(e, t) {
    const n = this._bindingsIndicesByPath;
    let i = n[e];
    const o = this._bindings;
    if (i !== void 0) return o[i];
    const l = this._paths, c = this._parsedPaths, h = this._objects, f = h.length, p = this.nCachedObjects_, m = new Array(f);
    i = o.length, n[e] = i, l.push(e), c.push(t), o.push(m);
    for (let g = p, v = h.length; g !== v; ++g) {
      const x = h[g];
      m[g] = new Rt(x, e, t);
    }
    return m;
  }
  unsubscribe_(e) {
    const t = this._bindingsIndicesByPath, n = t[e];
    if (n !== void 0) {
      const i = this._paths, o = this._parsedPaths, l = this._bindings, c = l.length - 1, h = l[c], f = e[c];
      t[f] = n, l[n] = h, l.pop(), o[n] = o[c], o.pop(), i[n] = i[c], i.pop();
    }
  }
}
class hS {
  constructor(e, t, n = null, i = t.blendMode) {
    this._mixer = e, this._clip = t, this._localRoot = n, this.blendMode = i;
    const o = t.tracks, l = o.length, c = new Array(l), h = {
      endingStart: Ya,
      endingEnd: Ya
    };
    for (let f = 0; f !== l; ++f) {
      const p = o[f].createInterpolant(null);
      c[f] = p, p.settings = h;
    }
    this._interpolantSettings = h, this._interpolants = c, this._propertyBindings = new Array(l), this._cacheIndex = null, this._byClipCacheIndex = null, this._timeScaleInterpolant = null, this._weightInterpolant = null, this.loop = ky, this._loopCount = -1, this._startTime = null, this.time = 0, this.timeScale = 1, this._effectiveTimeScale = 1, this.weight = 1, this._effectiveWeight = 1, this.repetitions = 1 / 0, this.paused = !1, this.enabled = !0, this.clampWhenFinished = !1, this.zeroSlopeAtStart = !0, this.zeroSlopeAtEnd = !0;
  }
  // State & Scheduling
  play() {
    return this._mixer._activateAction(this), this;
  }
  stop() {
    return this._mixer._deactivateAction(this), this.reset();
  }
  reset() {
    return this.paused = !1, this.enabled = !0, this.time = 0, this._loopCount = -1, this._startTime = null, this.stopFading().stopWarping();
  }
  isRunning() {
    return this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);
  }
  // return true when play has been called
  isScheduled() {
    return this._mixer._isActiveAction(this);
  }
  startAt(e) {
    return this._startTime = e, this;
  }
  setLoop(e, t) {
    return this.loop = e, this.repetitions = t, this;
  }
  // Weight
  // set the weight stopping any scheduled fading
  // although .enabled = false yields an effective weight of zero, this
  // method does *not* change .enabled, because it would be confusing
  setEffectiveWeight(e) {
    return this.weight = e, this._effectiveWeight = this.enabled ? e : 0, this.stopFading();
  }
  // return the weight considering fading and .enabled
  getEffectiveWeight() {
    return this._effectiveWeight;
  }
  fadeIn(e) {
    return this._scheduleFading(e, 0, 1);
  }
  fadeOut(e) {
    return this._scheduleFading(e, 1, 0);
  }
  crossFadeFrom(e, t, n) {
    if (e.fadeOut(t), this.fadeIn(t), n) {
      const i = this._clip.duration, o = e._clip.duration, l = o / i, c = i / o;
      e.warp(1, l, t), this.warp(c, 1, t);
    }
    return this;
  }
  crossFadeTo(e, t, n) {
    return e.crossFadeFrom(this, t, n);
  }
  stopFading() {
    const e = this._weightInterpolant;
    return e !== null && (this._weightInterpolant = null, this._mixer._takeBackControlInterpolant(e)), this;
  }
  // Time Scale Control
  // set the time scale stopping any scheduled warping
  // although .paused = true yields an effective time scale of zero, this
  // method does *not* change .paused, because it would be confusing
  setEffectiveTimeScale(e) {
    return this.timeScale = e, this._effectiveTimeScale = this.paused ? 0 : e, this.stopWarping();
  }
  // return the time scale considering warping and .paused
  getEffectiveTimeScale() {
    return this._effectiveTimeScale;
  }
  setDuration(e) {
    return this.timeScale = this._clip.duration / e, this.stopWarping();
  }
  syncWith(e) {
    return this.time = e.time, this.timeScale = e.timeScale, this.stopWarping();
  }
  halt(e) {
    return this.warp(this._effectiveTimeScale, 0, e);
  }
  warp(e, t, n) {
    const i = this._mixer, o = i.time, l = this.timeScale;
    let c = this._timeScaleInterpolant;
    c === null && (c = i._lendControlInterpolant(), this._timeScaleInterpolant = c);
    const h = c.parameterPositions, f = c.sampleValues;
    return h[0] = o, h[1] = o + n, f[0] = e / l, f[1] = t / l, this;
  }
  stopWarping() {
    const e = this._timeScaleInterpolant;
    return e !== null && (this._timeScaleInterpolant = null, this._mixer._takeBackControlInterpolant(e)), this;
  }
  // Object Accessors
  getMixer() {
    return this._mixer;
  }
  getClip() {
    return this._clip;
  }
  getRoot() {
    return this._localRoot || this._mixer._root;
  }
  // Interna
  _update(e, t, n, i) {
    if (!this.enabled) {
      this._updateWeight(e);
      return;
    }
    const o = this._startTime;
    if (o !== null) {
      const h = (e - o) * n;
      h < 0 || n === 0 ? t = 0 : (this._startTime = null, t = n * h);
    }
    t *= this._updateTimeScale(e);
    const l = this._updateTime(t), c = this._updateWeight(e);
    if (c > 0) {
      const h = this._interpolants, f = this._propertyBindings;
      switch (this.blendMode) {
        case lm:
          for (let p = 0, m = h.length; p !== m; ++p)
            h[p].evaluate(l), f[p].accumulateAdditive(c);
          break;
        case sh:
        default:
          for (let p = 0, m = h.length; p !== m; ++p)
            h[p].evaluate(l), f[p].accumulate(i, c);
      }
    }
  }
  _updateWeight(e) {
    let t = 0;
    if (this.enabled) {
      t = this.weight;
      const n = this._weightInterpolant;
      if (n !== null) {
        const i = n.evaluate(e)[0];
        t *= i, e > n.parameterPositions[1] && (this.stopFading(), i === 0 && (this.enabled = !1));
      }
    }
    return this._effectiveWeight = t, t;
  }
  _updateTimeScale(e) {
    let t = 0;
    if (!this.paused) {
      t = this.timeScale;
      const n = this._timeScaleInterpolant;
      if (n !== null) {
        const i = n.evaluate(e)[0];
        t *= i, e > n.parameterPositions[1] && (this.stopWarping(), t === 0 ? this.paused = !0 : this.timeScale = t);
      }
    }
    return this._effectiveTimeScale = t, t;
  }
  _updateTime(e) {
    const t = this._clip.duration, n = this.loop;
    let i = this.time + e, o = this._loopCount;
    const l = n === qy;
    if (e === 0)
      return o === -1 ? i : l && (o & 1) === 1 ? t - i : i;
    if (n === Xy) {
      o === -1 && (this._loopCount = 0, this._setEndings(!0, !0, !1));
      e: {
        if (i >= t)
          i = t;
        else if (i < 0)
          i = 0;
        else {
          this.time = i;
          break e;
        }
        this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, this.time = i, this._mixer.dispatchEvent({
          type: "finished",
          action: this,
          direction: e < 0 ? -1 : 1
        });
      }
    } else {
      if (o === -1 && (e >= 0 ? (o = 0, this._setEndings(!0, this.repetitions === 0, l)) : this._setEndings(this.repetitions === 0, !0, l)), i >= t || i < 0) {
        const c = Math.floor(i / t);
        i -= t * c, o += Math.abs(c);
        const h = this.repetitions - o;
        if (h <= 0)
          this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, i = e > 0 ? t : 0, this.time = i, this._mixer.dispatchEvent({
            type: "finished",
            action: this,
            direction: e > 0 ? 1 : -1
          });
        else {
          if (h === 1) {
            const f = e < 0;
            this._setEndings(f, !f, l);
          } else
            this._setEndings(!1, !1, l);
          this._loopCount = o, this.time = i, this._mixer.dispatchEvent({
            type: "loop",
            action: this,
            loopDelta: c
          });
        }
      } else
        this.time = i;
      if (l && (o & 1) === 1)
        return t - i;
    }
    return i;
  }
  _setEndings(e, t, n) {
    const i = this._interpolantSettings;
    n ? (i.endingStart = ja, i.endingEnd = ja) : (e ? i.endingStart = this.zeroSlopeAtStart ? ja : Ya : i.endingStart = Cl, t ? i.endingEnd = this.zeroSlopeAtEnd ? ja : Ya : i.endingEnd = Cl);
  }
  _scheduleFading(e, t, n) {
    const i = this._mixer, o = i.time;
    let l = this._weightInterpolant;
    l === null && (l = i._lendControlInterpolant(), this._weightInterpolant = l);
    const c = l.parameterPositions, h = l.sampleValues;
    return c[0] = o, h[0] = t, c[1] = o + e, h[1] = n, this;
  }
}
const a3 = new Float32Array(1);
class r3 extends Cs {
  constructor(e) {
    super(), this._root = e, this._initMemoryManager(), this._accuIndex = 0, this.time = 0, this.timeScale = 1;
  }
  _bindAction(e, t) {
    const n = e._localRoot || this._root, i = e._clip.tracks, o = i.length, l = e._propertyBindings, c = e._interpolants, h = n.uuid, f = this._bindingsByRootAndName;
    let p = f[h];
    p === void 0 && (p = {}, f[h] = p);
    for (let m = 0; m !== o; ++m) {
      const g = i[m], v = g.name;
      let x = p[v];
      if (x !== void 0)
        ++x.referenceCount, l[m] = x;
      else {
        if (x = l[m], x !== void 0) {
          x._cacheIndex === null && (++x.referenceCount, this._addInactiveBinding(x, h, v));
          continue;
        }
        const E = t && t._propertyBindings[m].binding.parsedPath;
        x = new uS(
          Rt.create(n, v, E),
          g.ValueTypeName,
          g.getValueSize()
        ), ++x.referenceCount, this._addInactiveBinding(x, h, v), l[m] = x;
      }
      c[m].resultBuffer = x.buffer;
    }
  }
  _activateAction(e) {
    if (!this._isActiveAction(e)) {
      if (e._cacheIndex === null) {
        const n = (e._localRoot || this._root).uuid, i = e._clip.uuid, o = this._actionsByClip[i];
        this._bindAction(
          e,
          o && o.knownActions[0]
        ), this._addInactiveAction(e, i, n);
      }
      const t = e._propertyBindings;
      for (let n = 0, i = t.length; n !== i; ++n) {
        const o = t[n];
        o.useCount++ === 0 && (this._lendBinding(o), o.saveOriginalState());
      }
      this._lendAction(e);
    }
  }
  _deactivateAction(e) {
    if (this._isActiveAction(e)) {
      const t = e._propertyBindings;
      for (let n = 0, i = t.length; n !== i; ++n) {
        const o = t[n];
        --o.useCount === 0 && (o.restoreOriginalState(), this._takeBackBinding(o));
      }
      this._takeBackAction(e);
    }
  }
  // Memory manager
  _initMemoryManager() {
    this._actions = [], this._nActiveActions = 0, this._actionsByClip = {}, this._bindings = [], this._nActiveBindings = 0, this._bindingsByRootAndName = {}, this._controlInterpolants = [], this._nActiveControlInterpolants = 0;
    const e = this;
    this.stats = {
      actions: {
        get total() {
          return e._actions.length;
        },
        get inUse() {
          return e._nActiveActions;
        }
      },
      bindings: {
        get total() {
          return e._bindings.length;
        },
        get inUse() {
          return e._nActiveBindings;
        }
      },
      controlInterpolants: {
        get total() {
          return e._controlInterpolants.length;
        },
        get inUse() {
          return e._nActiveControlInterpolants;
        }
      }
    };
  }
  // Memory management for AnimationAction objects
  _isActiveAction(e) {
    const t = e._cacheIndex;
    return t !== null && t < this._nActiveActions;
  }
  _addInactiveAction(e, t, n) {
    const i = this._actions, o = this._actionsByClip;
    let l = o[t];
    if (l === void 0)
      l = {
        knownActions: [e],
        actionByRoot: {}
      }, e._byClipCacheIndex = 0, o[t] = l;
    else {
      const c = l.knownActions;
      e._byClipCacheIndex = c.length, c.push(e);
    }
    e._cacheIndex = i.length, i.push(e), l.actionByRoot[n] = e;
  }
  _removeInactiveAction(e) {
    const t = this._actions, n = t[t.length - 1], i = e._cacheIndex;
    n._cacheIndex = i, t[i] = n, t.pop(), e._cacheIndex = null;
    const o = e._clip.uuid, l = this._actionsByClip, c = l[o], h = c.knownActions, f = h[h.length - 1], p = e._byClipCacheIndex;
    f._byClipCacheIndex = p, h[p] = f, h.pop(), e._byClipCacheIndex = null;
    const m = c.actionByRoot, g = (e._localRoot || this._root).uuid;
    delete m[g], h.length === 0 && delete l[o], this._removeInactiveBindingsForAction(e);
  }
  _removeInactiveBindingsForAction(e) {
    const t = e._propertyBindings;
    for (let n = 0, i = t.length; n !== i; ++n) {
      const o = t[n];
      --o.referenceCount === 0 && this._removeInactiveBinding(o);
    }
  }
  _lendAction(e) {
    const t = this._actions, n = e._cacheIndex, i = this._nActiveActions++, o = t[i];
    e._cacheIndex = i, t[i] = e, o._cacheIndex = n, t[n] = o;
  }
  _takeBackAction(e) {
    const t = this._actions, n = e._cacheIndex, i = --this._nActiveActions, o = t[i];
    e._cacheIndex = i, t[i] = e, o._cacheIndex = n, t[n] = o;
  }
  // Memory management for PropertyMixer objects
  _addInactiveBinding(e, t, n) {
    const i = this._bindingsByRootAndName, o = this._bindings;
    let l = i[t];
    l === void 0 && (l = {}, i[t] = l), l[n] = e, e._cacheIndex = o.length, o.push(e);
  }
  _removeInactiveBinding(e) {
    const t = this._bindings, n = e.binding, i = n.rootNode.uuid, o = n.path, l = this._bindingsByRootAndName, c = l[i], h = t[t.length - 1], f = e._cacheIndex;
    h._cacheIndex = f, t[f] = h, t.pop(), delete c[o], Object.keys(c).length === 0 && delete l[i];
  }
  _lendBinding(e) {
    const t = this._bindings, n = e._cacheIndex, i = this._nActiveBindings++, o = t[i];
    e._cacheIndex = i, t[i] = e, o._cacheIndex = n, t[n] = o;
  }
  _takeBackBinding(e) {
    const t = this._bindings, n = e._cacheIndex, i = --this._nActiveBindings, o = t[i];
    e._cacheIndex = i, t[i] = e, o._cacheIndex = n, t[n] = o;
  }
  // Memory management of Interpolants for weight and time scale
  _lendControlInterpolant() {
    const e = this._controlInterpolants, t = this._nActiveControlInterpolants++;
    let n = e[t];
    return n === void 0 && (n = new Nm(
      new Float32Array(2),
      new Float32Array(2),
      1,
      a3
    ), n.__cacheIndex = t, e[t] = n), n;
  }
  _takeBackControlInterpolant(e) {
    const t = this._controlInterpolants, n = e.__cacheIndex, i = --this._nActiveControlInterpolants, o = t[i];
    e.__cacheIndex = i, t[i] = e, o.__cacheIndex = n, t[n] = o;
  }
  // return an action for a clip optionally using a custom root target
  // object (this method allocates a lot of dynamic memory in case a
  // previously unknown clip/root combination is specified)
  clipAction(e, t, n) {
    const i = t || this._root, o = i.uuid;
    let l = typeof e == "string" ? Vl.findByName(i, e) : e;
    const c = l !== null ? l.uuid : e, h = this._actionsByClip[c];
    let f = null;
    if (n === void 0 && (l !== null ? n = l.blendMode : n = sh), h !== void 0) {
      const m = h.actionByRoot[o];
      if (m !== void 0 && m.blendMode === n)
        return m;
      f = h.knownActions[0], l === null && (l = f._clip);
    }
    if (l === null) return null;
    const p = new hS(this, l, t, n);
    return this._bindAction(p, f), this._addInactiveAction(p, c, o), p;
  }
  // get an existing action
  existingAction(e, t) {
    const n = t || this._root, i = n.uuid, o = typeof e == "string" ? Vl.findByName(n, e) : e, l = o ? o.uuid : e, c = this._actionsByClip[l];
    return c !== void 0 && c.actionByRoot[i] || null;
  }
  // deactivates all previously scheduled actions
  stopAllAction() {
    const e = this._actions, t = this._nActiveActions;
    for (let n = t - 1; n >= 0; --n)
      e[n].stop();
    return this;
  }
  // advance the time and update apply the animation
  update(e) {
    e *= this.timeScale;
    const t = this._actions, n = this._nActiveActions, i = this.time += e, o = Math.sign(e), l = this._accuIndex ^= 1;
    for (let f = 0; f !== n; ++f)
      t[f]._update(i, e, o, l);
    const c = this._bindings, h = this._nActiveBindings;
    for (let f = 0; f !== h; ++f)
      c[f].apply(l);
    return this;
  }
  // Allows you to seek to a specific time in an animation.
  setTime(e) {
    this.time = 0;
    for (let t = 0; t < this._actions.length; t++)
      this._actions[t].time = 0;
    return this.update(e);
  }
  // return this mixer's root target object
  getRoot() {
    return this._root;
  }
  // free all resources specific to a particular clip
  uncacheClip(e) {
    const t = this._actions, n = e.uuid, i = this._actionsByClip, o = i[n];
    if (o !== void 0) {
      const l = o.knownActions;
      for (let c = 0, h = l.length; c !== h; ++c) {
        const f = l[c];
        this._deactivateAction(f);
        const p = f._cacheIndex, m = t[t.length - 1];
        f._cacheIndex = null, f._byClipCacheIndex = null, m._cacheIndex = p, t[p] = m, t.pop(), this._removeInactiveBindingsForAction(f);
      }
      delete i[n];
    }
  }
  // free all resources specific to a particular root target object
  uncacheRoot(e) {
    const t = e.uuid, n = this._actionsByClip;
    for (const l in n) {
      const c = n[l].actionByRoot, h = c[t];
      h !== void 0 && (this._deactivateAction(h), this._removeInactiveAction(h));
    }
    const i = this._bindingsByRootAndName, o = i[t];
    if (o !== void 0)
      for (const l in o) {
        const c = o[l];
        c.restoreOriginalState(), this._removeInactiveBinding(c);
      }
  }
  // remove a targeted clip from the cache
  uncacheAction(e, t) {
    const n = this.existingAction(e, t);
    n !== null && (this._deactivateAction(n), this._removeInactiveAction(n));
  }
}
class Fm {
  constructor(e) {
    this.value = e;
  }
  clone() {
    return new Fm(this.value.clone === void 0 ? this.value : this.value.clone());
  }
}
let o3 = 0;
class l3 extends Cs {
  constructor() {
    super(), this.isUniformsGroup = !0, Object.defineProperty(this, "id", { value: o3++ }), this.name = "", this.usage = Dl, this.uniforms = [];
  }
  add(e) {
    return this.uniforms.push(e), this;
  }
  remove(e) {
    const t = this.uniforms.indexOf(e);
    return t !== -1 && this.uniforms.splice(t, 1), this;
  }
  setName(e) {
    return this.name = e, this;
  }
  setUsage(e) {
    return this.usage = e, this;
  }
  dispose() {
    return this.dispatchEvent({ type: "dispose" }), this;
  }
  copy(e) {
    this.name = e.name, this.usage = e.usage;
    const t = e.uniforms;
    this.uniforms.length = 0;
    for (let n = 0, i = t.length; n < i; n++) {
      const o = Array.isArray(t[n]) ? t[n] : [t[n]];
      for (let l = 0; l < o.length; l++)
        this.uniforms.push(o[l].clone());
    }
    return this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
class c3 extends fh {
  constructor(e, t, n = 1) {
    super(e, t), this.isInstancedInterleavedBuffer = !0, this.meshPerAttribute = n;
  }
  copy(e) {
    return super.copy(e), this.meshPerAttribute = e.meshPerAttribute, this;
  }
  clone(e) {
    const t = super.clone(e);
    return t.meshPerAttribute = this.meshPerAttribute, t;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.isInstancedInterleavedBuffer = !0, t.meshPerAttribute = this.meshPerAttribute, t;
  }
}
class u3 {
  constructor(e, t, n, i, o) {
    this.isGLBufferAttribute = !0, this.name = "", this.buffer = e, this.type = t, this.itemSize = n, this.elementSize = i, this.count = o, this.version = 0;
  }
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
  setBuffer(e) {
    return this.buffer = e, this;
  }
  setType(e, t) {
    return this.type = e, this.elementSize = t, this;
  }
  setItemSize(e) {
    return this.itemSize = e, this;
  }
  setCount(e) {
    return this.count = e, this;
  }
}
class fS {
  constructor(e, t, n = 0, i = 1 / 0) {
    this.ray = new rr(e, t), this.near = n, this.far = i, this.camera = null, this.layers = new yo(), this.params = {
      Mesh: {},
      Line: { threshold: 1 },
      LOD: {},
      Points: { threshold: 1 },
      Sprite: {}
    };
  }
  set(e, t) {
    this.ray.set(e, t);
  }
  setFromCamera(e, t) {
    t.isPerspectiveCamera ? (this.ray.origin.setFromMatrixPosition(t.matrixWorld), this.ray.direction.set(e.x, e.y, 0.5).unproject(t).sub(this.ray.origin).normalize(), this.camera = t) : t.isOrthographicCamera ? (this.ray.origin.set(e.x, e.y, (t.near + t.far) / (t.near - t.far)).unproject(t), this.ray.direction.set(0, 0, -1).transformDirection(t.matrixWorld), this.camera = t) : console.error("THREE.Raycaster: Unsupported camera type: " + t.type);
  }
  intersectObject(e, t = !0, n = []) {
    return Wp(e, this, n, t), n.sort(T_), n;
  }
  intersectObjects(e, t = !0, n = []) {
    for (let i = 0, o = e.length; i < o; i++)
      Wp(e[i], this, n, t);
    return n.sort(T_), n;
  }
}
function T_(a, e) {
  return a.distance - e.distance;
}
function Wp(a, e, t, n) {
  if (a.layers.test(e.layers) && a.raycast(e, t), n === !0) {
    const i = a.children;
    for (let o = 0, l = i.length; o < l; o++)
      Wp(i[o], e, t, !0);
  }
}
class Xp {
  constructor(e = 1, t = 0, n = 0) {
    return this.radius = e, this.phi = t, this.theta = n, this;
  }
  set(e, t, n) {
    return this.radius = e, this.phi = t, this.theta = n, this;
  }
  copy(e) {
    return this.radius = e.radius, this.phi = e.phi, this.theta = e.theta, this;
  }
  // restrict phi to be between EPS and PI-EPS
  makeSafe() {
    return this.phi = Math.max(1e-6, Math.min(Math.PI - 1e-6, this.phi)), this;
  }
  setFromVector3(e) {
    return this.setFromCartesianCoords(e.x, e.y, e.z);
  }
  setFromCartesianCoords(e, t, n) {
    return this.radius = Math.sqrt(e * e + t * t + n * n), this.radius === 0 ? (this.theta = 0, this.phi = 0) : (this.theta = Math.atan2(e, n), this.phi = Math.acos(sn(t / this.radius, -1, 1))), this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
class h3 {
  constructor(e = 1, t = 0, n = 0) {
    return this.radius = e, this.theta = t, this.y = n, this;
  }
  set(e, t, n) {
    return this.radius = e, this.theta = t, this.y = n, this;
  }
  copy(e) {
    return this.radius = e.radius, this.theta = e.theta, this.y = e.y, this;
  }
  setFromVector3(e) {
    return this.setFromCartesianCoords(e.x, e.y, e.z);
  }
  setFromCartesianCoords(e, t, n) {
    return this.radius = Math.sqrt(e * e + n * n), this.theta = Math.atan2(e, n), this.y = t, this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
const A_ = /* @__PURE__ */ new de();
class f3 {
  constructor(e = new de(1 / 0, 1 / 0), t = new de(-1 / 0, -1 / 0)) {
    this.isBox2 = !0, this.min = e, this.max = t;
  }
  set(e, t) {
    return this.min.copy(e), this.max.copy(t), this;
  }
  setFromPoints(e) {
    this.makeEmpty();
    for (let t = 0, n = e.length; t < n; t++)
      this.expandByPoint(e[t]);
    return this;
  }
  setFromCenterAndSize(e, t) {
    const n = A_.copy(t).multiplyScalar(0.5);
    return this.min.copy(e).sub(n), this.max.copy(e).add(n), this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    return this.min.copy(e.min), this.max.copy(e.max), this;
  }
  makeEmpty() {
    return this.min.x = this.min.y = 1 / 0, this.max.x = this.max.y = -1 / 0, this;
  }
  isEmpty() {
    return this.max.x < this.min.x || this.max.y < this.min.y;
  }
  getCenter(e) {
    return this.isEmpty() ? e.set(0, 0) : e.addVectors(this.min, this.max).multiplyScalar(0.5);
  }
  getSize(e) {
    return this.isEmpty() ? e.set(0, 0) : e.subVectors(this.max, this.min);
  }
  expandByPoint(e) {
    return this.min.min(e), this.max.max(e), this;
  }
  expandByVector(e) {
    return this.min.sub(e), this.max.add(e), this;
  }
  expandByScalar(e) {
    return this.min.addScalar(-e), this.max.addScalar(e), this;
  }
  containsPoint(e) {
    return !(e.x < this.min.x || e.x > this.max.x || e.y < this.min.y || e.y > this.max.y);
  }
  containsBox(e) {
    return this.min.x <= e.min.x && e.max.x <= this.max.x && this.min.y <= e.min.y && e.max.y <= this.max.y;
  }
  getParameter(e, t) {
    return t.set(
      (e.x - this.min.x) / (this.max.x - this.min.x),
      (e.y - this.min.y) / (this.max.y - this.min.y)
    );
  }
  intersectsBox(e) {
    return !(e.max.x < this.min.x || e.min.x > this.max.x || e.max.y < this.min.y || e.min.y > this.max.y);
  }
  clampPoint(e, t) {
    return t.copy(e).clamp(this.min, this.max);
  }
  distanceToPoint(e) {
    return this.clampPoint(e, A_).distanceTo(e);
  }
  intersect(e) {
    return this.min.max(e.min), this.max.min(e.max), this.isEmpty() && this.makeEmpty(), this;
  }
  union(e) {
    return this.min.min(e.min), this.max.max(e.max), this;
  }
  translate(e) {
    return this.min.add(e), this.max.add(e), this;
  }
  equals(e) {
    return e.min.equals(this.min) && e.max.equals(this.max);
  }
}
const w_ = /* @__PURE__ */ new I(), Eu = /* @__PURE__ */ new I();
class d3 {
  constructor(e = new I(), t = new I()) {
    this.start = e, this.end = t;
  }
  set(e, t) {
    return this.start.copy(e), this.end.copy(t), this;
  }
  copy(e) {
    return this.start.copy(e.start), this.end.copy(e.end), this;
  }
  getCenter(e) {
    return e.addVectors(this.start, this.end).multiplyScalar(0.5);
  }
  delta(e) {
    return e.subVectors(this.end, this.start);
  }
  distanceSq() {
    return this.start.distanceToSquared(this.end);
  }
  distance() {
    return this.start.distanceTo(this.end);
  }
  at(e, t) {
    return this.delta(t).multiplyScalar(e).add(this.start);
  }
  closestPointToPointParameter(e, t) {
    w_.subVectors(e, this.start), Eu.subVectors(this.end, this.start);
    const n = Eu.dot(Eu);
    let o = Eu.dot(w_) / n;
    return t && (o = sn(o, 0, 1)), o;
  }
  closestPointToPoint(e, t, n) {
    const i = this.closestPointToPointParameter(e, t);
    return this.delta(n).multiplyScalar(i).add(this.start);
  }
  applyMatrix4(e) {
    return this.start.applyMatrix4(e), this.end.applyMatrix4(e), this;
  }
  equals(e) {
    return e.start.equals(this.start) && e.end.equals(this.end);
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
const R_ = /* @__PURE__ */ new I();
class p3 extends Nt {
  constructor(e, t) {
    super(), this.light = e, this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.color = t, this.type = "SpotLightHelper";
    const n = new xt(), i = [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1,
      0,
      1,
      0,
      0,
      0,
      -1,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      1,
      0,
      0,
      0,
      0,
      -1,
      1
    ];
    for (let l = 0, c = 1, h = 32; l < h; l++, c++) {
      const f = l / h * Math.PI * 2, p = c / h * Math.PI * 2;
      i.push(
        Math.cos(f),
        Math.sin(f),
        1,
        Math.cos(p),
        Math.sin(p),
        1
      );
    }
    n.setAttribute("position", new Ye(i, 3));
    const o = new qn({ fog: !1, toneMapped: !1 });
    this.cone = new es(n, o), this.add(this.cone), this.update();
  }
  dispose() {
    this.cone.geometry.dispose(), this.cone.material.dispose();
  }
  update() {
    this.light.updateWorldMatrix(!0, !1), this.light.target.updateWorldMatrix(!0, !1);
    const e = this.light.distance ? this.light.distance : 1e3, t = e * Math.tan(this.light.angle);
    this.cone.scale.set(t, t, e), R_.setFromMatrixPosition(this.light.target.matrixWorld), this.cone.lookAt(R_), this.color !== void 0 ? this.cone.material.color.set(this.color) : this.cone.material.color.copy(this.light.color);
  }
}
const Js = /* @__PURE__ */ new I(), bu = /* @__PURE__ */ new rt(), Id = /* @__PURE__ */ new rt();
class m3 extends es {
  constructor(e) {
    const t = dS(e), n = new xt(), i = [], o = [], l = new Fe(0, 0, 1), c = new Fe(0, 1, 0);
    for (let f = 0; f < t.length; f++) {
      const p = t[f];
      p.parent && p.parent.isBone && (i.push(0, 0, 0), i.push(0, 0, 0), o.push(l.r, l.g, l.b), o.push(c.r, c.g, c.b));
    }
    n.setAttribute("position", new Ye(i, 3)), n.setAttribute("color", new Ye(o, 3));
    const h = new qn({ vertexColors: !0, depthTest: !1, depthWrite: !1, toneMapped: !1, transparent: !0 });
    super(n, h), this.isSkeletonHelper = !0, this.type = "SkeletonHelper", this.root = e, this.bones = t, this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1;
  }
  updateMatrixWorld(e) {
    const t = this.bones, n = this.geometry, i = n.getAttribute("position");
    Id.copy(this.root.matrixWorld).invert();
    for (let o = 0, l = 0; o < t.length; o++) {
      const c = t[o];
      c.parent && c.parent.isBone && (bu.multiplyMatrices(Id, c.matrixWorld), Js.setFromMatrixPosition(bu), i.setXYZ(l, Js.x, Js.y, Js.z), bu.multiplyMatrices(Id, c.parent.matrixWorld), Js.setFromMatrixPosition(bu), i.setXYZ(l + 1, Js.x, Js.y, Js.z), l += 2);
    }
    n.getAttribute("position").needsUpdate = !0, super.updateMatrixWorld(e);
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
function dS(a) {
  const e = [];
  a.isBone === !0 && e.push(a);
  for (let t = 0; t < a.children.length; t++)
    e.push.apply(e, dS(a.children[t]));
  return e;
}
class g3 extends pn {
  constructor(e, t, n) {
    const i = new Jl(t, 4, 2), o = new oa({ wireframe: !0, fog: !1, toneMapped: !1 });
    super(i, o), this.light = e, this.color = n, this.type = "PointLightHelper", this.matrix = this.light.matrixWorld, this.matrixAutoUpdate = !1, this.update();
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
  update() {
    this.light.updateWorldMatrix(!0, !1), this.color !== void 0 ? this.material.color.set(this.color) : this.material.color.copy(this.light.color);
  }
}
const v3 = /* @__PURE__ */ new I(), C_ = /* @__PURE__ */ new Fe(), L_ = /* @__PURE__ */ new Fe();
class _3 extends Nt {
  constructor(e, t, n) {
    super(), this.light = e, this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.color = n, this.type = "HemisphereLightHelper";
    const i = new Kl(t);
    i.rotateY(Math.PI * 0.5), this.material = new oa({ wireframe: !0, fog: !1, toneMapped: !1 }), this.color === void 0 && (this.material.vertexColors = !0);
    const o = i.getAttribute("position"), l = new Float32Array(o.count * 3);
    i.setAttribute("color", new zt(l, 3)), this.add(new pn(i, this.material)), this.update();
  }
  dispose() {
    this.children[0].geometry.dispose(), this.children[0].material.dispose();
  }
  update() {
    const e = this.children[0];
    if (this.color !== void 0)
      this.material.color.set(this.color);
    else {
      const t = e.geometry.getAttribute("color");
      C_.copy(this.light.color), L_.copy(this.light.groundColor);
      for (let n = 0, i = t.count; n < i; n++) {
        const o = n < i / 2 ? C_ : L_;
        t.setXYZ(n, o.r, o.g, o.b);
      }
      t.needsUpdate = !0;
    }
    this.light.updateWorldMatrix(!0, !1), e.lookAt(v3.setFromMatrixPosition(this.light.matrixWorld).negate());
  }
}
class y3 extends es {
  constructor(e = 10, t = 10, n = 4473924, i = 8947848) {
    n = new Fe(n), i = new Fe(i);
    const o = t / 2, l = e / t, c = e / 2, h = [], f = [];
    for (let g = 0, v = 0, x = -c; g <= t; g++, x += l) {
      h.push(-c, 0, x, c, 0, x), h.push(x, 0, -c, x, 0, c);
      const E = g === o ? n : i;
      E.toArray(f, v), v += 3, E.toArray(f, v), v += 3, E.toArray(f, v), v += 3, E.toArray(f, v), v += 3;
    }
    const p = new xt();
    p.setAttribute("position", new Ye(h, 3)), p.setAttribute("color", new Ye(f, 3));
    const m = new qn({ vertexColors: !0, toneMapped: !1 });
    super(p, m), this.type = "GridHelper";
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
class x3 extends es {
  constructor(e = 10, t = 16, n = 8, i = 64, o = 4473924, l = 8947848) {
    o = new Fe(o), l = new Fe(l);
    const c = [], h = [];
    if (t > 1)
      for (let m = 0; m < t; m++) {
        const g = m / t * (Math.PI * 2), v = Math.sin(g) * e, x = Math.cos(g) * e;
        c.push(0, 0, 0), c.push(v, 0, x);
        const E = m & 1 ? o : l;
        h.push(E.r, E.g, E.b), h.push(E.r, E.g, E.b);
      }
    for (let m = 0; m < n; m++) {
      const g = m & 1 ? o : l, v = e - e / n * m;
      for (let x = 0; x < i; x++) {
        let E = x / i * (Math.PI * 2), S = Math.sin(E) * v, y = Math.cos(E) * v;
        c.push(S, 0, y), h.push(g.r, g.g, g.b), E = (x + 1) / i * (Math.PI * 2), S = Math.sin(E) * v, y = Math.cos(E) * v, c.push(S, 0, y), h.push(g.r, g.g, g.b);
      }
    }
    const f = new xt();
    f.setAttribute("position", new Ye(c, 3)), f.setAttribute("color", new Ye(h, 3));
    const p = new qn({ vertexColors: !0, toneMapped: !1 });
    super(f, p), this.type = "PolarGridHelper";
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
const U_ = /* @__PURE__ */ new I(), Tu = /* @__PURE__ */ new I(), N_ = /* @__PURE__ */ new I();
class S3 extends Nt {
  constructor(e, t, n) {
    super(), this.light = e, this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.color = n, this.type = "DirectionalLightHelper", t === void 0 && (t = 1);
    let i = new xt();
    i.setAttribute("position", new Ye([
      -t,
      t,
      0,
      t,
      t,
      0,
      t,
      -t,
      0,
      -t,
      -t,
      0,
      -t,
      t,
      0
    ], 3));
    const o = new qn({ fog: !1, toneMapped: !1 });
    this.lightPlane = new aa(i, o), this.add(this.lightPlane), i = new xt(), i.setAttribute("position", new Ye([0, 0, 0, 0, 0, 1], 3)), this.targetLine = new aa(i, o), this.add(this.targetLine), this.update();
  }
  dispose() {
    this.lightPlane.geometry.dispose(), this.lightPlane.material.dispose(), this.targetLine.geometry.dispose(), this.targetLine.material.dispose();
  }
  update() {
    this.light.updateWorldMatrix(!0, !1), this.light.target.updateWorldMatrix(!0, !1), U_.setFromMatrixPosition(this.light.matrixWorld), Tu.setFromMatrixPosition(this.light.target.matrixWorld), N_.subVectors(Tu, U_), this.lightPlane.lookAt(Tu), this.color !== void 0 ? (this.lightPlane.material.color.set(this.color), this.targetLine.material.color.set(this.color)) : (this.lightPlane.material.color.copy(this.light.color), this.targetLine.material.color.copy(this.light.color)), this.targetLine.lookAt(Tu), this.targetLine.scale.z = N_.length();
  }
}
const Au = /* @__PURE__ */ new I(), tn = /* @__PURE__ */ new oh();
class M3 extends es {
  constructor(e) {
    const t = new xt(), n = new qn({ color: 16777215, vertexColors: !0, toneMapped: !1 }), i = [], o = [], l = {};
    c("n1", "n2"), c("n2", "n4"), c("n4", "n3"), c("n3", "n1"), c("f1", "f2"), c("f2", "f4"), c("f4", "f3"), c("f3", "f1"), c("n1", "f1"), c("n2", "f2"), c("n3", "f3"), c("n4", "f4"), c("p", "n1"), c("p", "n2"), c("p", "n3"), c("p", "n4"), c("u1", "u2"), c("u2", "u3"), c("u3", "u1"), c("c", "t"), c("p", "c"), c("cn1", "cn2"), c("cn3", "cn4"), c("cf1", "cf2"), c("cf3", "cf4");
    function c(x, E) {
      h(x), h(E);
    }
    function h(x) {
      i.push(0, 0, 0), o.push(0, 0, 0), l[x] === void 0 && (l[x] = []), l[x].push(i.length / 3 - 1);
    }
    t.setAttribute("position", new Ye(i, 3)), t.setAttribute("color", new Ye(o, 3)), super(t, n), this.type = "CameraHelper", this.camera = e, this.camera.updateProjectionMatrix && this.camera.updateProjectionMatrix(), this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.pointMap = l, this.update();
    const f = new Fe(16755200), p = new Fe(16711680), m = new Fe(43775), g = new Fe(16777215), v = new Fe(3355443);
    this.setColors(f, p, m, g, v);
  }
  setColors(e, t, n, i, o) {
    const c = this.geometry.getAttribute("color");
    c.setXYZ(0, e.r, e.g, e.b), c.setXYZ(1, e.r, e.g, e.b), c.setXYZ(2, e.r, e.g, e.b), c.setXYZ(3, e.r, e.g, e.b), c.setXYZ(4, e.r, e.g, e.b), c.setXYZ(5, e.r, e.g, e.b), c.setXYZ(6, e.r, e.g, e.b), c.setXYZ(7, e.r, e.g, e.b), c.setXYZ(8, e.r, e.g, e.b), c.setXYZ(9, e.r, e.g, e.b), c.setXYZ(10, e.r, e.g, e.b), c.setXYZ(11, e.r, e.g, e.b), c.setXYZ(12, e.r, e.g, e.b), c.setXYZ(13, e.r, e.g, e.b), c.setXYZ(14, e.r, e.g, e.b), c.setXYZ(15, e.r, e.g, e.b), c.setXYZ(16, e.r, e.g, e.b), c.setXYZ(17, e.r, e.g, e.b), c.setXYZ(18, e.r, e.g, e.b), c.setXYZ(19, e.r, e.g, e.b), c.setXYZ(20, e.r, e.g, e.b), c.setXYZ(21, e.r, e.g, e.b), c.setXYZ(22, e.r, e.g, e.b), c.setXYZ(23, e.r, e.g, e.b), c.setXYZ(24, t.r, t.g, t.b), c.setXYZ(25, t.r, t.g, t.b), c.setXYZ(26, t.r, t.g, t.b), c.setXYZ(27, t.r, t.g, t.b), c.setXYZ(28, t.r, t.g, t.b), c.setXYZ(29, t.r, t.g, t.b), c.setXYZ(30, t.r, t.g, t.b), c.setXYZ(31, t.r, t.g, t.b), c.setXYZ(32, n.r, n.g, n.b), c.setXYZ(33, n.r, n.g, n.b), c.setXYZ(34, n.r, n.g, n.b), c.setXYZ(35, n.r, n.g, n.b), c.setXYZ(36, n.r, n.g, n.b), c.setXYZ(37, n.r, n.g, n.b), c.setXYZ(38, i.r, i.g, i.b), c.setXYZ(39, i.r, i.g, i.b), c.setXYZ(40, o.r, o.g, o.b), c.setXYZ(41, o.r, o.g, o.b), c.setXYZ(42, o.r, o.g, o.b), c.setXYZ(43, o.r, o.g, o.b), c.setXYZ(44, o.r, o.g, o.b), c.setXYZ(45, o.r, o.g, o.b), c.setXYZ(46, o.r, o.g, o.b), c.setXYZ(47, o.r, o.g, o.b), c.setXYZ(48, o.r, o.g, o.b), c.setXYZ(49, o.r, o.g, o.b), c.needsUpdate = !0;
  }
  update() {
    const e = this.geometry, t = this.pointMap, n = 1, i = 1;
    tn.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse), rn("c", t, e, tn, 0, 0, -1), rn("t", t, e, tn, 0, 0, 1), rn("n1", t, e, tn, -n, -i, -1), rn("n2", t, e, tn, n, -i, -1), rn("n3", t, e, tn, -n, i, -1), rn("n4", t, e, tn, n, i, -1), rn("f1", t, e, tn, -n, -i, 1), rn("f2", t, e, tn, n, -i, 1), rn("f3", t, e, tn, -n, i, 1), rn("f4", t, e, tn, n, i, 1), rn("u1", t, e, tn, n * 0.7, i * 1.1, -1), rn("u2", t, e, tn, -n * 0.7, i * 1.1, -1), rn("u3", t, e, tn, 0, i * 2, -1), rn("cf1", t, e, tn, -n, 0, 1), rn("cf2", t, e, tn, n, 0, 1), rn("cf3", t, e, tn, 0, -i, 1), rn("cf4", t, e, tn, 0, i, 1), rn("cn1", t, e, tn, -n, 0, -1), rn("cn2", t, e, tn, n, 0, -1), rn("cn3", t, e, tn, 0, -i, -1), rn("cn4", t, e, tn, 0, i, -1), e.getAttribute("position").needsUpdate = !0;
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
function rn(a, e, t, n, i, o, l) {
  Au.set(i, o, l).unproject(n);
  const c = e[a];
  if (c !== void 0) {
    const h = t.getAttribute("position");
    for (let f = 0, p = c.length; f < p; f++)
      h.setXYZ(c[f], Au.x, Au.y, Au.z);
  }
}
const wu = /* @__PURE__ */ new kn();
class E3 extends es {
  constructor(e, t = 16776960) {
    const n = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]), i = new Float32Array(24), o = new xt();
    o.setIndex(new zt(n, 1)), o.setAttribute("position", new zt(i, 3)), super(o, new qn({ color: t, toneMapped: !1 })), this.object = e, this.type = "BoxHelper", this.matrixAutoUpdate = !1, this.update();
  }
  update(e) {
    if (e !== void 0 && console.warn("THREE.BoxHelper: .update() has no longer arguments."), this.object !== void 0 && wu.setFromObject(this.object), wu.isEmpty()) return;
    const t = wu.min, n = wu.max, i = this.geometry.attributes.position, o = i.array;
    o[0] = n.x, o[1] = n.y, o[2] = n.z, o[3] = t.x, o[4] = n.y, o[5] = n.z, o[6] = t.x, o[7] = t.y, o[8] = n.z, o[9] = n.x, o[10] = t.y, o[11] = n.z, o[12] = n.x, o[13] = n.y, o[14] = t.z, o[15] = t.x, o[16] = n.y, o[17] = t.z, o[18] = t.x, o[19] = t.y, o[20] = t.z, o[21] = n.x, o[22] = t.y, o[23] = t.z, i.needsUpdate = !0, this.geometry.computeBoundingSphere();
  }
  setFromObject(e) {
    return this.object = e, this.update(), this;
  }
  copy(e, t) {
    return super.copy(e, t), this.object = e.object, this;
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
class b3 extends es {
  constructor(e, t = 16776960) {
    const n = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]), i = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1], o = new xt();
    o.setIndex(new zt(n, 1)), o.setAttribute("position", new Ye(i, 3)), super(o, new qn({ color: t, toneMapped: !1 })), this.box = e, this.type = "Box3Helper", this.geometry.computeBoundingSphere();
  }
  updateMatrixWorld(e) {
    const t = this.box;
    t.isEmpty() || (t.getCenter(this.position), t.getSize(this.scale), this.scale.multiplyScalar(0.5), super.updateMatrixWorld(e));
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
class T3 extends aa {
  constructor(e, t = 1, n = 16776960) {
    const i = n, o = [1, -1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0, 1, 1, 0], l = new xt();
    l.setAttribute("position", new Ye(o, 3)), l.computeBoundingSphere(), super(l, new qn({ color: i, toneMapped: !1 })), this.type = "PlaneHelper", this.plane = e, this.size = t;
    const c = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0], h = new xt();
    h.setAttribute("position", new Ye(c, 3)), h.computeBoundingSphere(), this.add(new pn(h, new oa({ color: i, opacity: 0.2, transparent: !0, depthWrite: !1, toneMapped: !1 })));
  }
  updateMatrixWorld(e) {
    this.position.set(0, 0, 0), this.scale.set(0.5 * this.size, 0.5 * this.size, 1), this.lookAt(this.plane.normal), this.translateZ(-this.plane.constant), super.updateMatrixWorld(e);
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose(), this.children[0].geometry.dispose(), this.children[0].material.dispose();
  }
}
const D_ = /* @__PURE__ */ new I();
let Ru, zd;
class A3 extends Nt {
  // dir is assumed to be normalized
  constructor(e = new I(0, 0, 1), t = new I(0, 0, 0), n = 1, i = 16776960, o = n * 0.2, l = o * 0.2) {
    super(), this.type = "ArrowHelper", Ru === void 0 && (Ru = new xt(), Ru.setAttribute("position", new Ye([0, 0, 0, 0, 1, 0], 3)), zd = new Ao(0, 0.5, 1, 5, 1), zd.translate(0, -0.5, 0)), this.position.copy(t), this.line = new aa(Ru, new qn({ color: i, toneMapped: !1 })), this.line.matrixAutoUpdate = !1, this.add(this.line), this.cone = new pn(zd, new oa({ color: i, toneMapped: !1 })), this.cone.matrixAutoUpdate = !1, this.add(this.cone), this.setDirection(e), this.setLength(n, o, l);
  }
  setDirection(e) {
    if (e.y > 0.99999)
      this.quaternion.set(0, 0, 0, 1);
    else if (e.y < -0.99999)
      this.quaternion.set(1, 0, 0, 0);
    else {
      D_.set(e.z, 0, -e.x).normalize();
      const t = Math.acos(e.y);
      this.quaternion.setFromAxisAngle(D_, t);
    }
  }
  setLength(e, t = e * 0.2, n = t * 0.2) {
    this.line.scale.set(1, Math.max(1e-4, e - t), 1), this.line.updateMatrix(), this.cone.scale.set(n, t, n), this.cone.position.y = e, this.cone.updateMatrix();
  }
  setColor(e) {
    this.line.material.color.set(e), this.cone.material.color.set(e);
  }
  copy(e) {
    return super.copy(e, !1), this.line.copy(e.line), this.cone.copy(e.cone), this;
  }
  dispose() {
    this.line.geometry.dispose(), this.line.material.dispose(), this.cone.geometry.dispose(), this.cone.material.dispose();
  }
}
class w3 extends es {
  constructor(e = 1) {
    const t = [
      0,
      0,
      0,
      e,
      0,
      0,
      0,
      0,
      0,
      0,
      e,
      0,
      0,
      0,
      0,
      0,
      0,
      e
    ], n = [
      1,
      0,
      0,
      1,
      0.6,
      0,
      0,
      1,
      0,
      0.6,
      1,
      0,
      0,
      0,
      1,
      0,
      0.6,
      1
    ], i = new xt();
    i.setAttribute("position", new Ye(t, 3)), i.setAttribute("color", new Ye(n, 3));
    const o = new qn({ vertexColors: !0, toneMapped: !1 });
    super(i, o), this.type = "AxesHelper";
  }
  setColors(e, t, n) {
    const i = new Fe(), o = this.geometry.attributes.color.array;
    return i.set(e), i.toArray(o, 0), i.toArray(o, 3), i.set(t), i.toArray(o, 6), i.toArray(o, 9), i.set(n), i.toArray(o, 12), i.toArray(o, 15), this.geometry.attributes.color.needsUpdate = !0, this;
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
class R3 {
  constructor() {
    this.type = "ShapePath", this.color = new Fe(), this.subPaths = [], this.currentPath = null;
  }
  moveTo(e, t) {
    return this.currentPath = new Ol(), this.subPaths.push(this.currentPath), this.currentPath.moveTo(e, t), this;
  }
  lineTo(e, t) {
    return this.currentPath.lineTo(e, t), this;
  }
  quadraticCurveTo(e, t, n, i) {
    return this.currentPath.quadraticCurveTo(e, t, n, i), this;
  }
  bezierCurveTo(e, t, n, i, o, l) {
    return this.currentPath.bezierCurveTo(e, t, n, i, o, l), this;
  }
  splineThru(e) {
    return this.currentPath.splineThru(e), this;
  }
  toShapes(e) {
    function t(y) {
      const T = [];
      for (let b = 0, A = y.length; b < A; b++) {
        const N = y[b], R = new tr();
        R.curves = N.curves, T.push(R);
      }
      return T;
    }
    function n(y, T) {
      const b = T.length;
      let A = !1;
      for (let N = b - 1, R = 0; R < b; N = R++) {
        let P = T[N], H = T[R], w = H.x - P.x, C = H.y - P.y;
        if (Math.abs(C) > Number.EPSILON) {
          if (C < 0 && (P = T[R], w = -w, H = T[N], C = -C), y.y < P.y || y.y > H.y) continue;
          if (y.y === P.y) {
            if (y.x === P.x) return !0;
          } else {
            const X = C * (y.x - P.x) - w * (y.y - P.y);
            if (X === 0) return !0;
            if (X < 0) continue;
            A = !A;
          }
        } else {
          if (y.y !== P.y) continue;
          if (H.x <= y.x && y.x <= P.x || P.x <= y.x && y.x <= H.x) return !0;
        }
      }
      return A;
    }
    const i = $i.isClockWise, o = this.subPaths;
    if (o.length === 0) return [];
    let l, c, h;
    const f = [];
    if (o.length === 1)
      return c = o[0], h = new tr(), h.curves = c.curves, f.push(h), f;
    let p = !i(o[0].getPoints());
    p = e ? !p : p;
    const m = [], g = [];
    let v = [], x = 0, E;
    g[x] = void 0, v[x] = [];
    for (let y = 0, T = o.length; y < T; y++)
      c = o[y], E = c.getPoints(), l = i(E), l = e ? !l : l, l ? (!p && g[x] && x++, g[x] = { s: new tr(), p: E }, g[x].s.curves = c.curves, p && x++, v[x] = []) : v[x].push({ h: c, p: E[0] });
    if (!g[0]) return t(o);
    if (g.length > 1) {
      let y = !1, T = 0;
      for (let b = 0, A = g.length; b < A; b++)
        m[b] = [];
      for (let b = 0, A = g.length; b < A; b++) {
        const N = v[b];
        for (let R = 0; R < N.length; R++) {
          const P = N[R];
          let H = !0;
          for (let w = 0; w < g.length; w++)
            n(P.p, g[w].p) && (b !== w && T++, H ? (H = !1, m[w].push(P)) : y = !0);
          H && m[b].push(P);
        }
      }
      T > 0 && y === !1 && (v = m);
    }
    let S;
    for (let y = 0, T = g.length; y < T; y++) {
      h = g[y].s, f.push(h), S = v[y];
      for (let b = 0, A = S.length; b < A; b++)
        h.holes.push(S[b].h);
    }
    return f;
  }
}
typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", { detail: {
  revision: eh
} }));
typeof window < "u" && (window.__THREE__ ? console.warn("WARNING: Multiple instances of Three.js being imported.") : window.__THREE__ = eh);
const C3 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  ACESFilmicToneMapping: $p,
  AddEquation: Qs,
  AddOperation: Ly,
  AdditiveAnimationBlendMode: lm,
  AdditiveBlending: np,
  AgXToneMapping: Py,
  AlphaFormat: By,
  AlwaysCompare: nx,
  AlwaysDepth: Ey,
  AlwaysStencilFunc: Dp,
  AmbientLight: iS,
  AnimationAction: hS,
  AnimationClip: Vl,
  AnimationLoader: UC,
  AnimationMixer: r3,
  AnimationObjectGroup: s3,
  AnimationUtils: wC,
  ArcCurve: Rx,
  ArrayCamera: _x,
  ArrowHelper: A3,
  AttachedBindMode: op,
  Audio: cS,
  AudioAnalyser: jC,
  AudioContext: Im,
  AudioListener: kC,
  AudioLoader: GC,
  AxesHelper: w3,
  BackSide: Xn,
  BasicDepthPacking: Yy,
  BasicShadowMap: ay,
  BatchedMesh: Tx,
  Bone: Mm,
  BooleanKeyframeTrack: lr,
  Box2: f3,
  Box3: kn,
  Box3Helper: b3,
  BoxGeometry: or,
  BoxHelper: E3,
  BufferAttribute: zt,
  BufferGeometry: xt,
  BufferGeometryLoader: lS,
  ByteType: Iy,
  Cache: Es,
  Camera: oh,
  CameraHelper: M3,
  CanvasTexture: JR,
  CapsuleGeometry: gh,
  CatmullRomCurve3: Cx,
  CineonToneMapping: Ny,
  CircleGeometry: vh,
  ClampToEdgeWrapping: Pn,
  Clock: zm,
  Color: Fe,
  ColorKeyframeTrack: Dm,
  ColorManagement: Dt,
  CompressedArrayTexture: ZR,
  CompressedCubeTexture: KR,
  CompressedTexture: ph,
  CompressedTextureLoader: NC,
  ConeGeometry: _h,
  ConstantAlphaFactor: xy,
  ConstantColorFactor: _y,
  CubeCamera: cx,
  CubeReflectionMapping: ws,
  CubeRefractionMapping: ia,
  CubeTexture: Yl,
  CubeTextureLoader: DC,
  CubeUVReflectionMapping: Eo,
  CubicBezierCurve: Tm,
  CubicBezierCurve3: Lx,
  CubicInterpolant: Zx,
  CullFaceBack: tp,
  CullFaceFront: sy,
  CullFaceFrontBack: BE,
  CullFaceNone: iy,
  Curve: Wi,
  CurvePath: Nx,
  CustomBlending: ry,
  CustomToneMapping: Dy,
  CylinderGeometry: Ao,
  Cylindrical: h3,
  Data3DTexture: dm,
  DataArrayTexture: rh,
  DataTexture: er,
  DataTextureLoader: PC,
  DataUtils: jb,
  DecrementStencilOp: KE,
  DecrementWrapStencilOp: QE,
  DefaultLoadingManager: Qx,
  DepthFormat: ta,
  DepthStencilFormat: nr,
  DepthTexture: vm,
  DetachedBindMode: Oy,
  DirectionalLight: nS,
  DirectionalLightHelper: S3,
  DiscreteInterpolant: Kx,
  DisplayP3ColorSpace: ah,
  DodecahedronGeometry: yh,
  DoubleSide: Ai,
  DstAlphaFactor: dy,
  DstColorFactor: my,
  DynamicCopyUsage: db,
  DynamicDrawUsage: ob,
  DynamicReadUsage: ub,
  EdgesGeometry: Dx,
  EllipseCurve: mh,
  EqualCompare: Qy,
  EqualDepth: Ty,
  EqualStencilFunc: nb,
  EquirectangularReflectionMapping: El,
  EquirectangularRefractionMapping: bl,
  Euler: ql,
  EventDispatcher: Cs,
  ExtrudeGeometry: Sh,
  FileLoader: Rs,
  Float16BufferAttribute: e1,
  Float32BufferAttribute: Ye,
  Float64BufferAttribute: t1,
  FloatType: Hi,
  Fog: uh,
  FogExp2: ch,
  FramebufferTexture: jR,
  FrontSide: As,
  Frustum: jl,
  GLBufferAttribute: u3,
  GLSL1: mb,
  GLSL3: Pp,
  GreaterCompare: $y,
  GreaterDepth: wy,
  GreaterEqualCompare: tx,
  GreaterEqualDepth: Ay,
  GreaterEqualStencilFunc: rb,
  GreaterStencilFunc: sb,
  GridHelper: y3,
  Group: fo,
  HalfFloatType: go,
  HemisphereLight: $x,
  HemisphereLightHelper: _3,
  IcosahedronGeometry: Mh,
  ImageBitmapLoader: VC,
  ImageLoader: Gl,
  ImageUtils: fm,
  IncrementStencilOp: ZE,
  IncrementWrapStencilOp: JE,
  InstancedBufferAttribute: So,
  InstancedBufferGeometry: oS,
  InstancedInterleavedBuffer: c3,
  InstancedMesh: bx,
  Int16BufferAttribute: Qb,
  Int32BufferAttribute: $b,
  Int8BufferAttribute: Zb,
  IntType: tm,
  InterleavedBuffer: fh,
  InterleavedBufferAttribute: ir,
  Interpolant: Ql,
  InterpolateDiscrete: wl,
  InterpolateLinear: Rl,
  InterpolateSmooth: Hu,
  InvertStencilOp: $E,
  KeepStencilOp: Xa,
  KeyframeTrack: Xi,
  LOD: Mx,
  LatheGeometry: Zl,
  Layers: yo,
  LessCompare: Jy,
  LessDepth: by,
  LessEqualCompare: um,
  LessEqualDepth: Ml,
  LessEqualStencilFunc: ib,
  LessStencilFunc: tb,
  Light: ca,
  LightProbe: rS,
  Line: aa,
  Line3: d3,
  LineBasicMaterial: qn,
  LineCurve: Am,
  LineCurve3: Ux,
  LineDashedMaterial: qx,
  LineLoop: Ax,
  LineSegments: es,
  LinearDisplayP3ColorSpace: kl,
  LinearEncoding: cm,
  LinearFilter: ln,
  LinearInterpolant: Nm,
  LinearMipMapLinearFilter: WE,
  LinearMipMapNearestFilter: GE,
  LinearMipmapLinearFilter: sa,
  LinearMipmapNearestFilter: em,
  LinearSRGBColorSpace: Vi,
  LinearToneMapping: Qp,
  LinearTransfer: Ll,
  Loader: ti,
  LoaderUtils: Gp,
  LoadingManager: Pm,
  LoopOnce: Xy,
  LoopPingPong: qy,
  LoopRepeat: ky,
  LuminanceAlphaFormat: Fy,
  LuminanceFormat: Hy,
  MOUSE: Ga,
  Material: zn,
  MaterialLoader: Ch,
  MathUtils: Lb,
  Matrix3: yt,
  Matrix4: rt,
  MaxEquation: rp,
  Mesh: pn,
  MeshBasicMaterial: oa,
  MeshDepthMaterial: _m,
  MeshDistanceMaterial: ym,
  MeshLambertMaterial: Xx,
  MeshMatcapMaterial: kx,
  MeshNormalMaterial: Wx,
  MeshPhongMaterial: Vx,
  MeshPhysicalMaterial: Fx,
  MeshStandardMaterial: Lm,
  MeshToonMaterial: Gx,
  MinEquation: ap,
  MirroredRepeatWrapping: Al,
  MixOperation: Cy,
  MultiplyBlending: sp,
  MultiplyOperation: Xl,
  NearestFilter: on,
  NearestMipMapLinearFilter: VE,
  NearestMipMapNearestFilter: FE,
  NearestMipmapLinearFilter: gl,
  NearestMipmapNearestFilter: Xu,
  NeverCompare: Ky,
  NeverDepth: My,
  NeverStencilFunc: eb,
  NoBlending: bs,
  NoColorSpace: pi,
  NoToneMapping: Ji,
  NormalAnimationBlendMode: sh,
  NormalBlending: Qa,
  NotEqualCompare: ex,
  NotEqualDepth: Ry,
  NotEqualStencilFunc: ab,
  NumberKeyframeTrack: Hl,
  Object3D: Nt,
  ObjectLoader: HC,
  ObjectSpaceNormalMap: Zy,
  OctahedronGeometry: Kl,
  OneFactor: uy,
  OneMinusConstantAlphaFactor: Sy,
  OneMinusConstantColorFactor: yy,
  OneMinusDstAlphaFactor: py,
  OneMinusDstColorFactor: gy,
  OneMinusSrcAlphaFactor: Wu,
  OneMinusSrcColorFactor: fy,
  OrthographicCamera: Ts,
  P3Primaries: Nl,
  PCFShadowMap: th,
  PCFSoftShadowMap: ml,
  PMREMGenerator: Ip,
  Path: Ol,
  PerspectiveCamera: cn,
  Plane: xs,
  PlaneGeometry: bo,
  PlaneHelper: T3,
  PointLight: tS,
  PointLightHelper: g3,
  Points: wx,
  PointsMaterial: Em,
  PolarGridHelper: x3,
  PolyhedronGeometry: la,
  PositionalAudio: YC,
  PropertyBinding: Rt,
  PropertyMixer: uS,
  QuadraticBezierCurve: wm,
  QuadraticBezierCurve3: Rm,
  Quaternion: On,
  QuaternionKeyframeTrack: wo,
  QuaternionLinearInterpolant: Jx,
  RED_GREEN_RGTC2_Format: Up,
  RED_RGTC1_Format: Wy,
  REVISION: eh,
  RGBADepthPacking: jy,
  RGBAFormat: Wn,
  RGBAIntegerFormat: rm,
  RGBA_ASTC_10x10_Format: Tp,
  RGBA_ASTC_10x5_Format: Mp,
  RGBA_ASTC_10x6_Format: Ep,
  RGBA_ASTC_10x8_Format: bp,
  RGBA_ASTC_12x10_Format: Ap,
  RGBA_ASTC_12x12_Format: wp,
  RGBA_ASTC_4x4_Format: pp,
  RGBA_ASTC_5x4_Format: mp,
  RGBA_ASTC_5x5_Format: gp,
  RGBA_ASTC_6x5_Format: vp,
  RGBA_ASTC_6x6_Format: _p,
  RGBA_ASTC_8x5_Format: yp,
  RGBA_ASTC_8x6_Format: xp,
  RGBA_ASTC_8x8_Format: Sp,
  RGBA_BPTC_Format: Bu,
  RGBA_ETC2_EAC_Format: dp,
  RGBA_PVRTC_2BPPV1_Format: hp,
  RGBA_PVRTC_4BPPV1_Format: up,
  RGBA_S3TC_DXT1_Format: Ou,
  RGBA_S3TC_DXT3_Format: Iu,
  RGBA_S3TC_DXT5_Format: zu,
  RGB_BPTC_SIGNED_Format: Rp,
  RGB_BPTC_UNSIGNED_Format: Cp,
  RGB_ETC1_Format: om,
  RGB_ETC2_Format: fp,
  RGB_PVRTC_2BPPV1_Format: cp,
  RGB_PVRTC_4BPPV1_Format: lp,
  RGB_S3TC_DXT1_Format: Pu,
  RGFormat: Gy,
  RGIntegerFormat: am,
  RawShaderMaterial: Hx,
  Ray: rr,
  Raycaster: fS,
  Rec709Primaries: Ul,
  RectAreaLight: sS,
  RedFormat: Vy,
  RedIntegerFormat: sm,
  ReinhardToneMapping: Uy,
  RenderTarget: ax,
  RepeatWrapping: Tl,
  ReplaceStencilOp: jE,
  ReverseSubtractEquation: ly,
  RingGeometry: Eh,
  SIGNED_RED_GREEN_RGTC2_Format: Np,
  SIGNED_RED_RGTC1_Format: Lp,
  SRGBColorSpace: nn,
  SRGBTransfer: Wt,
  Scene: hh,
  ShaderChunk: vt,
  ShaderLib: Bi,
  ShaderMaterial: Gi,
  ShadowMaterial: Bx,
  Shape: tr,
  ShapeGeometry: bh,
  ShapePath: R3,
  ShapeUtils: $i,
  ShortType: zy,
  Skeleton: dh,
  SkeletonHelper: m3,
  SkinnedMesh: Ex,
  Source: Za,
  Sphere: In,
  SphereGeometry: Jl,
  Spherical: Xp,
  SphericalHarmonics3: aS,
  SplineCurve: Cm,
  SpotLight: eS,
  SpotLightHelper: p3,
  Sprite: Sx,
  SpriteMaterial: Sm,
  SrcAlphaFactor: Gu,
  SrcAlphaSaturateFactor: vy,
  SrcColorFactor: hy,
  StaticCopyUsage: fb,
  StaticDrawUsage: Dl,
  StaticReadUsage: cb,
  StereoCamera: WC,
  StreamCopyUsage: pb,
  StreamDrawUsage: lb,
  StreamReadUsage: hb,
  StringKeyframeTrack: cr,
  SubtractEquation: oy,
  SubtractiveBlending: ip,
  TOUCH: Wa,
  TangentSpaceNormalMap: ra,
  TetrahedronGeometry: Th,
  Texture: un,
  TextureLoader: OC,
  TorusGeometry: Ah,
  TorusKnotGeometry: wh,
  Triangle: $n,
  TriangleFanDrawMode: qE,
  TriangleStripDrawMode: kE,
  TrianglesDrawMode: XE,
  TubeGeometry: Rh,
  TwoPassDoubleSide: HE,
  UVMapping: nh,
  Uint16BufferAttribute: pm,
  Uint32BufferAttribute: mm,
  Uint8BufferAttribute: Kb,
  Uint8ClampedBufferAttribute: Jb,
  Uniform: Fm,
  UniformsGroup: l3,
  UniformsLib: Re,
  UniformsUtils: lx,
  UnsignedByteType: Qi,
  UnsignedInt248Type: ea,
  UnsignedIntType: Ms,
  UnsignedShort4444Type: nm,
  UnsignedShort5551Type: im,
  UnsignedShortType: ih,
  VSMShadowMap: zi,
  Vector2: de,
  Vector3: I,
  Vector4: It,
  VectorKeyframeTrack: Fl,
  VideoTexture: YR,
  WebGL1Renderer: yx,
  WebGL3DRenderTarget: Ib,
  WebGLArrayRenderTarget: Ob,
  WebGLCoordinateSystem: Fi,
  WebGLCubeRenderTarget: ux,
  WebGLMultipleRenderTargets: zb,
  WebGLRenderTarget: wi,
  WebGLRenderer: xm,
  WebGLUtils: vx,
  WebGPUCoordinateSystem: vo,
  WireframeGeometry: zx,
  WrapAroundEnding: Cl,
  ZeroCurvatureEnding: Ya,
  ZeroFactor: cy,
  ZeroSlopeEnding: ja,
  ZeroStencilOp: YE,
  _SRGBAFormat: ku,
  createCanvasElement: sx,
  sRGBEncoding: na
}, Symbol.toStringTag, { value: "Module" }));
var Bd = { exports: {} }, Hd = {}, Fd = { exports: {} }, Vd = {};
/**
 * @license React
 * use-sync-external-store-shim.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var P_;
function L3() {
  if (P_) return Vd;
  P_ = 1;
  var a = $u;
  function e(m, g) {
    return m === g && (m !== 0 || 1 / m === 1 / g) || m !== m && g !== g;
  }
  var t = typeof Object.is == "function" ? Object.is : e, n = a.useState, i = a.useEffect, o = a.useLayoutEffect, l = a.useDebugValue;
  function c(m, g) {
    var v = g(), x = n({ inst: { value: v, getSnapshot: g } }), E = x[0].inst, S = x[1];
    return o(
      function() {
        E.value = v, E.getSnapshot = g, h(E) && S({ inst: E });
      },
      [m, v, g]
    ), i(
      function() {
        return h(E) && S({ inst: E }), m(function() {
          h(E) && S({ inst: E });
        });
      },
      [m]
    ), l(v), v;
  }
  function h(m) {
    var g = m.getSnapshot;
    m = m.value;
    try {
      var v = g();
      return !t(m, v);
    } catch {
      return !0;
    }
  }
  function f(m, g) {
    return g();
  }
  var p = typeof window > "u" || typeof window.document > "u" || typeof window.document.createElement > "u" ? f : c;
  return Vd.useSyncExternalStore = a.useSyncExternalStore !== void 0 ? a.useSyncExternalStore : p, Vd;
}
var O_;
function U3() {
  return O_ || (O_ = 1, Fd.exports = L3()), Fd.exports;
}
/**
 * @license React
 * use-sync-external-store-shim/with-selector.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var I_;
function N3() {
  if (I_) return Hd;
  I_ = 1;
  var a = $u, e = U3();
  function t(f, p) {
    return f === p && (f !== 0 || 1 / f === 1 / p) || f !== f && p !== p;
  }
  var n = typeof Object.is == "function" ? Object.is : t, i = e.useSyncExternalStore, o = a.useRef, l = a.useEffect, c = a.useMemo, h = a.useDebugValue;
  return Hd.useSyncExternalStoreWithSelector = function(f, p, m, g, v) {
    var x = o(null);
    if (x.current === null) {
      var E = { hasValue: !1, value: null };
      x.current = E;
    } else E = x.current;
    x = c(
      function() {
        function y(R) {
          if (!T) {
            if (T = !0, b = R, R = g(R), v !== void 0 && E.hasValue) {
              var P = E.value;
              if (v(P, R))
                return A = P;
            }
            return A = R;
          }
          if (P = A, n(b, R)) return P;
          var H = g(R);
          return v !== void 0 && v(P, H) ? (b = R, P) : (b = R, A = H);
        }
        var T = !1, b, A, N = m === void 0 ? null : m;
        return [
          function() {
            return y(p());
          },
          N === null ? void 0 : function() {
            return y(N());
          }
        ];
      },
      [p, m, g, v]
    );
    var S = i(f, x[0], x[1]);
    return l(
      function() {
        E.hasValue = !0, E.value = S;
      },
      [S]
    ), h(S), S;
  }, Hd;
}
var z_;
function D3() {
  return z_ || (z_ = 1, Bd.exports = N3()), Bd.exports;
}
var P3 = D3();
const O3 = /* @__PURE__ */ ny(P3), B_ = (a) => {
  let e;
  const t = /* @__PURE__ */ new Set(), n = (f, p) => {
    const m = typeof f == "function" ? f(e) : f;
    if (!Object.is(m, e)) {
      const g = e;
      e = p ?? (typeof m != "object" || m === null) ? m : Object.assign({}, e, m), t.forEach((v) => v(e, g));
    }
  }, i = () => e, c = { setState: n, getState: i, getInitialState: () => h, subscribe: (f) => (t.add(f), () => t.delete(f)) }, h = e = a(n, i, c);
  return c;
}, I3 = (a) => a ? B_(a) : B_, { useSyncExternalStoreWithSelector: z3 } = O3, B3 = (a) => a;
function H3(a, e = B3, t) {
  const n = z3(
    a.subscribe,
    a.getState,
    a.getInitialState,
    e,
    t
  );
  return $u.useDebugValue(n), n;
}
const H_ = (a, e) => {
  const t = I3(a), n = (i, o = e) => H3(t, i, o);
  return Object.assign(n, t), n;
}, F3 = (a, e) => a ? H_(a, e) : H_;
var Gd = { exports: {} }, Wd = { exports: {} }, Xd = { exports: {} }, kd = {};
/**
 * @license React
 * scheduler.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var F_;
function V3() {
  return F_ || (F_ = 1, function(a) {
    function e(W, Q) {
      var Z = W.length;
      W.push(Q);
      e: for (; 0 < Z; ) {
        var K = Z - 1 >>> 1, le = W[K];
        if (0 < i(le, Q))
          W[K] = Q, W[Z] = le, Z = K;
        else break e;
      }
    }
    function t(W) {
      return W.length === 0 ? null : W[0];
    }
    function n(W) {
      if (W.length === 0) return null;
      var Q = W[0], Z = W.pop();
      if (Z !== Q) {
        W[0] = Z;
        e: for (var K = 0, le = W.length, oe = le >>> 1; K < oe; ) {
          var ge = 2 * (K + 1) - 1, ee = W[ge], ce = ge + 1, be = W[ce];
          if (0 > i(ee, Z))
            ce < le && 0 > i(be, ee) ? (W[K] = be, W[ce] = Z, K = ce) : (W[K] = ee, W[ge] = Z, K = ge);
          else if (ce < le && 0 > i(be, Z))
            W[K] = be, W[ce] = Z, K = ce;
          else break e;
        }
      }
      return Q;
    }
    function i(W, Q) {
      var Z = W.sortIndex - Q.sortIndex;
      return Z !== 0 ? Z : W.id - Q.id;
    }
    if (a.unstable_now = void 0, typeof performance == "object" && typeof performance.now == "function") {
      var o = performance;
      a.unstable_now = function() {
        return o.now();
      };
    } else {
      var l = Date, c = l.now();
      a.unstable_now = function() {
        return l.now() - c;
      };
    }
    var h = [], f = [], p = 1, m = null, g = 3, v = !1, x = !1, E = !1, S = typeof setTimeout == "function" ? setTimeout : null, y = typeof clearTimeout == "function" ? clearTimeout : null, T = typeof setImmediate < "u" ? setImmediate : null;
    function b(W) {
      for (var Q = t(f); Q !== null; ) {
        if (Q.callback === null) n(f);
        else if (Q.startTime <= W)
          n(f), Q.sortIndex = Q.expirationTime, e(h, Q);
        else break;
        Q = t(f);
      }
    }
    function A(W) {
      if (E = !1, b(W), !x)
        if (t(h) !== null)
          x = !0, z();
        else {
          var Q = t(f);
          Q !== null && q(A, Q.startTime - W);
        }
    }
    var N = !1, R = -1, P = 5, H = -1;
    function w() {
      return !(a.unstable_now() - H < P);
    }
    function C() {
      if (N) {
        var W = a.unstable_now();
        H = W;
        var Q = !0;
        try {
          e: {
            x = !1, E && (E = !1, y(R), R = -1), v = !0;
            var Z = g;
            try {
              t: {
                for (b(W), m = t(h); m !== null && !(m.expirationTime > W && w()); ) {
                  var K = m.callback;
                  if (typeof K == "function") {
                    m.callback = null, g = m.priorityLevel;
                    var le = K(
                      m.expirationTime <= W
                    );
                    if (W = a.unstable_now(), typeof le == "function") {
                      m.callback = le, b(W), Q = !0;
                      break t;
                    }
                    m === t(h) && n(h), b(W);
                  } else n(h);
                  m = t(h);
                }
                if (m !== null) Q = !0;
                else {
                  var oe = t(f);
                  oe !== null && q(
                    A,
                    oe.startTime - W
                  ), Q = !1;
                }
              }
              break e;
            } finally {
              m = null, g = Z, v = !1;
            }
            Q = void 0;
          }
        } finally {
          Q ? X() : N = !1;
        }
      }
    }
    var X;
    if (typeof T == "function")
      X = function() {
        T(C);
      };
    else if (typeof MessageChannel < "u") {
      var ne = new MessageChannel(), ae = ne.port2;
      ne.port1.onmessage = C, X = function() {
        ae.postMessage(null);
      };
    } else
      X = function() {
        S(C, 0);
      };
    function z() {
      N || (N = !0, X());
    }
    function q(W, Q) {
      R = S(function() {
        W(a.unstable_now());
      }, Q);
    }
    a.unstable_IdlePriority = 5, a.unstable_ImmediatePriority = 1, a.unstable_LowPriority = 4, a.unstable_NormalPriority = 3, a.unstable_Profiling = null, a.unstable_UserBlockingPriority = 2, a.unstable_cancelCallback = function(W) {
      W.callback = null;
    }, a.unstable_continueExecution = function() {
      x || v || (x = !0, z());
    }, a.unstable_forceFrameRate = function(W) {
      0 > W || 125 < W ? console.error(
        "forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"
      ) : P = 0 < W ? Math.floor(1e3 / W) : 5;
    }, a.unstable_getCurrentPriorityLevel = function() {
      return g;
    }, a.unstable_getFirstCallbackNode = function() {
      return t(h);
    }, a.unstable_next = function(W) {
      switch (g) {
        case 1:
        case 2:
        case 3:
          var Q = 3;
          break;
        default:
          Q = g;
      }
      var Z = g;
      g = Q;
      try {
        return W();
      } finally {
        g = Z;
      }
    }, a.unstable_pauseExecution = function() {
    }, a.unstable_requestPaint = function() {
    }, a.unstable_runWithPriority = function(W, Q) {
      switch (W) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          break;
        default:
          W = 3;
      }
      var Z = g;
      g = W;
      try {
        return Q();
      } finally {
        g = Z;
      }
    }, a.unstable_scheduleCallback = function(W, Q, Z) {
      var K = a.unstable_now();
      switch (typeof Z == "object" && Z !== null ? (Z = Z.delay, Z = typeof Z == "number" && 0 < Z ? K + Z : K) : Z = K, W) {
        case 1:
          var le = -1;
          break;
        case 2:
          le = 250;
          break;
        case 5:
          le = 1073741823;
          break;
        case 4:
          le = 1e4;
          break;
        default:
          le = 5e3;
      }
      return le = Z + le, W = {
        id: p++,
        callback: Q,
        priorityLevel: W,
        startTime: Z,
        expirationTime: le,
        sortIndex: -1
      }, Z > K ? (W.sortIndex = Z, e(f, W), t(h) === null && W === t(f) && (E ? (y(R), R = -1) : E = !0, q(A, Z - K))) : (W.sortIndex = le, e(h, W), x || v || (x = !0, z())), W;
    }, a.unstable_shouldYield = w, a.unstable_wrapCallback = function(W) {
      var Q = g;
      return function() {
        var Z = g;
        g = Q;
        try {
          return W.apply(this, arguments);
        } finally {
          g = Z;
        }
      };
    };
  }(kd)), kd;
}
var V_;
function pS() {
  return V_ || (V_ = 1, Xd.exports = V3()), Xd.exports;
}
var G_;
function G3() {
  return G_ || (G_ = 1, function(a) {
    /**
     * @license React
     * react-reconciler.production.js
     *
     * Copyright (c) Meta Platforms, Inc. and affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    a.exports = function(e) {
      function t(s, r, u, d) {
        return new JS(s, r, u, d);
      }
      function n() {
      }
      function i(s) {
        var r = "https://react.dev/errors/" + s;
        if (1 < arguments.length) {
          r += "?args[]=" + encodeURIComponent(arguments[1]);
          for (var u = 2; u < arguments.length; u++)
            r += "&args[]=" + encodeURIComponent(arguments[u]);
        }
        return "Minified React error #" + s + "; visit " + r + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
      }
      function o(s) {
        return s === null || typeof s != "object" ? null : (s = Sv && s[Sv] || s["@@iterator"], typeof s == "function" ? s : null);
      }
      function l(s) {
        if (s == null) return null;
        if (typeof s == "function")
          return s.$$typeof === iM ? null : s.displayName || s.name || null;
        if (typeof s == "string") return s;
        switch (s) {
          case xr:
            return "Fragment";
          case yr:
            return "Portal";
          case xf:
            return "Profiler";
          case _v:
            return "StrictMode";
          case Mf:
            return "Suspense";
          case Ef:
            return "SuspenseList";
        }
        if (typeof s == "object")
          switch (s.$$typeof) {
            case Os:
              return (s.displayName || "Context") + ".Provider";
            case yv:
              return (s._context.displayName || "Context") + ".Consumer";
            case Sf:
              var r = s.render;
              return s = s.displayName, s || (s = r.displayName || r.name || "", s = s !== "" ? "ForwardRef(" + s + ")" : "ForwardRef"), s;
            case bf:
              return r = s.displayName || null, r !== null ? r : l(s.type) || "Memo";
            case Is:
              r = s._payload, s = s._init;
              try {
                return l(s(r));
              } catch {
              }
          }
        return null;
      }
      function c(s) {
        if (Tf === void 0)
          try {
            throw Error();
          } catch (u) {
            var r = u.stack.trim().match(/\n( *(at )?)/);
            Tf = r && r[1] || "", Mv = -1 < u.stack.indexOf(`
    at`) ? " (<anonymous>)" : -1 < u.stack.indexOf("@") ? "@unknown:0:0" : "";
          }
        return `
` + Tf + s + Mv;
      }
      function h(s, r) {
        if (!s || Af) return "";
        Af = !0;
        var u = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        try {
          var d = {
            DetermineComponentFrameRoot: function() {
              try {
                if (r) {
                  var Oe = function() {
                    throw Error();
                  };
                  if (Object.defineProperty(Oe.prototype, "props", {
                    set: function() {
                      throw Error();
                    }
                  }), typeof Reflect == "object" && Reflect.construct) {
                    try {
                      Reflect.construct(Oe, []);
                    } catch (dt) {
                      var He = dt;
                    }
                    Reflect.construct(s, [], Oe);
                  } else {
                    try {
                      Oe.call();
                    } catch (dt) {
                      He = dt;
                    }
                    s.call(Oe.prototype);
                  }
                } else {
                  try {
                    throw Error();
                  } catch (dt) {
                    He = dt;
                  }
                  (Oe = s()) && typeof Oe.catch == "function" && Oe.catch(function() {
                  });
                }
              } catch (dt) {
                if (dt && He && typeof dt.stack == "string")
                  return [dt.stack, He.stack];
              }
              return [null, null];
            }
          };
          d.DetermineComponentFrameRoot.displayName = "DetermineComponentFrameRoot";
          var _ = Object.getOwnPropertyDescriptor(
            d.DetermineComponentFrameRoot,
            "name"
          );
          _ && _.configurable && Object.defineProperty(
            d.DetermineComponentFrameRoot,
            "name",
            { value: "DetermineComponentFrameRoot" }
          );
          var M = d.DetermineComponentFrameRoot(), U = M[0], B = M[1];
          if (U && B) {
            var Y = U.split(`
`), fe = B.split(`
`);
            for (_ = d = 0; d < Y.length && !Y[d].includes("DetermineComponentFrameRoot"); )
              d++;
            for (; _ < fe.length && !fe[_].includes(
              "DetermineComponentFrameRoot"
            ); )
              _++;
            if (d === Y.length || _ === fe.length)
              for (d = Y.length - 1, _ = fe.length - 1; 1 <= d && 0 <= _ && Y[d] !== fe[_]; )
                _--;
            for (; 1 <= d && 0 <= _; d--, _--)
              if (Y[d] !== fe[_]) {
                if (d !== 1 || _ !== 1)
                  do
                    if (d--, _--, 0 > _ || Y[d] !== fe[_]) {
                      var Te = `
` + Y[d].replace(" at new ", " at ");
                      return s.displayName && Te.includes("<anonymous>") && (Te = Te.replace("<anonymous>", s.displayName)), Te;
                    }
                  while (1 <= d && 0 <= _);
                break;
              }
          }
        } finally {
          Af = !1, Error.prepareStackTrace = u;
        }
        return (u = s ? s.displayName || s.name : "") ? c(u) : "";
      }
      function f(s) {
        switch (s.tag) {
          case 26:
          case 27:
          case 5:
            return c(s.type);
          case 16:
            return c("Lazy");
          case 13:
            return c("Suspense");
          case 19:
            return c("SuspenseList");
          case 0:
          case 15:
            return s = h(s.type, !1), s;
          case 11:
            return s = h(s.type.render, !1), s;
          case 1:
            return s = h(s.type, !0), s;
          default:
            return "";
        }
      }
      function p(s) {
        try {
          var r = "";
          do
            r += f(s), s = s.return;
          while (s);
          return r;
        } catch (u) {
          return `
Error generating stack: ` + u.message + `
` + u.stack;
        }
      }
      function m(s) {
        var r = s, u = s;
        if (s.alternate) for (; r.return; ) r = r.return;
        else {
          s = r;
          do
            r = s, (r.flags & 4098) !== 0 && (u = r.return), s = r.return;
          while (s);
        }
        return r.tag === 3 ? u : null;
      }
      function g(s) {
        if (m(s) !== s)
          throw Error(i(188));
      }
      function v(s) {
        var r = s.alternate;
        if (!r) {
          if (r = m(s), r === null) throw Error(i(188));
          return r !== s ? null : s;
        }
        for (var u = s, d = r; ; ) {
          var _ = u.return;
          if (_ === null) break;
          var M = _.alternate;
          if (M === null) {
            if (d = _.return, d !== null) {
              u = d;
              continue;
            }
            break;
          }
          if (_.child === M.child) {
            for (M = _.child; M; ) {
              if (M === u) return g(_), s;
              if (M === d) return g(_), r;
              M = M.sibling;
            }
            throw Error(i(188));
          }
          if (u.return !== d.return) u = _, d = M;
          else {
            for (var U = !1, B = _.child; B; ) {
              if (B === u) {
                U = !0, u = _, d = M;
                break;
              }
              if (B === d) {
                U = !0, d = _, u = M;
                break;
              }
              B = B.sibling;
            }
            if (!U) {
              for (B = M.child; B; ) {
                if (B === u) {
                  U = !0, u = M, d = _;
                  break;
                }
                if (B === d) {
                  U = !0, d = M, u = _;
                  break;
                }
                B = B.sibling;
              }
              if (!U) throw Error(i(189));
            }
          }
          if (u.alternate !== d) throw Error(i(190));
        }
        if (u.tag !== 3) throw Error(i(188));
        return u.stateNode.current === u ? s : r;
      }
      function x(s) {
        var r = s.tag;
        if (r === 5 || r === 26 || r === 27 || r === 6) return s;
        for (s = s.child; s !== null; ) {
          if (r = x(s), r !== null) return r;
          s = s.sibling;
        }
        return null;
      }
      function E(s) {
        var r = s.tag;
        if (r === 5 || r === 26 || r === 27 || r === 6) return s;
        for (s = s.child; s !== null; ) {
          if (s.tag !== 4 && (r = E(s), r !== null))
            return r;
          s = s.sibling;
        }
        return null;
      }
      function S(s) {
        return { current: s };
      }
      function y(s) {
        0 > Mr || (s.current = Nf[Mr], Nf[Mr] = null, Mr--);
      }
      function T(s, r) {
        Mr++, Nf[Mr] = s.current, s.current = r;
      }
      function b(s) {
        return s >>>= 0, s === 0 ? 32 : 31 - (_E(s) / yE | 0) | 0;
      }
      function A(s) {
        var r = s & 42;
        if (r !== 0) return r;
        switch (s & -s) {
          case 1:
            return 1;
          case 2:
            return 2;
          case 4:
            return 4;
          case 8:
            return 8;
          case 16:
            return 16;
          case 32:
            return 32;
          case 64:
            return 64;
          case 128:
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
            return s & 4194176;
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
            return s & 62914560;
          case 67108864:
            return 67108864;
          case 134217728:
            return 134217728;
          case 268435456:
            return 268435456;
          case 536870912:
            return 536870912;
          case 1073741824:
            return 0;
          default:
            return s;
        }
      }
      function N(s, r) {
        var u = s.pendingLanes;
        if (u === 0) return 0;
        var d = 0, _ = s.suspendedLanes, M = s.pingedLanes, U = s.warmLanes;
        s = s.finishedLanes !== 0;
        var B = u & 134217727;
        return B !== 0 ? (u = B & ~_, u !== 0 ? d = A(u) : (M &= B, M !== 0 ? d = A(M) : s || (U = B & ~U, U !== 0 && (d = A(U))))) : (B = u & ~_, B !== 0 ? d = A(B) : M !== 0 ? d = A(M) : s || (U = u & ~U, U !== 0 && (d = A(U)))), d === 0 ? 0 : r !== 0 && r !== d && (r & _) === 0 && (_ = d & -d, U = r & -r, _ >= U || _ === 32 && (U & 4194176) !== 0) ? r : d;
      }
      function R(s, r) {
        return (s.pendingLanes & ~(s.suspendedLanes & ~s.pingedLanes) & r) === 0;
      }
      function P(s, r) {
        switch (s) {
          case 1:
          case 2:
          case 4:
          case 8:
            return r + 250;
          case 16:
          case 32:
          case 64:
          case 128:
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
            return r + 5e3;
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
            return -1;
          case 67108864:
          case 134217728:
          case 268435456:
          case 536870912:
          case 1073741824:
            return -1;
          default:
            return -1;
        }
      }
      function H() {
        var s = vc;
        return vc <<= 1, (vc & 4194176) === 0 && (vc = 128), s;
      }
      function w() {
        var s = _c;
        return _c <<= 1, (_c & 62914560) === 0 && (_c = 4194304), s;
      }
      function C(s) {
        for (var r = [], u = 0; 31 > u; u++) r.push(s);
        return r;
      }
      function X(s, r) {
        s.pendingLanes |= r, r !== 268435456 && (s.suspendedLanes = 0, s.pingedLanes = 0, s.warmLanes = 0);
      }
      function ne(s, r, u, d, _, M) {
        var U = s.pendingLanes;
        s.pendingLanes = u, s.suspendedLanes = 0, s.pingedLanes = 0, s.warmLanes = 0, s.expiredLanes &= u, s.entangledLanes &= u, s.errorRecoveryDisabledLanes &= u, s.shellSuspendCounter = 0;
        var B = s.entanglements, Y = s.expirationTimes, fe = s.hiddenUpdates;
        for (u = U & ~u; 0 < u; ) {
          var Te = 31 - oi(u), Oe = 1 << Te;
          B[Te] = 0, Y[Te] = -1;
          var He = fe[Te];
          if (He !== null)
            for (fe[Te] = null, Te = 0; Te < He.length; Te++) {
              var dt = He[Te];
              dt !== null && (dt.lane &= -536870913);
            }
          u &= ~Oe;
        }
        d !== 0 && ae(s, d, 0), M !== 0 && _ === 0 && s.tag !== 0 && (s.suspendedLanes |= M & ~(U & ~r));
      }
      function ae(s, r, u) {
        s.pendingLanes |= r, s.suspendedLanes &= ~r;
        var d = 31 - oi(r);
        s.entangledLanes |= r, s.entanglements[d] = s.entanglements[d] | 1073741824 | u & 4194218;
      }
      function z(s, r) {
        var u = s.entangledLanes |= r;
        for (s = s.entanglements; u; ) {
          var d = 31 - oi(u), _ = 1 << d;
          _ & r | s[d] & r && (s[d] |= r), u &= ~_;
        }
      }
      function q(s) {
        return s &= -s, 2 < s ? 8 < s ? (s & 134217727) !== 0 ? 32 : 268435456 : 8 : 2;
      }
      function W(s) {
        if (li && typeof li.onCommitFiberRoot == "function")
          try {
            li.onCommitFiberRoot(
              Xo,
              s,
              void 0,
              (s.current.flags & 128) === 128
            );
          } catch {
          }
      }
      function Q(s) {
        if (typeof bE == "function" && TE(s), li && typeof li.setStrictMode == "function")
          try {
            li.setStrictMode(Xo, s);
          } catch {
          }
      }
      function Z(s, r) {
        return s === r && (s !== 0 || 1 / s === 1 / r) || s !== s && r !== r;
      }
      function K(s, r) {
        if (typeof s == "object" && s !== null) {
          var u = jv.get(s);
          return u !== void 0 ? u : (r = {
            value: s,
            source: r,
            stack: p(r)
          }, jv.set(s, r), r);
        }
        return {
          value: s,
          source: r,
          stack: p(r)
        };
      }
      function le(s, r) {
        br[Tr++] = Sc, br[Tr++] = xc, xc = s, Sc = r;
      }
      function oe(s, r, u) {
        yi[xi++] = rs, yi[xi++] = os, yi[xi++] = Ma, Ma = s;
        var d = rs;
        s = os;
        var _ = 32 - oi(d) - 1;
        d &= ~(1 << _), u += 1;
        var M = 32 - oi(r) + _;
        if (30 < M) {
          var U = _ - _ % 5;
          M = (d & (1 << U) - 1).toString(32), d >>= U, _ -= U, rs = 1 << 32 - oi(r) + _ | u << _ | d, os = M + s;
        } else
          rs = 1 << M | u << _ | d, os = s;
      }
      function ge(s) {
        s.return !== null && (le(s, 1), oe(s, 1, 0));
      }
      function ee(s) {
        for (; s === xc; )
          xc = br[--Tr], br[Tr] = null, Sc = br[--Tr], br[Tr] = null;
        for (; s === Ma; )
          Ma = yi[--xi], yi[xi] = null, os = yi[--xi], yi[xi] = null, rs = yi[--xi], yi[xi] = null;
      }
      function ce(s, r) {
        T(Bs, r), T(ko, s), T(An, null), s = rM(r), y(An), T(An, s);
      }
      function be() {
        y(An), y(ko), y(Bs);
      }
      function Ve(s) {
        s.memoizedState !== null && T(Mc, s);
        var r = An.current, u = oM(r, s.type);
        r !== u && (T(ko, s), T(An, u));
      }
      function Ie(s) {
        ko.current === s && (y(An), y(ko)), Mc.current === s && (y(Mc), as ? Sa._currentValue = Sr : Sa._currentValue2 = Sr);
      }
      function je(s) {
        var r = Error(i(418, ""));
        throw Ee(K(r, s)), Of;
      }
      function st(s, r) {
        if (!vi) throw Error(i(175));
        eE(
          s.stateNode,
          s.type,
          s.memoizedProps,
          r,
          s
        ) || je(s);
      }
      function qe(s) {
        for (Fn = s.return; Fn; )
          switch (Fn.tag) {
            case 3:
            case 27:
              Yi = !0;
              return;
            case 5:
            case 13:
              Yi = !1;
              return;
            default:
              Fn = Fn.return;
          }
      }
      function nt(s) {
        if (!vi || s !== Fn) return !1;
        if (!Ct) return qe(s), Ct = !0, !1;
        var r = !1;
        if (Cn ? s.tag !== 3 && s.tag !== 27 && (s.tag !== 5 || zv(s.type) && !gc(s.type, s.memoizedProps)) && (r = !0) : s.tag !== 3 && (s.tag !== 5 || zv(s.type) && !gc(s.type, s.memoizedProps)) && (r = !0), r && Ln && je(s), qe(s), s.tag === 13) {
          if (!vi) throw Error(i(316));
          if (s = s.memoizedState, s = s !== null ? s.dehydrated : null, !s) throw Error(i(317));
          Ln = iE(s);
        } else
          Ln = Fn ? Ov(s.stateNode) : null;
        return !0;
      }
      function F() {
        vi && (Ln = Fn = null, Ct = !1);
      }
      function Ee(s) {
        Ni === null ? Ni = [s] : Ni.push(s);
      }
      function ue() {
        for (var s = Ar, r = If = Ar = 0; r < s; ) {
          var u = Si[r];
          Si[r++] = null;
          var d = Si[r];
          Si[r++] = null;
          var _ = Si[r];
          Si[r++] = null;
          var M = Si[r];
          if (Si[r++] = null, d !== null && _ !== null) {
            var U = d.pending;
            U === null ? _.next = _ : (_.next = U.next, U.next = _), d.pending = _;
          }
          M !== 0 && Ne(u, _, M);
        }
      }
      function Se(s, r, u, d) {
        Si[Ar++] = s, Si[Ar++] = r, Si[Ar++] = u, Si[Ar++] = d, If |= d, s.lanes |= d, s = s.alternate, s !== null && (s.lanes |= d);
      }
      function he(s, r, u, d) {
        return Se(s, r, u, d), D(s);
      }
      function Ge(s, r) {
        return Se(s, null, null, r), D(s);
      }
      function Ne(s, r, u) {
        s.lanes |= u;
        var d = s.alternate;
        d !== null && (d.lanes |= u);
        for (var _ = !1, M = s.return; M !== null; )
          M.childLanes |= u, d = M.alternate, d !== null && (d.childLanes |= u), M.tag === 22 && (s = M.stateNode, s === null || s._visibility & 1 || (_ = !0)), s = M, M = M.return;
        _ && r !== null && s.tag === 3 && (M = s.stateNode, _ = 31 - oi(u), M = M.hiddenUpdates, s = M[_], s === null ? M[_] = [r] : s.push(r), r.lane = u | 536870912);
      }
      function D(s) {
        if (50 < el)
          throw el = 0, Qf = null, Error(i(185));
        for (var r = s.return; r !== null; )
          s = r, r = s.return;
        return s.tag === 3 ? s.stateNode : null;
      }
      function L(s) {
        s !== wr && s.next === null && (wr === null ? Ec = wr = s : wr = wr.next = s), bc = !0, zf || (zf = !0, Le(_e));
      }
      function j(s, r) {
        if (!Bf && bc) {
          Bf = !0;
          do
            for (var u = !1, d = Ec; d !== null; ) {
              if (s !== 0) {
                var _ = d.pendingLanes;
                if (_ === 0) var M = 0;
                else {
                  var U = d.suspendedLanes, B = d.pingedLanes;
                  M = (1 << 31 - oi(42 | s) + 1) - 1, M &= _ & ~(U & ~B), M = M & 201326677 ? M & 201326677 | 1 : M ? M | 2 : 0;
                }
                M !== 0 && (u = !0, We(d, M));
              } else
                M = wt, M = N(
                  d,
                  d === Vt ? M : 0
                ), (M & 3) === 0 || R(d, M) || (u = !0, We(d, M));
              d = d.next;
            }
          while (u);
          Bf = !1;
        }
      }
      function _e() {
        bc = zf = !1;
        var s = 0;
        Rr !== 0 && (mM() && (s = Rr), Rr = 0);
        for (var r = Ui(), u = null, d = Ec; d !== null; ) {
          var _ = d.next, M = ve(d, r);
          M === 0 ? (d.next = null, u === null ? Ec = _ : u.next = _, _ === null && (wr = u)) : (u = d, (s !== 0 || (M & 3) !== 0) && (bc = !0)), d = _;
        }
        j(s);
      }
      function ve(s, r) {
        for (var u = s.suspendedLanes, d = s.pingedLanes, _ = s.expirationTimes, M = s.pendingLanes & -62914561; 0 < M; ) {
          var U = 31 - oi(M), B = 1 << U, Y = _[U];
          Y === -1 ? ((B & u) === 0 || (B & d) !== 0) && (_[U] = P(B, r)) : Y <= r && (s.expiredLanes |= B), M &= ~B;
        }
        if (r = Vt, u = wt, u = N(
          s,
          s === r ? u : 0
        ), d = s.callbackNode, u === 0 || s === r && Gt === 2 || s.cancelPendingCommit !== null)
          return d !== null && d !== null && Df(d), s.callbackNode = null, s.callbackPriority = 0;
        if ((u & 3) === 0 || R(s, u)) {
          if (r = u & -u, r === s.callbackPriority) return r;
          switch (d !== null && Df(d), q(u)) {
            case 2:
            case 8:
              u = ME;
              break;
            case 32:
              u = Pf;
              break;
            case 268435456:
              u = EE;
              break;
            default:
              u = Pf;
          }
          return d = me.bind(null, s), u = yc(u, d), s.callbackPriority = r, s.callbackNode = u, r;
        }
        return d !== null && d !== null && Df(d), s.callbackPriority = 2, s.callbackNode = null, 2;
      }
      function me(s, r) {
        var u = s.callbackNode;
        if (_a() && s.callbackNode !== u)
          return null;
        var d = wt;
        return d = N(
          s,
          s === Vt ? d : 0
        ), d === 0 ? null : (Jg(s, d, r), ve(s, Ui()), s.callbackNode != null && s.callbackNode === u ? me.bind(null, s) : null);
      }
      function We(s, r) {
        if (_a()) return null;
        Jg(s, r, !0);
      }
      function Le(s) {
        SM ? MM(function() {
          (Ht & 6) !== 0 ? yc(Yv, s) : s();
        }) : yc(Yv, s);
      }
      function ze() {
        return Rr === 0 && (Rr = H()), Rr;
      }
      function Ze(s, r) {
        if (qo === null) {
          var u = qo = [];
          Hf = 0, Cr = ze(), Lr = {
            status: "pending",
            value: void 0,
            then: function(d) {
              u.push(d);
            }
          };
        }
        return Hf++, r.then(ot, ot), r;
      }
      function ot() {
        if (--Hf === 0 && qo !== null) {
          Lr !== null && (Lr.status = "fulfilled");
          var s = qo;
          qo = null, Cr = 0, Lr = null;
          for (var r = 0; r < s.length; r++) (0, s[r])();
        }
      }
      function ye(s, r) {
        var u = [], d = {
          status: "pending",
          value: null,
          reason: null,
          then: function(_) {
            u.push(_);
          }
        };
        return s.then(
          function() {
            d.status = "fulfilled", d.value = r;
            for (var _ = 0; _ < u.length; _++) (0, u[_])(r);
          },
          function(_) {
            for (d.status = "rejected", d.reason = _, _ = 0; _ < u.length; _++)
              (0, u[_])(void 0);
          }
        ), d;
      }
      function Mt(s) {
        s.updateQueue = {
          baseState: s.memoizedState,
          firstBaseUpdate: null,
          lastBaseUpdate: null,
          shared: { pending: null, lanes: 0, hiddenCallbacks: null },
          callbacks: null
        };
      }
      function ht(s, r) {
        s = s.updateQueue, r.updateQueue === s && (r.updateQueue = {
          baseState: s.baseState,
          firstBaseUpdate: s.firstBaseUpdate,
          lastBaseUpdate: s.lastBaseUpdate,
          shared: s.shared,
          callbacks: null
        });
      }
      function Je(s) {
        return { lane: s, tag: 0, payload: null, callback: null, next: null };
      }
      function Xe(s, r, u) {
        var d = s.updateQueue;
        if (d === null) return null;
        if (d = d.shared, (Ht & 2) !== 0) {
          var _ = d.pending;
          return _ === null ? r.next = r : (r.next = _.next, _.next = r), d.pending = r, r = D(s), Ne(s, null, u), r;
        }
        return Se(s, d, r, u), D(s);
      }
      function Be(s, r, u) {
        if (r = r.updateQueue, r !== null && (r = r.shared, (u & 4194176) !== 0)) {
          var d = r.lanes;
          d &= s.pendingLanes, u |= d, r.lanes = u, z(s, u);
        }
      }
      function V(s, r) {
        var u = s.updateQueue, d = s.alternate;
        if (d !== null && (d = d.updateQueue, u === d)) {
          var _ = null, M = null;
          if (u = u.firstBaseUpdate, u !== null) {
            do {
              var U = {
                lane: u.lane,
                tag: u.tag,
                payload: u.payload,
                callback: null,
                next: null
              };
              M === null ? _ = M = U : M = M.next = U, u = u.next;
            } while (u !== null);
            M === null ? _ = M = r : M = M.next = r;
          } else _ = M = r;
          u = {
            baseState: d.baseState,
            firstBaseUpdate: _,
            lastBaseUpdate: M,
            shared: d.shared,
            callbacks: d.callbacks
          }, s.updateQueue = u;
          return;
        }
        s = u.lastBaseUpdate, s === null ? u.firstBaseUpdate = r : s.next = r, u.lastBaseUpdate = r;
      }
      function pe() {
        if (Ff) {
          var s = Lr;
          if (s !== null) throw s;
        }
      }
      function De(s, r, u, d) {
        Ff = !1;
        var _ = s.updateQueue;
        Hs = !1;
        var M = _.firstBaseUpdate, U = _.lastBaseUpdate, B = _.shared.pending;
        if (B !== null) {
          _.shared.pending = null;
          var Y = B, fe = Y.next;
          Y.next = null, U === null ? M = fe : U.next = fe, U = Y;
          var Te = s.alternate;
          Te !== null && (Te = Te.updateQueue, B = Te.lastBaseUpdate, B !== U && (B === null ? Te.firstBaseUpdate = fe : B.next = fe, Te.lastBaseUpdate = Y));
        }
        if (M !== null) {
          var Oe = _.baseState;
          U = 0, Te = fe = Y = null, B = M;
          do {
            var He = B.lane & -536870913, dt = He !== B.lane;
            if (dt ? (wt & He) === He : (d & He) === He) {
              He !== 0 && He === Cr && (Ff = !0), Te !== null && (Te = Te.next = {
                lane: 0,
                tag: B.tag,
                payload: B.payload,
                callback: null,
                next: null
              });
              e: {
                var bi = s, tl = B;
                He = r;
                var Ua = u;
                switch (tl.tag) {
                  case 1:
                    if (bi = tl.payload, typeof bi == "function") {
                      Oe = bi.call(
                        Ua,
                        Oe,
                        He
                      );
                      break e;
                    }
                    Oe = bi;
                    break e;
                  case 3:
                    bi.flags = bi.flags & -65537 | 128;
                  case 0:
                    if (bi = tl.payload, He = typeof bi == "function" ? bi.call(Ua, Oe, He) : bi, He == null) break e;
                    Oe = yf({}, Oe, He);
                    break e;
                  case 2:
                    Hs = !0;
                }
              }
              He = B.callback, He !== null && (s.flags |= 64, dt && (s.flags |= 8192), dt = _.callbacks, dt === null ? _.callbacks = [He] : dt.push(He));
            } else
              dt = {
                lane: He,
                tag: B.tag,
                payload: B.payload,
                callback: B.callback,
                next: null
              }, Te === null ? (fe = Te = dt, Y = Oe) : Te = Te.next = dt, U |= He;
            if (B = B.next, B === null) {
              if (B = _.shared.pending, B === null)
                break;
              dt = B, B = dt.next, dt.next = null, _.lastBaseUpdate = dt, _.shared.pending = null;
            }
          } while (!0);
          Te === null && (Y = Oe), _.baseState = Y, _.firstBaseUpdate = fe, _.lastBaseUpdate = Te, M === null && (_.shared.lanes = 0), Gs |= U, s.lanes = U, s.memoizedState = Oe;
        }
      }
      function Pe(s, r) {
        if (typeof s != "function")
          throw Error(i(191, s));
        s.call(r);
      }
      function xe(s, r) {
        var u = s.callbacks;
        if (u !== null)
          for (s.callbacks = null, s = 0; s < u.length; s++)
            Pe(u[s], r);
      }
      function G(s, r) {
        if (ci(s, r)) return !0;
        if (typeof s != "object" || s === null || typeof r != "object" || r === null)
          return !1;
        var u = Object.keys(s), d = Object.keys(r);
        if (u.length !== d.length) return !1;
        for (d = 0; d < u.length; d++) {
          var _ = u[d];
          if (!AE.call(r, _) || !ci(s[_], r[_]))
            return !1;
        }
        return !0;
      }
      function Ae(s) {
        return s = s.status, s === "fulfilled" || s === "rejected";
      }
      function Ce() {
      }
      function $e(s, r, u) {
        switch (u = s[u], u === void 0 ? s.push(r) : u !== r && (r.then(Ce, Ce), r = u), r.status) {
          case "fulfilled":
            return r.value;
          case "rejected":
            throw s = r.reason, s === Yo ? Error(i(483)) : s;
          default:
            if (typeof r.status == "string") r.then(Ce, Ce);
            else {
              if (s = Vt, s !== null && 100 < s.shellSuspendCounter)
                throw Error(i(482));
              s = r, s.status = "pending", s.then(
                function(d) {
                  if (r.status === "pending") {
                    var _ = r;
                    _.status = "fulfilled", _.value = d;
                  }
                },
                function(d) {
                  if (r.status === "pending") {
                    var _ = r;
                    _.status = "rejected", _.reason = d;
                  }
                }
              );
            }
            switch (r.status) {
              case "fulfilled":
                return r.value;
              case "rejected":
                throw s = r.reason, s === Yo ? Error(i(483)) : s;
            }
            throw Ur = r, Yo;
        }
      }
      function ke() {
        if (Ur === null) throw Error(i(459));
        var s = Ur;
        return Ur = null, s;
      }
      function mt(s) {
        var r = jo;
        return jo += 1, Nr === null && (Nr = []), $e(Nr, s, r);
      }
      function Et(s, r) {
        r = r.props.ref, s.ref = r !== void 0 ? r : null;
      }
      function Pt(s, r) {
        throw r.$$typeof === eM ? Error(i(525)) : (s = Object.prototype.toString.call(r), Error(
          i(
            31,
            s === "[object Object]" ? "object with keys {" + Object.keys(r).join(", ") + "}" : s
          )
        ));
      }
      function Yt(s) {
        var r = s._init;
        return r(s._payload);
      }
      function At(s) {
        function r($, k) {
          if (s) {
            var se = $.deletions;
            se === null ? ($.deletions = [k], $.flags |= 16) : se.push(k);
          }
        }
        function u($, k) {
          if (!s) return null;
          for (; k !== null; )
            r($, k), k = k.sibling;
          return null;
        }
        function d($) {
          for (var k = /* @__PURE__ */ new Map(); $ !== null; )
            $.key !== null ? k.set($.key, $) : k.set($.index, $), $ = $.sibling;
          return k;
        }
        function _($, k) {
          return $ = Ps($, k), $.index = 0, $.sibling = null, $;
        }
        function M($, k, se) {
          return $.index = se, s ? (se = $.alternate, se !== null ? (se = se.index, se < k ? ($.flags |= 33554434, k) : se) : ($.flags |= 33554434, k)) : ($.flags |= 1048576, k);
        }
        function U($) {
          return s && $.alternate === null && ($.flags |= 33554434), $;
        }
        function B($, k, se, Me) {
          return k === null || k.tag !== 6 ? (k = gf(se, $.mode, Me), k.return = $, k) : (k = _(k, se), k.return = $, k);
        }
        function Y($, k, se, Me) {
          var Ke = se.type;
          return Ke === xr ? Te(
            $,
            k,
            se.props.children,
            Me,
            se.key
          ) : k !== null && (k.elementType === Ke || typeof Ke == "object" && Ke !== null && Ke.$$typeof === Is && Yt(Ke) === k.type) ? (k = _(k, se.props), Et(k, se), k.return = $, k) : (k = dc(
            se.type,
            se.key,
            se.props,
            null,
            $.mode,
            Me
          ), Et(k, se), k.return = $, k);
        }
        function fe($, k, se, Me) {
          return k === null || k.tag !== 4 || k.stateNode.containerInfo !== se.containerInfo || k.stateNode.implementation !== se.implementation ? (k = vf(se, $.mode, Me), k.return = $, k) : (k = _(k, se.children || []), k.return = $, k);
        }
        function Te($, k, se, Me, Ke) {
          return k === null || k.tag !== 7 ? (k = ya(
            se,
            $.mode,
            Me,
            Ke
          ), k.return = $, k) : (k = _(k, se), k.return = $, k);
        }
        function Oe($, k, se) {
          if (typeof k == "string" && k !== "" || typeof k == "number" || typeof k == "bigint")
            return k = gf(
              "" + k,
              $.mode,
              se
            ), k.return = $, k;
          if (typeof k == "object" && k !== null) {
            switch (k.$$typeof) {
              case pc:
                return se = dc(
                  k.type,
                  k.key,
                  k.props,
                  null,
                  $.mode,
                  se
                ), Et(se, k), se.return = $, se;
              case yr:
                return k = vf(
                  k,
                  $.mode,
                  se
                ), k.return = $, k;
              case Is:
                var Me = k._init;
                return k = Me(k._payload), Oe($, k, se);
            }
            if (mc(k) || o(k))
              return k = ya(
                k,
                $.mode,
                se,
                null
              ), k.return = $, k;
            if (typeof k.then == "function")
              return Oe($, mt(k), se);
            if (k.$$typeof === Os)
              return Oe(
                $,
                oc($, k),
                se
              );
            Pt($, k);
          }
          return null;
        }
        function He($, k, se, Me) {
          var Ke = k !== null ? k.key : null;
          if (typeof se == "string" && se !== "" || typeof se == "number" || typeof se == "bigint")
            return Ke !== null ? null : B($, k, "" + se, Me);
          if (typeof se == "object" && se !== null) {
            switch (se.$$typeof) {
              case pc:
                return se.key === Ke ? Y($, k, se, Me) : null;
              case yr:
                return se.key === Ke ? fe($, k, se, Me) : null;
              case Is:
                return Ke = se._init, se = Ke(se._payload), He($, k, se, Me);
            }
            if (mc(se) || o(se))
              return Ke !== null ? null : Te($, k, se, Me, null);
            if (typeof se.then == "function")
              return He(
                $,
                k,
                mt(se),
                Me
              );
            if (se.$$typeof === Os)
              return He(
                $,
                k,
                oc($, se),
                Me
              );
            Pt($, se);
          }
          return null;
        }
        function dt($, k, se, Me, Ke) {
          if (typeof Me == "string" && Me !== "" || typeof Me == "number" || typeof Me == "bigint")
            return $ = $.get(se) || null, B(k, $, "" + Me, Ke);
          if (typeof Me == "object" && Me !== null) {
            switch (Me.$$typeof) {
              case pc:
                return $ = $.get(
                  Me.key === null ? se : Me.key
                ) || null, Y(k, $, Me, Ke);
              case yr:
                return $ = $.get(
                  Me.key === null ? se : Me.key
                ) || null, fe(k, $, Me, Ke);
              case Is:
                var qt = Me._init;
                return Me = qt(Me._payload), dt(
                  $,
                  k,
                  se,
                  Me,
                  Ke
                );
            }
            if (mc(Me) || o(Me))
              return $ = $.get(se) || null, Te(k, $, Me, Ke, null);
            if (typeof Me.then == "function")
              return dt(
                $,
                k,
                se,
                mt(Me),
                Ke
              );
            if (Me.$$typeof === Os)
              return dt(
                $,
                k,
                se,
                oc(k, Me),
                Ke
              );
            Pt(k, Me);
          }
          return null;
        }
        function bi($, k, se, Me) {
          for (var Ke = null, qt = null, at = k, Lt = k = 0, Mn = null; at !== null && Lt < se.length; Lt++) {
            at.index > Lt ? (Mn = at, at = null) : Mn = at.sibling;
            var Ut = He(
              $,
              at,
              se[Lt],
              Me
            );
            if (Ut === null) {
              at === null && (at = Mn);
              break;
            }
            s && at && Ut.alternate === null && r($, at), k = M(Ut, k, Lt), qt === null ? Ke = Ut : qt.sibling = Ut, qt = Ut, at = Mn;
          }
          if (Lt === se.length)
            return u($, at), Ct && le($, Lt), Ke;
          if (at === null) {
            for (; Lt < se.length; Lt++)
              at = Oe($, se[Lt], Me), at !== null && (k = M(
                at,
                k,
                Lt
              ), qt === null ? Ke = at : qt.sibling = at, qt = at);
            return Ct && le($, Lt), Ke;
          }
          for (at = d(at); Lt < se.length; Lt++)
            Mn = dt(
              at,
              $,
              Lt,
              se[Lt],
              Me
            ), Mn !== null && (s && Mn.alternate !== null && at.delete(
              Mn.key === null ? Lt : Mn.key
            ), k = M(
              Mn,
              k,
              Lt
            ), qt === null ? Ke = Mn : qt.sibling = Mn, qt = Mn);
          return s && at.forEach(function(Xs) {
            return r($, Xs);
          }), Ct && le($, Lt), Ke;
        }
        function tl($, k, se, Me) {
          if (se == null) throw Error(i(151));
          for (var Ke = null, qt = null, at = k, Lt = k = 0, Mn = null, Ut = se.next(); at !== null && !Ut.done; Lt++, Ut = se.next()) {
            at.index > Lt ? (Mn = at, at = null) : Mn = at.sibling;
            var Xs = He($, at, Ut.value, Me);
            if (Xs === null) {
              at === null && (at = Mn);
              break;
            }
            s && at && Xs.alternate === null && r($, at), k = M(Xs, k, Lt), qt === null ? Ke = Xs : qt.sibling = Xs, qt = Xs, at = Mn;
          }
          if (Ut.done)
            return u($, at), Ct && le($, Lt), Ke;
          if (at === null) {
            for (; !Ut.done; Lt++, Ut = se.next())
              Ut = Oe($, Ut.value, Me), Ut !== null && (k = M(
                Ut,
                k,
                Lt
              ), qt === null ? Ke = Ut : qt.sibling = Ut, qt = Ut);
            return Ct && le($, Lt), Ke;
          }
          for (at = d(at); !Ut.done; Lt++, Ut = se.next())
            Ut = dt(
              at,
              $,
              Lt,
              Ut.value,
              Me
            ), Ut !== null && (s && Ut.alternate !== null && at.delete(Ut.key === null ? Lt : Ut.key), k = M(Ut, k, Lt), qt === null ? Ke = Ut : qt.sibling = Ut, qt = Ut);
          return s && at.forEach(function(DE) {
            return r($, DE);
          }), Ct && le($, Lt), Ke;
        }
        function Ua($, k, se, Me) {
          if (typeof se == "object" && se !== null && se.type === xr && se.key === null && (se = se.props.children), typeof se == "object" && se !== null) {
            switch (se.$$typeof) {
              case pc:
                e: {
                  for (var Ke = se.key; k !== null; ) {
                    if (k.key === Ke) {
                      if (Ke = se.type, Ke === xr) {
                        if (k.tag === 7) {
                          u(
                            $,
                            k.sibling
                          ), Me = _(
                            k,
                            se.props.children
                          ), Me.return = $, $ = Me;
                          break e;
                        }
                      } else if (k.elementType === Ke || typeof Ke == "object" && Ke !== null && Ke.$$typeof === Is && Yt(Ke) === k.type) {
                        u(
                          $,
                          k.sibling
                        ), Me = _(k, se.props), Et(Me, se), Me.return = $, $ = Me;
                        break e;
                      }
                      u($, k);
                      break;
                    } else r($, k);
                    k = k.sibling;
                  }
                  se.type === xr ? (Me = ya(
                    se.props.children,
                    $.mode,
                    Me,
                    se.key
                  ), Me.return = $, $ = Me) : (Me = dc(
                    se.type,
                    se.key,
                    se.props,
                    null,
                    $.mode,
                    Me
                  ), Et(Me, se), Me.return = $, $ = Me);
                }
                return U($);
              case yr:
                e: {
                  for (Ke = se.key; k !== null; ) {
                    if (k.key === Ke)
                      if (k.tag === 4 && k.stateNode.containerInfo === se.containerInfo && k.stateNode.implementation === se.implementation) {
                        u(
                          $,
                          k.sibling
                        ), Me = _(
                          k,
                          se.children || []
                        ), Me.return = $, $ = Me;
                        break e;
                      } else {
                        u($, k);
                        break;
                      }
                    else r($, k);
                    k = k.sibling;
                  }
                  Me = vf(se, $.mode, Me), Me.return = $, $ = Me;
                }
                return U($);
              case Is:
                return Ke = se._init, se = Ke(se._payload), Ua(
                  $,
                  k,
                  se,
                  Me
                );
            }
            if (mc(se))
              return bi(
                $,
                k,
                se,
                Me
              );
            if (o(se)) {
              if (Ke = o(se), typeof Ke != "function")
                throw Error(i(150));
              return se = Ke.call(se), tl(
                $,
                k,
                se,
                Me
              );
            }
            if (typeof se.then == "function")
              return Ua(
                $,
                k,
                mt(se),
                Me
              );
            if (se.$$typeof === Os)
              return Ua(
                $,
                k,
                oc($, se),
                Me
              );
            Pt($, se);
          }
          return typeof se == "string" && se !== "" || typeof se == "number" || typeof se == "bigint" ? (se = "" + se, k !== null && k.tag === 6 ? (u($, k.sibling), Me = _(k, se), Me.return = $, $ = Me) : (u($, k), Me = gf(se, $.mode, Me), Me.return = $, $ = Me), U($)) : u($, k);
        }
        return function($, k, se, Me) {
          try {
            jo = 0;
            var Ke = Ua(
              $,
              k,
              se,
              Me
            );
            return Nr = null, Ke;
          } catch (at) {
            if (at === Yo) throw at;
            var qt = t(29, at, null, $.mode);
            return qt.lanes = Me, qt.return = $, qt;
          } finally {
          }
        };
      }
      function yn(s, r) {
        s = hs, T(Ac, s), T(Dr, r), hs = s | r.baseLanes;
      }
      function Yn() {
        T(Ac, hs), T(Dr, Dr.current);
      }
      function ur() {
        hs = Ac.current, y(Dr), y(Ac);
      }
      function ki(s) {
        var r = s.alternate;
        T(gn, gn.current & 1), T(Mi, s), ji === null && (r === null || Dr.current !== null || r.memoizedState !== null) && (ji = s);
      }
      function ua(s) {
        if (s.tag === 22) {
          if (T(gn, gn.current), T(Mi, s), ji === null) {
            var r = s.alternate;
            r !== null && r.memoizedState !== null && (ji = s);
          }
        } else Ri();
      }
      function Ri() {
        T(gn, gn.current), T(Mi, Mi.current);
      }
      function jn(s) {
        y(Mi), ji === s && (ji = null), y(gn);
      }
      function ha(s) {
        for (var r = s; r !== null; ) {
          if (r.tag === 13) {
            var u = r.memoizedState;
            if (u !== null && (u = u.dehydrated, u === null || Cf(u) || Lf(u)))
              return r;
          } else if (r.tag === 19 && r.memoizedProps.revealOrder !== void 0) {
            if ((r.flags & 128) !== 0) return r;
          } else if (r.child !== null) {
            r.child.return = r, r = r.child;
            continue;
          }
          if (r === s) break;
          for (; r.sibling === null; ) {
            if (r.return === null || r.return === s) return null;
            r = r.return;
          }
          r.sibling.return = r.return, r = r.sibling;
        }
        return null;
      }
      function jt() {
        throw Error(i(321));
      }
      function Co(s, r) {
        if (r === null) return !1;
        for (var u = 0; u < r.length && u < s.length; u++)
          if (!ci(s[u], r[u])) return !1;
        return !0;
      }
      function Lo(s, r, u, d, _, M) {
        return Fs = M, St = r, r.memoizedState = null, r.updateQueue = null, r.lanes = 0, ut.H = s === null || s.memoizedState === null ? Ta : Vs, ba = !1, M = u(d, _), ba = !1, Pr && (M = O(
          r,
          u,
          d,
          _
        )), ec(s), M;
      }
      function ec(s) {
        ut.H = Zi;
        var r = Bt !== null && Bt.next !== null;
        if (Fs = 0, hn = Bt = St = null, wc = !1, Zo = 0, Or = null, r) throw Error(i(300));
        s === null || xn || (s = s.dependencies, s !== null && rc(s) && (xn = !0));
      }
      function O(s, r, u, d) {
        St = s;
        var _ = 0;
        do {
          if (Pr && (Or = null), Zo = 0, Pr = !1, 25 <= _) throw Error(i(301));
          if (_ += 1, hn = Bt = null, s.updateQueue != null) {
            var M = s.updateQueue;
            M.lastEffect = null, M.events = null, M.stores = null, M.memoCache != null && (M.memoCache.index = 0);
          }
          ut.H = Aa, M = r(u, d);
        } while (Pr);
        return M;
      }
      function J() {
        var s = ut.H, r = s.useState()[0];
        return r = typeof r.then == "function" ? Qe(r) : r, s = s.useState()[0], (Bt !== null ? Bt.memoizedState : null) !== s && (St.flags |= 1024), r;
      }
      function ie() {
        var s = Rc !== 0;
        return Rc = 0, s;
      }
      function re(s, r, u) {
        r.updateQueue = s.updateQueue, r.flags &= -2053, s.lanes &= ~u;
      }
      function te(s) {
        if (wc) {
          for (s = s.memoizedState; s !== null; ) {
            var r = s.queue;
            r !== null && (r.pending = null), s = s.next;
          }
          wc = !1;
        }
        Fs = 0, hn = Bt = St = null, Pr = !1, Zo = Rc = 0, Or = null;
      }
      function we() {
        var s = {
          memoizedState: null,
          baseState: null,
          baseQueue: null,
          queue: null,
          next: null
        };
        return hn === null ? St.memoizedState = hn = s : hn = hn.next = s, hn;
      }
      function Ue() {
        if (Bt === null) {
          var s = St.alternate;
          s = s !== null ? s.memoizedState : null;
        } else s = Bt.next;
        var r = hn === null ? St.memoizedState : hn.next;
        if (r !== null)
          hn = r, Bt = s;
        else {
          if (s === null)
            throw St.alternate === null ? Error(i(467)) : Error(i(310));
          Bt = s, s = {
            memoizedState: Bt.memoizedState,
            baseState: Bt.baseState,
            baseQueue: Bt.baseQueue,
            queue: Bt.queue,
            next: null
          }, hn === null ? St.memoizedState = hn = s : hn = hn.next = s;
        }
        return hn;
      }
      function Qe(s) {
        var r = Zo;
        return Zo += 1, Or === null && (Or = []), s = $e(Or, s, r), r = St, (hn === null ? r.memoizedState : hn.next) === null && (r = r.alternate, ut.H = r === null || r.memoizedState === null ? Ta : Vs), s;
      }
      function it(s) {
        if (s !== null && typeof s == "object") {
          if (typeof s.then == "function") return Qe(s);
          if (s.$$typeof === Os) return wn(s);
        }
        throw Error(i(438, String(s)));
      }
      function ft(s) {
        var r = null, u = St.updateQueue;
        if (u !== null && (r = u.memoCache), r == null) {
          var d = St.alternate;
          d !== null && (d = d.updateQueue, d !== null && (d = d.memoCache, d != null && (r = {
            data: d.data.map(function(_) {
              return _.slice();
            }),
            index: 0
          })));
        }
        if (r == null && (r = { data: [], index: 0 }), u === null && (u = Gf(), St.updateQueue = u), u.memoCache = r, u = r.data[r.index], u === void 0)
          for (u = r.data[r.index] = Array(s), d = 0; d < s; d++)
            u[d] = nM;
        return r.index++, u;
      }
      function et(s, r) {
        return typeof r == "function" ? r(s) : r;
      }
      function lt(s) {
        var r = Ue();
        return Xt(r, Bt, s);
      }
      function Xt(s, r, u) {
        var d = s.queue;
        if (d === null) throw Error(i(311));
        d.lastRenderedReducer = u;
        var _ = s.baseQueue, M = d.pending;
        if (M !== null) {
          if (_ !== null) {
            var U = _.next;
            _.next = M.next, M.next = U;
          }
          r.baseQueue = _ = M, d.pending = null;
        }
        if (M = s.baseState, _ === null) s.memoizedState = M;
        else {
          r = _.next;
          var B = U = null, Y = null, fe = r, Te = !1;
          do {
            var Oe = fe.lane & -536870913;
            if (Oe !== fe.lane ? (wt & Oe) === Oe : (Fs & Oe) === Oe) {
              var He = fe.revertLane;
              if (He === 0)
                Y !== null && (Y = Y.next = {
                  lane: 0,
                  revertLane: 0,
                  action: fe.action,
                  hasEagerState: fe.hasEagerState,
                  eagerState: fe.eagerState,
                  next: null
                }), Oe === Cr && (Te = !0);
              else if ((Fs & He) === He) {
                fe = fe.next, He === Cr && (Te = !0);
                continue;
              } else
                Oe = {
                  lane: 0,
                  revertLane: fe.revertLane,
                  action: fe.action,
                  hasEagerState: fe.hasEagerState,
                  eagerState: fe.eagerState,
                  next: null
                }, Y === null ? (B = Y = Oe, U = M) : Y = Y.next = Oe, St.lanes |= He, Gs |= He;
              Oe = fe.action, ba && u(M, Oe), M = fe.hasEagerState ? fe.eagerState : u(M, Oe);
            } else
              He = {
                lane: Oe,
                revertLane: fe.revertLane,
                action: fe.action,
                hasEagerState: fe.hasEagerState,
                eagerState: fe.eagerState,
                next: null
              }, Y === null ? (B = Y = He, U = M) : Y = Y.next = He, St.lanes |= Oe, Gs |= Oe;
            fe = fe.next;
          } while (fe !== null && fe !== r);
          if (Y === null ? U = M : Y.next = B, !ci(M, s.memoizedState) && (xn = !0, Te && (u = Lr, u !== null)))
            throw u;
          s.memoizedState = M, s.baseState = U, s.baseQueue = Y, d.lastRenderedState = M;
        }
        return _ === null && (d.lanes = 0), [s.memoizedState, d.dispatch];
      }
      function bn(s) {
        var r = Ue(), u = r.queue;
        if (u === null) throw Error(i(311));
        u.lastRenderedReducer = s;
        var d = u.dispatch, _ = u.pending, M = r.memoizedState;
        if (_ !== null) {
          u.pending = null;
          var U = _ = _.next;
          do
            M = s(M, U.action), U = U.next;
          while (U !== _);
          ci(M, r.memoizedState) || (xn = !0), r.memoizedState = M, r.baseQueue === null && (r.baseState = M), u.lastRenderedState = M;
        }
        return [M, d];
      }
      function an(s, r, u) {
        var d = St, _ = Ue(), M = Ct;
        if (M) {
          if (u === void 0)
            throw Error(i(407));
          u = u();
        } else u = r();
        var U = !ci(
          (Bt || _).memoizedState,
          u
        );
        if (U && (_.memoizedState = u, xn = !0), _ = _.queue, Uh(gt.bind(null, d, _, s), [
          s
        ]), _.getSnapshot !== r || U || hn !== null && hn.memoizedState.tag & 1) {
          if (d.flags |= 2048, pr(
            9,
            Ft.bind(
              null,
              d,
              _,
              u,
              r
            ),
            { destroy: void 0 },
            null
          ), Vt === null) throw Error(i(349));
          M || (Fs & 60) !== 0 || gi(d, r, u);
        }
        return u;
      }
      function gi(s, r, u) {
        s.flags |= 16384, s = { getSnapshot: r, value: u }, r = St.updateQueue, r === null ? (r = Gf(), St.updateQueue = r, r.stores = [s]) : (u = r.stores, u === null ? r.stores = [s] : u.push(s));
      }
      function Ft(s, r, u, d) {
        r.value = u, r.getSnapshot = d, hr(r) && kt(s);
      }
      function gt(s, r, u) {
        return u(function() {
          hr(r) && kt(s);
        });
      }
      function hr(s) {
        var r = s.getSnapshot;
        s = s.value;
        try {
          var u = r();
          return !ci(s, u);
        } catch {
          return !0;
        }
      }
      function kt(s) {
        var r = Ge(s, 2);
        r !== null && Hn(r, s, 2);
      }
      function Ci(s) {
        var r = we();
        if (typeof s == "function") {
          var u = s;
          if (s = u(), ba) {
            Q(!0);
            try {
              u();
            } finally {
              Q(!1);
            }
          }
        }
        return r.memoizedState = r.baseState = s, r.queue = {
          pending: null,
          lanes: 0,
          dispatch: null,
          lastRenderedReducer: et,
          lastRenderedState: s
        }, r;
      }
      function Uo(s, r, u, d) {
        return s.baseState = u, Xt(
          s,
          Bt,
          typeof d == "function" ? d : et
        );
      }
      function fa(s, r, u, d, _) {
        if (sc(s)) throw Error(i(485));
        if (s = r.action, s !== null) {
          var M = {
            payload: _,
            action: s,
            next: null,
            isTransition: !0,
            status: "pending",
            value: null,
            reason: null,
            listeners: [],
            then: function(U) {
              M.listeners.push(U);
            }
          };
          ut.T !== null ? u(!0) : M.isTransition = !1, d(M), u = r.pending, u === null ? (M.next = r.pending = M, fr(r, M)) : (M.next = u.next, r.pending = u.next = M);
        }
      }
      function fr(s, r) {
        var u = r.action, d = r.payload, _ = s.state;
        if (r.isTransition) {
          var M = ut.T, U = {};
          ut.T = U;
          try {
            var B = u(_, d), Y = ut.S;
            Y !== null && Y(U, B), mn(s, r, B);
          } catch (fe) {
            da(s, r, fe);
          } finally {
            ut.T = M;
          }
        } else
          try {
            M = u(_, d), mn(s, r, M);
          } catch (fe) {
            da(s, r, fe);
          }
      }
      function mn(s, r, u) {
        u !== null && typeof u == "object" && typeof u.then == "function" ? u.then(
          function(d) {
            qi(s, r, d);
          },
          function(d) {
            return da(s, r, d);
          }
        ) : qi(s, r, u);
      }
      function qi(s, r, u) {
        r.status = "fulfilled", r.value = u, Bn(r), s.state = u, r = s.pending, r !== null && (u = r.next, u === r ? s.pending = null : (u = u.next, r.next = u, fr(s, u)));
      }
      function da(s, r, u) {
        var d = s.pending;
        if (s.pending = null, d !== null) {
          d = d.next;
          do
            r.status = "rejected", r.reason = u, Bn(r), r = r.next;
          while (r !== d);
        }
        s.action = null;
      }
      function Bn(s) {
        s = s.listeners;
        for (var r = 0; r < s.length; r++) (0, s[r])();
      }
      function dr(s, r) {
        return r;
      }
      function tc(s, r) {
        if (Ct) {
          var u = Vt.formState;
          if (u !== null) {
            e: {
              var d = St;
              if (Ct) {
                if (Ln) {
                  var _ = YM(
                    Ln,
                    Yi
                  );
                  if (_) {
                    Ln = Ov(_), d = jM(_);
                    break e;
                  }
                }
                je(d);
              }
              d = !1;
            }
            d && (r = u[0]);
          }
        }
        u = we(), u.memoizedState = u.baseState = r, d = {
          pending: null,
          lanes: 0,
          dispatch: null,
          lastRenderedReducer: dr,
          lastRenderedState: r
        }, u.queue = d, u = rg.bind(
          null,
          St,
          d
        ), d.dispatch = u, d = Ci(!1);
        var M = Oh.bind(
          null,
          St,
          !1,
          d.queue
        );
        return d = we(), _ = {
          state: r,
          dispatch: null,
          action: s,
          pending: null
        }, d.queue = _, u = fa.bind(
          null,
          St,
          _,
          M,
          u
        ), _.dispatch = u, d.memoizedState = s, [r, u, !1];
      }
      function No(s) {
        var r = Ue();
        return km(r, Bt, s);
      }
      function km(s, r, u) {
        r = Xt(
          s,
          r,
          dr
        )[0], s = lt(et)[0], r = typeof r == "object" && r !== null && typeof r.then == "function" ? Qe(r) : r;
        var d = Ue(), _ = d.queue, M = _.dispatch;
        return u !== d.memoizedState && (St.flags |= 2048, pr(
          9,
          DS.bind(null, _, u),
          { destroy: void 0 },
          null
        )), [r, M, s];
      }
      function DS(s, r) {
        s.action = r;
      }
      function qm(s) {
        var r = Ue(), u = Bt;
        if (u !== null)
          return km(r, u, s);
        Ue(), r = r.memoizedState, u = Ue();
        var d = u.queue.dispatch;
        return u.memoizedState = s, [r, d, !1];
      }
      function pr(s, r, u, d) {
        return s = { tag: s, create: r, inst: u, deps: d, next: null }, r = St.updateQueue, r === null && (r = Gf(), St.updateQueue = r), u = r.lastEffect, u === null ? r.lastEffect = s.next = s : (d = u.next, u.next = s, s.next = d, r.lastEffect = s), s;
      }
      function Ym() {
        return Ue().memoizedState;
      }
      function nc(s, r, u, d) {
        var _ = we();
        St.flags |= s, _.memoizedState = pr(
          1 | r,
          u,
          { destroy: void 0 },
          d === void 0 ? null : d
        );
      }
      function ic(s, r, u, d) {
        var _ = Ue();
        d = d === void 0 ? null : d;
        var M = _.memoizedState.inst;
        Bt !== null && d !== null && Co(d, Bt.memoizedState.deps) ? _.memoizedState = pr(r, u, M, d) : (St.flags |= s, _.memoizedState = pr(1 | r, u, M, d));
      }
      function jm(s, r) {
        nc(8390656, 8, s, r);
      }
      function Uh(s, r) {
        ic(2048, 8, s, r);
      }
      function Zm(s, r) {
        return ic(4, 2, s, r);
      }
      function Km(s, r) {
        return ic(4, 4, s, r);
      }
      function Jm(s, r) {
        if (typeof r == "function") {
          s = s();
          var u = r(s);
          return function() {
            typeof u == "function" ? u() : r(null);
          };
        }
        if (r != null)
          return s = s(), r.current = s, function() {
            r.current = null;
          };
      }
      function Qm(s, r, u) {
        u = u != null ? u.concat([s]) : null, ic(
          4,
          4,
          Jm.bind(null, r, s),
          u
        );
      }
      function Nh() {
      }
      function $m(s, r) {
        var u = Ue();
        r = r === void 0 ? null : r;
        var d = u.memoizedState;
        return r !== null && Co(r, d[1]) ? d[0] : (u.memoizedState = [s, r], s);
      }
      function eg(s, r) {
        var u = Ue();
        r = r === void 0 ? null : r;
        var d = u.memoizedState;
        if (r !== null && Co(r, d[1]))
          return d[0];
        if (d = s(), ba) {
          Q(!0);
          try {
            s();
          } finally {
            Q(!1);
          }
        }
        return u.memoizedState = [d, r], d;
      }
      function Dh(s, r, u) {
        return u === void 0 || (Fs & 1073741824) !== 0 ? s.memoizedState = r : (s.memoizedState = u, s = Kg(), St.lanes |= s, Gs |= s, u);
      }
      function tg(s, r, u, d) {
        return ci(u, r) ? u : Dr.current !== null ? (s = Dh(s, u, d), ci(s, r) || (xn = !0), s) : (Fs & 42) === 0 ? (xn = !0, s.memoizedState = u) : (s = Kg(), St.lanes |= s, Gs |= s, r);
      }
      function ng(s, r, u, d, _) {
        var M = xa();
        Kn(
          M !== 0 && 8 > M ? M : 8
        );
        var U = ut.T, B = {};
        ut.T = B, Oh(s, !1, r, u);
        try {
          var Y = _(), fe = ut.S;
          if (fe !== null && fe(B, Y), Y !== null && typeof Y == "object" && typeof Y.then == "function") {
            var Te = ye(
              Y,
              d
            );
            Do(
              s,
              r,
              Te,
              ai(s)
            );
          } else
            Do(
              s,
              r,
              d,
              ai(s)
            );
        } catch (Oe) {
          Do(
            s,
            r,
            { then: function() {
            }, status: "rejected", reason: Oe },
            ai()
          );
        } finally {
          Kn(M), ut.T = U;
        }
      }
      function ig(s) {
        var r = s.memoizedState;
        if (r !== null) return r;
        r = {
          memoizedState: Sr,
          baseState: Sr,
          baseQueue: null,
          queue: {
            pending: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: et,
            lastRenderedState: Sr
          },
          next: null
        };
        var u = {};
        return r.next = {
          memoizedState: u,
          baseState: u,
          baseQueue: null,
          queue: {
            pending: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: et,
            lastRenderedState: u
          },
          next: null
        }, s.memoizedState = r, s = s.alternate, s !== null && (s.memoizedState = r), r;
      }
      function Ph() {
        return wn(Sa);
      }
      function sg() {
        return Ue().memoizedState;
      }
      function ag() {
        return Ue().memoizedState;
      }
      function PS(s) {
        for (var r = s.return; r !== null; ) {
          switch (r.tag) {
            case 24:
            case 3:
              var u = ai();
              s = Je(u);
              var d = Xe(r, s, u);
              d !== null && (Hn(d, r, u), Be(d, r, u)), r = { cache: jh() }, s.payload = r;
              return;
          }
          r = r.return;
        }
      }
      function OS(s, r, u) {
        var d = ai();
        u = {
          lane: d,
          revertLane: 0,
          action: u,
          hasEagerState: !1,
          eagerState: null,
          next: null
        }, sc(s) ? og(r, u) : (u = he(s, r, u, d), u !== null && (Hn(u, s, d), lg(u, r, d)));
      }
      function rg(s, r, u) {
        var d = ai();
        Do(s, r, u, d);
      }
      function Do(s, r, u, d) {
        var _ = {
          lane: d,
          revertLane: 0,
          action: u,
          hasEagerState: !1,
          eagerState: null,
          next: null
        };
        if (sc(s)) og(r, _);
        else {
          var M = s.alternate;
          if (s.lanes === 0 && (M === null || M.lanes === 0) && (M = r.lastRenderedReducer, M !== null))
            try {
              var U = r.lastRenderedState, B = M(U, u);
              if (_.hasEagerState = !0, _.eagerState = B, ci(B, U))
                return Se(s, r, _, 0), Vt === null && ue(), !1;
            } catch {
            } finally {
            }
          if (u = he(s, r, _, d), u !== null)
            return Hn(u, s, d), lg(u, r, d), !0;
        }
        return !1;
      }
      function Oh(s, r, u, d) {
        if (d = {
          lane: 2,
          revertLane: ze(),
          action: d,
          hasEagerState: !1,
          eagerState: null,
          next: null
        }, sc(s)) {
          if (r) throw Error(i(479));
        } else
          r = he(
            s,
            u,
            d,
            2
          ), r !== null && Hn(r, s, 2);
      }
      function sc(s) {
        var r = s.alternate;
        return s === St || r !== null && r === St;
      }
      function og(s, r) {
        Pr = wc = !0;
        var u = s.pending;
        u === null ? r.next = r : (r.next = u.next, u.next = r), s.pending = r;
      }
      function lg(s, r, u) {
        if ((u & 4194176) !== 0) {
          var d = r.lanes;
          d &= s.pendingLanes, u |= d, r.lanes = u, z(s, u);
        }
      }
      function Ih(s, r, u, d) {
        r = s.memoizedState, u = u(d, r), u = u == null ? r : yf({}, r, u), s.memoizedState = u, s.lanes === 0 && (s.updateQueue.baseState = u);
      }
      function cg(s, r, u, d, _, M, U) {
        return s = s.stateNode, typeof s.shouldComponentUpdate == "function" ? s.shouldComponentUpdate(d, M, U) : r.prototype && r.prototype.isPureReactComponent ? !G(u, d) || !G(_, M) : !0;
      }
      function ug(s, r, u, d) {
        s = r.state, typeof r.componentWillReceiveProps == "function" && r.componentWillReceiveProps(u, d), typeof r.UNSAFE_componentWillReceiveProps == "function" && r.UNSAFE_componentWillReceiveProps(u, d), r.state !== s && Wf.enqueueReplaceState(r, r.state, null);
      }
      function pa(s, r) {
        var u = r;
        if ("ref" in r) {
          u = {};
          for (var d in r)
            d !== "ref" && (u[d] = r[d]);
        }
        if (s = s.defaultProps) {
          u === r && (u = yf({}, u));
          for (var _ in s)
            u[_] === void 0 && (u[_] = s[_]);
        }
        return u;
      }
      function ac(s, r) {
        try {
          var u = s.onUncaughtError;
          u(r.value, { componentStack: r.stack });
        } catch (d) {
          setTimeout(function() {
            throw d;
          });
        }
      }
      function hg(s, r, u) {
        try {
          var d = s.onCaughtError;
          d(u.value, {
            componentStack: u.stack,
            errorBoundary: r.tag === 1 ? r.stateNode : null
          });
        } catch (_) {
          setTimeout(function() {
            throw _;
          });
        }
      }
      function zh(s, r, u) {
        return u = Je(u), u.tag = 3, u.payload = { element: null }, u.callback = function() {
          ac(s, r);
        }, u;
      }
      function fg(s) {
        return s = Je(s), s.tag = 3, s;
      }
      function dg(s, r, u, d) {
        var _ = u.type.getDerivedStateFromError;
        if (typeof _ == "function") {
          var M = d.value;
          s.payload = function() {
            return _(M);
          }, s.callback = function() {
            hg(r, u, d);
          };
        }
        var U = u.stateNode;
        U !== null && typeof U.componentDidCatch == "function" && (s.callback = function() {
          hg(r, u, d), typeof _ != "function" && (Ws === null ? Ws = /* @__PURE__ */ new Set([this]) : Ws.add(this));
          var B = d.stack;
          this.componentDidCatch(d.value, {
            componentStack: B !== null ? B : ""
          });
        });
      }
      function IS(s, r, u, d, _) {
        if (u.flags |= 32768, d !== null && typeof d == "object" && typeof d.then == "function") {
          if (r = u.alternate, r !== null && Oo(
            r,
            u,
            _,
            !0
          ), u = Mi.current, u !== null) {
            switch (u.tag) {
              case 13:
                return ji === null ? ff() : u.alternate === null && en === 0 && (en = 3), u.flags &= -257, u.flags |= 65536, u.lanes = _, d === Tc ? u.flags |= 16384 : (r = u.updateQueue, r === null ? u.updateQueue = /* @__PURE__ */ new Set([d]) : r.add(d), pf(s, d, _)), !1;
              case 22:
                return u.flags |= 65536, d === Tc ? u.flags |= 16384 : (r = u.updateQueue, r === null ? (r = {
                  transitions: null,
                  markerInstances: null,
                  retryQueue: /* @__PURE__ */ new Set([d])
                }, u.updateQueue = r) : (u = r.retryQueue, u === null ? r.retryQueue = /* @__PURE__ */ new Set([d]) : u.add(d)), pf(s, d, _)), !1;
            }
            throw Error(i(435, u.tag));
          }
          return pf(s, d, _), ff(), !1;
        }
        if (Ct)
          return r = Mi.current, r !== null ? ((r.flags & 65536) === 0 && (r.flags |= 256), r.flags |= 65536, r.lanes = _, d !== Of && (s = Error(i(422), { cause: d }), Ee(
            K(s, u)
          ))) : (d !== Of && (r = Error(i(423), {
            cause: d
          }), Ee(
            K(r, u)
          )), s = s.current.alternate, s.flags |= 65536, _ &= -_, s.lanes |= _, d = K(d, u), _ = zh(
            s.stateNode,
            d,
            _
          ), V(s, _), en !== 4 && (en = 2)), !1;
        var M = Error(i(520), { cause: d });
        if (M = K(M, u), Jo === null ? Jo = [M] : Jo.push(M), en !== 4 && (en = 2), r === null) return !0;
        d = K(d, u), u = r;
        do {
          switch (u.tag) {
            case 3:
              return u.flags |= 65536, s = _ & -_, u.lanes |= s, s = zh(u.stateNode, d, s), V(u, s), !1;
            case 1:
              if (r = u.type, M = u.stateNode, (u.flags & 128) === 0 && (typeof r.getDerivedStateFromError == "function" || M !== null && typeof M.componentDidCatch == "function" && (Ws === null || !Ws.has(
                M
              ))))
                return u.flags |= 65536, _ &= -_, u.lanes |= _, _ = fg(_), dg(
                  _,
                  s,
                  u,
                  d
                ), V(u, _), !1;
          }
          u = u.return;
        } while (u !== null);
        return !1;
      }
      function Tn(s, r, u, d) {
        r.child = s === null ? Zv(r, null, u, d) : Ea(
          r,
          s.child,
          u,
          d
        );
      }
      function pg(s, r, u, d, _) {
        u = u.render;
        var M = r.ref;
        if ("ref" in d) {
          var U = {};
          for (var B in d)
            B !== "ref" && (U[B] = d[B]);
        } else U = d;
        return ma(r), d = Lo(
          s,
          r,
          u,
          U,
          M,
          _
        ), B = ie(), s !== null && !xn ? (re(s, r, _), ts(s, r, _)) : (Ct && B && ge(r), r.flags |= 1, Tn(s, r, d, _), r.child);
      }
      function mg(s, r, u, d, _) {
        if (s === null) {
          var M = u.type;
          return typeof M == "function" && !mf(M) && M.defaultProps === void 0 && u.compare === null ? (r.tag = 15, r.type = M, gg(
            s,
            r,
            M,
            d,
            _
          )) : (s = dc(
            u.type,
            null,
            d,
            r,
            r.mode,
            _
          ), s.ref = r.ref, s.return = r, r.child = s);
        }
        if (M = s.child, !kh(s, _)) {
          var U = M.memoizedProps;
          if (u = u.compare, u = u !== null ? u : G, u(U, d) && s.ref === r.ref)
            return ts(
              s,
              r,
              _
            );
        }
        return r.flags |= 1, s = Ps(M, d), s.ref = r.ref, s.return = r, r.child = s;
      }
      function gg(s, r, u, d, _) {
        if (s !== null) {
          var M = s.memoizedProps;
          if (G(M, d) && s.ref === r.ref)
            if (xn = !1, r.pendingProps = d = M, kh(s, _))
              (s.flags & 131072) !== 0 && (xn = !0);
            else
              return r.lanes = s.lanes, ts(s, r, _);
        }
        return Bh(
          s,
          r,
          u,
          d,
          _
        );
      }
      function vg(s, r, u) {
        var d = r.pendingProps, _ = d.children, M = (r.stateNode._pendingVisibility & 2) !== 0, U = s !== null ? s.memoizedState : null;
        if (Po(s, r), d.mode === "hidden" || M) {
          if ((r.flags & 128) !== 0) {
            if (d = U !== null ? U.baseLanes | u : u, s !== null) {
              for (_ = r.child = s.child, M = 0; _ !== null; )
                M = M | _.lanes | _.childLanes, _ = _.sibling;
              r.childLanes = M & ~d;
            } else r.childLanes = 0, r.child = null;
            return _g(
              s,
              r,
              d,
              u
            );
          }
          if ((u & 536870912) !== 0)
            r.memoizedState = { baseLanes: 0, cachePool: null }, s !== null && lc(
              r,
              U !== null ? U.cachePool : null
            ), U !== null ? yn(r, U) : Yn(), ua(r);
          else
            return r.lanes = r.childLanes = 536870912, _g(
              s,
              r,
              U !== null ? U.baseLanes | u : u,
              u
            );
        } else
          U !== null ? (lc(r, U.cachePool), yn(r, U), Ri(), r.memoizedState = null) : (s !== null && lc(r, null), Yn(), Ri());
        return Tn(s, r, _, u), r.child;
      }
      function _g(s, r, u, d) {
        var _ = Zh();
        return _ = _ === null ? null : {
          parent: as ? Qt._currentValue : Qt._currentValue2,
          pool: _
        }, r.memoizedState = {
          baseLanes: u,
          cachePool: _
        }, s !== null && lc(r, null), Yn(), ua(r), s !== null && Oo(s, r, d, !0), null;
      }
      function Po(s, r) {
        var u = r.ref;
        if (u === null)
          s !== null && s.ref !== null && (r.flags |= 2097664);
        else {
          if (typeof u != "function" && typeof u != "object")
            throw Error(i(284));
          (s === null || s.ref !== u) && (r.flags |= 2097664);
        }
      }
      function Bh(s, r, u, d, _) {
        return ma(r), u = Lo(
          s,
          r,
          u,
          d,
          void 0,
          _
        ), d = ie(), s !== null && !xn ? (re(s, r, _), ts(s, r, _)) : (Ct && d && ge(r), r.flags |= 1, Tn(s, r, u, _), r.child);
      }
      function yg(s, r, u, d, _, M) {
        return ma(r), r.updateQueue = null, u = O(
          r,
          d,
          u,
          _
        ), ec(s), d = ie(), s !== null && !xn ? (re(s, r, M), ts(s, r, M)) : (Ct && d && ge(r), r.flags |= 1, Tn(s, r, u, M), r.child);
      }
      function xg(s, r, u, d, _) {
        if (ma(r), r.stateNode === null) {
          var M = Er, U = u.contextType;
          typeof U == "object" && U !== null && (M = wn(U)), M = new u(d, M), r.memoizedState = M.state !== null && M.state !== void 0 ? M.state : null, M.updater = Wf, r.stateNode = M, M._reactInternals = r, M = r.stateNode, M.props = d, M.state = r.memoizedState, M.refs = {}, Mt(r), U = u.contextType, M.context = typeof U == "object" && U !== null ? wn(U) : Er, M.state = r.memoizedState, U = u.getDerivedStateFromProps, typeof U == "function" && (Ih(
            r,
            u,
            U,
            d
          ), M.state = r.memoizedState), typeof u.getDerivedStateFromProps == "function" || typeof M.getSnapshotBeforeUpdate == "function" || typeof M.UNSAFE_componentWillMount != "function" && typeof M.componentWillMount != "function" || (U = M.state, typeof M.componentWillMount == "function" && M.componentWillMount(), typeof M.UNSAFE_componentWillMount == "function" && M.UNSAFE_componentWillMount(), U !== M.state && Wf.enqueueReplaceState(
            M,
            M.state,
            null
          ), De(r, d, M, _), pe(), M.state = r.memoizedState), typeof M.componentDidMount == "function" && (r.flags |= 4194308), d = !0;
        } else if (s === null) {
          M = r.stateNode;
          var B = r.memoizedProps, Y = pa(u, B);
          M.props = Y;
          var fe = M.context, Te = u.contextType;
          U = Er, typeof Te == "object" && Te !== null && (U = wn(Te));
          var Oe = u.getDerivedStateFromProps;
          Te = typeof Oe == "function" || typeof M.getSnapshotBeforeUpdate == "function", B = r.pendingProps !== B, Te || typeof M.UNSAFE_componentWillReceiveProps != "function" && typeof M.componentWillReceiveProps != "function" || (B || fe !== U) && ug(
            r,
            M,
            d,
            U
          ), Hs = !1;
          var He = r.memoizedState;
          M.state = He, De(r, d, M, _), pe(), fe = r.memoizedState, B || He !== fe || Hs ? (typeof Oe == "function" && (Ih(
            r,
            u,
            Oe,
            d
          ), fe = r.memoizedState), (Y = Hs || cg(
            r,
            u,
            Y,
            d,
            He,
            fe,
            U
          )) ? (Te || typeof M.UNSAFE_componentWillMount != "function" && typeof M.componentWillMount != "function" || (typeof M.componentWillMount == "function" && M.componentWillMount(), typeof M.UNSAFE_componentWillMount == "function" && M.UNSAFE_componentWillMount()), typeof M.componentDidMount == "function" && (r.flags |= 4194308)) : (typeof M.componentDidMount == "function" && (r.flags |= 4194308), r.memoizedProps = d, r.memoizedState = fe), M.props = d, M.state = fe, M.context = U, d = Y) : (typeof M.componentDidMount == "function" && (r.flags |= 4194308), d = !1);
        } else {
          M = r.stateNode, ht(s, r), U = r.memoizedProps, Te = pa(u, U), M.props = Te, Oe = r.pendingProps, He = M.context, fe = u.contextType, Y = Er, typeof fe == "object" && fe !== null && (Y = wn(fe)), B = u.getDerivedStateFromProps, (fe = typeof B == "function" || typeof M.getSnapshotBeforeUpdate == "function") || typeof M.UNSAFE_componentWillReceiveProps != "function" && typeof M.componentWillReceiveProps != "function" || (U !== Oe || He !== Y) && ug(
            r,
            M,
            d,
            Y
          ), Hs = !1, He = r.memoizedState, M.state = He, De(r, d, M, _), pe();
          var dt = r.memoizedState;
          U !== Oe || He !== dt || Hs || s !== null && s.dependencies !== null && rc(s.dependencies) ? (typeof B == "function" && (Ih(
            r,
            u,
            B,
            d
          ), dt = r.memoizedState), (Te = Hs || cg(
            r,
            u,
            Te,
            d,
            He,
            dt,
            Y
          ) || s !== null && s.dependencies !== null && rc(s.dependencies)) ? (fe || typeof M.UNSAFE_componentWillUpdate != "function" && typeof M.componentWillUpdate != "function" || (typeof M.componentWillUpdate == "function" && M.componentWillUpdate(d, dt, Y), typeof M.UNSAFE_componentWillUpdate == "function" && M.UNSAFE_componentWillUpdate(
            d,
            dt,
            Y
          )), typeof M.componentDidUpdate == "function" && (r.flags |= 4), typeof M.getSnapshotBeforeUpdate == "function" && (r.flags |= 1024)) : (typeof M.componentDidUpdate != "function" || U === s.memoizedProps && He === s.memoizedState || (r.flags |= 4), typeof M.getSnapshotBeforeUpdate != "function" || U === s.memoizedProps && He === s.memoizedState || (r.flags |= 1024), r.memoizedProps = d, r.memoizedState = dt), M.props = d, M.state = dt, M.context = Y, d = Te) : (typeof M.componentDidUpdate != "function" || U === s.memoizedProps && He === s.memoizedState || (r.flags |= 4), typeof M.getSnapshotBeforeUpdate != "function" || U === s.memoizedProps && He === s.memoizedState || (r.flags |= 1024), d = !1);
        }
        return M = d, Po(s, r), d = (r.flags & 128) !== 0, M || d ? (M = r.stateNode, u = d && typeof u.getDerivedStateFromError != "function" ? null : M.render(), r.flags |= 1, s !== null && d ? (r.child = Ea(
          r,
          s.child,
          null,
          _
        ), r.child = Ea(
          r,
          null,
          u,
          _
        )) : Tn(s, r, u, _), r.memoizedState = M.state, s = r.child) : s = ts(
          s,
          r,
          _
        ), s;
      }
      function Sg(s, r, u, d) {
        return F(), r.flags |= 256, Tn(s, r, u, d), r.child;
      }
      function Hh(s) {
        return { baseLanes: s, cachePool: wg() };
      }
      function Fh(s, r, u) {
        return s = s !== null ? s.childLanes & ~u : 0, r && (s |= Ei), s;
      }
      function Mg(s, r, u) {
        var d = r.pendingProps, _ = !1, M = (r.flags & 128) !== 0, U;
        if ((U = M) || (U = s !== null && s.memoizedState === null ? !1 : (gn.current & 2) !== 0), U && (_ = !0, r.flags &= -129), U = (r.flags & 32) !== 0, r.flags &= -33, s === null) {
          if (Ct) {
            if (_ ? ki(r) : Ri(), Ct) {
              var B = Ln, Y;
              (Y = B) && (B = $M(
                B,
                Yi
              ), B !== null ? (r.memoizedState = {
                dehydrated: B,
                treeContext: Ma !== null ? { id: rs, overflow: os } : null,
                retryLane: 536870912
              }, Y = t(18, null, null, 0), Y.stateNode = B, Y.return = r, r.child = Y, Fn = r, Ln = null, Y = !0) : Y = !1), Y || je(r);
            }
            if (B = r.memoizedState, B !== null && (B = B.dehydrated, B !== null))
              return Lf(B) ? r.lanes = 16 : r.lanes = 536870912, null;
            jn(r);
          }
          return B = d.children, d = d.fallback, _ ? (Ri(), _ = r.mode, B = Gh(
            { mode: "hidden", children: B },
            _
          ), d = ya(
            d,
            _,
            u,
            null
          ), B.return = r, d.return = r, B.sibling = d, r.child = B, _ = r.child, _.memoizedState = Hh(u), _.childLanes = Fh(
            s,
            U,
            u
          ), r.memoizedState = Xf, d) : (ki(r), Vh(r, B));
        }
        if (Y = s.memoizedState, Y !== null && (B = Y.dehydrated, B !== null)) {
          if (M)
            r.flags & 256 ? (ki(r), r.flags &= -257, r = Wh(
              s,
              r,
              u
            )) : r.memoizedState !== null ? (Ri(), r.child = s.child, r.flags |= 128, r = null) : (Ri(), _ = d.fallback, B = r.mode, d = Gh(
              { mode: "visible", children: d.children },
              B
            ), _ = ya(
              _,
              B,
              u,
              null
            ), _.flags |= 2, d.return = r, _.return = r, d.sibling = _, r.child = d, Ea(
              r,
              s.child,
              null,
              u
            ), d = r.child, d.memoizedState = Hh(u), d.childLanes = Fh(
              s,
              U,
              u
            ), r.memoizedState = Xf, r = _);
          else if (ki(r), Lf(B))
            U = kM(B).digest, d = Error(i(419)), d.stack = "", d.digest = U, Ee({ value: d, source: null, stack: null }), r = Wh(
              s,
              r,
              u
            );
          else if (xn || Oo(
            s,
            r,
            u,
            !1
          ), U = (u & s.childLanes) !== 0, xn || U) {
            if (U = Vt, U !== null) {
              if (d = u & -u, (d & 42) !== 0) d = 1;
              else
                switch (d) {
                  case 2:
                    d = 1;
                    break;
                  case 8:
                    d = 4;
                    break;
                  case 32:
                    d = 16;
                    break;
                  case 128:
                  case 256:
                  case 512:
                  case 1024:
                  case 2048:
                  case 4096:
                  case 8192:
                  case 16384:
                  case 32768:
                  case 65536:
                  case 131072:
                  case 262144:
                  case 524288:
                  case 1048576:
                  case 2097152:
                  case 4194304:
                  case 8388608:
                  case 16777216:
                  case 33554432:
                    d = 64;
                    break;
                  case 268435456:
                    d = 134217728;
                    break;
                  default:
                    d = 0;
                }
              if (d = (d & (U.suspendedLanes | u)) !== 0 ? 0 : d, d !== 0 && d !== Y.retryLane)
                throw Y.retryLane = d, Ge(s, d), Hn(U, s, d), Jv;
            }
            Cf(B) || ff(), r = Wh(
              s,
              r,
              u
            );
          } else
            Cf(B) ? (r.flags |= 128, r.child = s.child, r = jS.bind(
              null,
              s
            ), qM(B, r), r = null) : (s = Y.treeContext, vi && (Ln = KM(B), Fn = r, Ct = !0, Ni = null, Yi = !1, s !== null && (yi[xi++] = rs, yi[xi++] = os, yi[xi++] = Ma, rs = s.id, os = s.overflow, Ma = r)), r = Vh(
              r,
              d.children
            ), r.flags |= 4096);
          return r;
        }
        return _ ? (Ri(), _ = d.fallback, B = r.mode, Y = s.child, M = Y.sibling, d = Ps(Y, {
          mode: "hidden",
          children: d.children
        }), d.subtreeFlags = Y.subtreeFlags & 31457280, M !== null ? _ = Ps(M, _) : (_ = ya(
          _,
          B,
          u,
          null
        ), _.flags |= 2), _.return = r, d.return = r, d.sibling = _, r.child = d, d = _, _ = r.child, B = s.child.memoizedState, B === null ? B = Hh(u) : (Y = B.cachePool, Y !== null ? (M = as ? Qt._currentValue : Qt._currentValue2, Y = Y.parent !== M ? { parent: M, pool: M } : Y) : Y = wg(), B = {
          baseLanes: B.baseLanes | u,
          cachePool: Y
        }), _.memoizedState = B, _.childLanes = Fh(
          s,
          U,
          u
        ), r.memoizedState = Xf, d) : (ki(r), u = s.child, s = u.sibling, u = Ps(u, {
          mode: "visible",
          children: d.children
        }), u.return = r, u.sibling = null, s !== null && (U = r.deletions, U === null ? (r.deletions = [s], r.flags |= 16) : U.push(s)), r.child = u, r.memoizedState = null, u);
      }
      function Vh(s, r) {
        return r = Gh(
          { mode: "visible", children: r },
          s.mode
        ), r.return = s, s.child = r;
      }
      function Gh(s, r) {
        return fv(s, r, 0, null);
      }
      function Wh(s, r, u) {
        return Ea(r, s.child, null, u), s = Vh(
          r,
          r.pendingProps.children
        ), s.flags |= 2, r.memoizedState = null, s;
      }
      function Eg(s, r, u) {
        s.lanes |= r;
        var d = s.alternate;
        d !== null && (d.lanes |= r), qh(s.return, r, u);
      }
      function Xh(s, r, u, d, _) {
        var M = s.memoizedState;
        M === null ? s.memoizedState = {
          isBackwards: r,
          rendering: null,
          renderingStartTime: 0,
          last: d,
          tail: u,
          tailMode: _
        } : (M.isBackwards = r, M.rendering = null, M.renderingStartTime = 0, M.last = d, M.tail = u, M.tailMode = _);
      }
      function bg(s, r, u) {
        var d = r.pendingProps, _ = d.revealOrder, M = d.tail;
        if (Tn(s, r, d.children, u), d = gn.current, (d & 2) !== 0)
          d = d & 1 | 2, r.flags |= 128;
        else {
          if (s !== null && (s.flags & 128) !== 0)
            e: for (s = r.child; s !== null; ) {
              if (s.tag === 13)
                s.memoizedState !== null && Eg(s, u, r);
              else if (s.tag === 19)
                Eg(s, u, r);
              else if (s.child !== null) {
                s.child.return = s, s = s.child;
                continue;
              }
              if (s === r) break e;
              for (; s.sibling === null; ) {
                if (s.return === null || s.return === r)
                  break e;
                s = s.return;
              }
              s.sibling.return = s.return, s = s.sibling;
            }
          d &= 1;
        }
        switch (T(gn, d), _) {
          case "forwards":
            for (u = r.child, _ = null; u !== null; )
              s = u.alternate, s !== null && ha(s) === null && (_ = u), u = u.sibling;
            u = _, u === null ? (_ = r.child, r.child = null) : (_ = u.sibling, u.sibling = null), Xh(
              r,
              !1,
              _,
              u,
              M
            );
            break;
          case "backwards":
            for (u = null, _ = r.child, r.child = null; _ !== null; ) {
              if (s = _.alternate, s !== null && ha(s) === null) {
                r.child = _;
                break;
              }
              s = _.sibling, _.sibling = u, u = _, _ = s;
            }
            Xh(
              r,
              !0,
              u,
              null,
              M
            );
            break;
          case "together":
            Xh(r, !1, null, null, void 0);
            break;
          default:
            r.memoizedState = null;
        }
        return r.child;
      }
      function ts(s, r, u) {
        if (s !== null && (r.dependencies = s.dependencies), Gs |= r.lanes, (u & r.childLanes) === 0)
          if (s !== null) {
            if (Oo(
              s,
              r,
              u,
              !1
            ), (u & r.childLanes) === 0)
              return null;
          } else return null;
        if (s !== null && r.child !== s.child)
          throw Error(i(153));
        if (r.child !== null) {
          for (s = r.child, u = Ps(s, s.pendingProps), r.child = u, u.return = r; s.sibling !== null; )
            s = s.sibling, u = u.sibling = Ps(s, s.pendingProps), u.return = r;
          u.sibling = null;
        }
        return r.child;
      }
      function kh(s, r) {
        return (s.lanes & r) !== 0 ? !0 : (s = s.dependencies, !!(s !== null && rc(s)));
      }
      function zS(s, r, u) {
        switch (r.tag) {
          case 3:
            ce(
              r,
              r.stateNode.containerInfo
            ), Ls(r, Qt, s.memoizedState.cache), F();
            break;
          case 27:
          case 5:
            Ve(r);
            break;
          case 4:
            ce(
              r,
              r.stateNode.containerInfo
            );
            break;
          case 10:
            Ls(
              r,
              r.type,
              r.memoizedProps.value
            );
            break;
          case 13:
            var d = r.memoizedState;
            if (d !== null)
              return d.dehydrated !== null ? (ki(r), r.flags |= 128, null) : (u & r.child.childLanes) !== 0 ? Mg(
                s,
                r,
                u
              ) : (ki(r), s = ts(
                s,
                r,
                u
              ), s !== null ? s.sibling : null);
            ki(r);
            break;
          case 19:
            var _ = (s.flags & 128) !== 0;
            if (d = (u & r.childLanes) !== 0, d || (Oo(
              s,
              r,
              u,
              !1
            ), d = (u & r.childLanes) !== 0), _) {
              if (d)
                return bg(
                  s,
                  r,
                  u
                );
              r.flags |= 128;
            }
            if (_ = r.memoizedState, _ !== null && (_.rendering = null, _.tail = null, _.lastEffect = null), T(gn, gn.current), d) break;
            return null;
          case 22:
          case 23:
            return r.lanes = 0, vg(s, r, u);
          case 24:
            Ls(r, Qt, s.memoizedState.cache);
        }
        return ts(s, r, u);
      }
      function Tg(s, r, u) {
        if (s !== null)
          if (s.memoizedProps !== r.pendingProps)
            xn = !0;
          else {
            if (!kh(s, u) && (r.flags & 128) === 0)
              return xn = !1, zS(
                s,
                r,
                u
              );
            xn = (s.flags & 131072) !== 0;
          }
        else
          xn = !1, Ct && (r.flags & 1048576) !== 0 && oe(r, Sc, r.index);
        switch (r.lanes = 0, r.tag) {
          case 16:
            e: {
              s = r.pendingProps;
              var d = r.elementType, _ = d._init;
              if (d = _(d._payload), r.type = d, typeof d == "function")
                mf(d) ? (s = pa(d, s), r.tag = 1, r = xg(
                  null,
                  r,
                  d,
                  s,
                  u
                )) : (r.tag = 0, r = Bh(
                  null,
                  r,
                  d,
                  s,
                  u
                ));
              else {
                if (d != null) {
                  if (_ = d.$$typeof, _ === Sf) {
                    r.tag = 11, r = pg(
                      null,
                      r,
                      d,
                      s,
                      u
                    );
                    break e;
                  } else if (_ === bf) {
                    r.tag = 14, r = mg(
                      null,
                      r,
                      d,
                      s,
                      u
                    );
                    break e;
                  }
                }
                throw r = l(d) || d, Error(i(306, r, ""));
              }
            }
            return r;
          case 0:
            return Bh(
              s,
              r,
              r.type,
              r.pendingProps,
              u
            );
          case 1:
            return d = r.type, _ = pa(
              d,
              r.pendingProps
            ), xg(
              s,
              r,
              d,
              _,
              u
            );
          case 3:
            e: {
              if (ce(
                r,
                r.stateNode.containerInfo
              ), s === null) throw Error(i(387));
              var M = r.pendingProps;
              _ = r.memoizedState, d = _.element, ht(s, r), De(r, M, null, u);
              var U = r.memoizedState;
              if (M = U.cache, Ls(r, Qt, M), M !== _.cache && Yh(
                r,
                [Qt],
                u,
                !0
              ), pe(), M = U.element, vi && _.isDehydrated)
                if (_ = {
                  element: M,
                  isDehydrated: !1,
                  cache: U.cache
                }, r.updateQueue.baseState = _, r.memoizedState = _, r.flags & 256) {
                  r = Sg(
                    s,
                    r,
                    M,
                    u
                  );
                  break e;
                } else if (M !== d) {
                  d = K(
                    Error(i(424)),
                    r
                  ), Ee(d), r = Sg(
                    s,
                    r,
                    M,
                    u
                  );
                  break e;
                } else
                  for (vi && (Ln = ZM(
                    r.stateNode.containerInfo
                  ), Fn = r, Ct = !0, Ni = null, Yi = !0), u = Zv(
                    r,
                    null,
                    M,
                    u
                  ), r.child = u; u; )
                    u.flags = u.flags & -3 | 4096, u = u.sibling;
              else {
                if (F(), M === d) {
                  r = ts(
                    s,
                    r,
                    u
                  );
                  break e;
                }
                Tn(s, r, M, u);
              }
              r = r.child;
            }
            return r;
          case 26:
            if (_i)
              return Po(s, r), s === null ? (u = Hv(
                r.type,
                null,
                r.pendingProps,
                null
              )) ? r.memoizedState = u : Ct || (r.stateNode = hE(
                r.type,
                r.pendingProps,
                Bs.current,
                r
              )) : r.memoizedState = Hv(
                r.type,
                s.memoizedProps,
                r.pendingProps,
                s.memoizedState
              ), null;
          case 27:
            if (Cn)
              return Ve(r), s === null && Cn && Ct && (d = r.stateNode = kv(
                r.type,
                r.pendingProps,
                Bs.current,
                An.current,
                !1
              ), Fn = r, Yi = !0, Ln = Iv(d)), d = r.pendingProps.children, s !== null || Ct ? Tn(
                s,
                r,
                d,
                u
              ) : r.child = Ea(
                r,
                null,
                d,
                u
              ), Po(s, r), r.child;
          case 5:
            return s === null && Ct && (lE(
              r.type,
              r.pendingProps,
              An.current
            ), (_ = d = Ln) && (d = JM(
              d,
              r.type,
              r.pendingProps,
              Yi
            ), d !== null ? (r.stateNode = d, Fn = r, Ln = Iv(d), Yi = !1, _ = !0) : _ = !1), _ || je(r)), Ve(r), _ = r.type, M = r.pendingProps, U = s !== null ? s.memoizedProps : null, d = M.children, gc(_, M) ? d = null : U !== null && gc(_, U) && (r.flags |= 32), r.memoizedState !== null && (_ = Lo(
              s,
              r,
              J,
              null,
              null,
              u
            ), as ? Sa._currentValue = _ : Sa._currentValue2 = _), Po(s, r), Tn(s, r, d, u), r.child;
          case 6:
            return s === null && Ct && (cE(
              r.pendingProps,
              An.current
            ), (s = u = Ln) && (u = QM(
              u,
              r.pendingProps,
              Yi
            ), u !== null ? (r.stateNode = u, Fn = r, Ln = null, s = !0) : s = !1), s || je(r)), null;
          case 13:
            return Mg(s, r, u);
          case 4:
            return ce(
              r,
              r.stateNode.containerInfo
            ), d = r.pendingProps, s === null ? r.child = Ea(
              r,
              null,
              d,
              u
            ) : Tn(
              s,
              r,
              d,
              u
            ), r.child;
          case 11:
            return pg(
              s,
              r,
              r.type,
              r.pendingProps,
              u
            );
          case 7:
            return Tn(
              s,
              r,
              r.pendingProps,
              u
            ), r.child;
          case 8:
            return Tn(
              s,
              r,
              r.pendingProps.children,
              u
            ), r.child;
          case 12:
            return Tn(
              s,
              r,
              r.pendingProps.children,
              u
            ), r.child;
          case 10:
            return d = r.pendingProps, Ls(
              r,
              r.type,
              d.value
            ), Tn(
              s,
              r,
              d.children,
              u
            ), r.child;
          case 9:
            return _ = r.type._context, d = r.pendingProps.children, ma(r), _ = wn(_), d = d(_), r.flags |= 1, Tn(
              s,
              r,
              d,
              u
            ), r.child;
          case 14:
            return mg(
              s,
              r,
              r.type,
              r.pendingProps,
              u
            );
          case 15:
            return gg(
              s,
              r,
              r.type,
              r.pendingProps,
              u
            );
          case 19:
            return bg(
              s,
              r,
              u
            );
          case 22:
            return vg(s, r, u);
          case 24:
            return ma(r), d = wn(Qt), s === null ? (_ = Zh(), _ === null && (_ = Vt, M = jh(), _.pooledCache = M, M.refCount++, M !== null && (_.pooledCacheLanes |= u), _ = M), r.memoizedState = {
              parent: d,
              cache: _
            }, Mt(r), Ls(r, Qt, _)) : ((s.lanes & u) !== 0 && (ht(s, r), De(r, null, null, u), pe()), _ = s.memoizedState, M = r.memoizedState, _.parent !== d ? (_ = { parent: d, cache: d }, r.memoizedState = _, r.lanes === 0 && (r.memoizedState = r.updateQueue.baseState = _), Ls(r, Qt, d)) : (d = M.cache, Ls(r, Qt, d), d !== _.cache && Yh(
              r,
              [Qt],
              u,
              !0
            ))), Tn(
              s,
              r,
              r.pendingProps.children,
              u
            ), r.child;
          case 29:
            throw r.pendingProps;
        }
        throw Error(i(156, r.tag));
      }
      function Ls(s, r, u) {
        as ? (T(Cc, r._currentValue), r._currentValue = u) : (T(Cc, r._currentValue2), r._currentValue2 = u);
      }
      function ns(s) {
        var r = Cc.current;
        as ? s._currentValue = r : s._currentValue2 = r, y(Cc);
      }
      function qh(s, r, u) {
        for (; s !== null; ) {
          var d = s.alternate;
          if ((s.childLanes & r) !== r ? (s.childLanes |= r, d !== null && (d.childLanes |= r)) : d !== null && (d.childLanes & r) !== r && (d.childLanes |= r), s === u) break;
          s = s.return;
        }
      }
      function Yh(s, r, u, d) {
        var _ = s.child;
        for (_ !== null && (_.return = s); _ !== null; ) {
          var M = _.dependencies;
          if (M !== null) {
            var U = _.child;
            M = M.firstContext;
            e: for (; M !== null; ) {
              var B = M;
              M = _;
              for (var Y = 0; Y < r.length; Y++)
                if (B.context === r[Y]) {
                  M.lanes |= u, B = M.alternate, B !== null && (B.lanes |= u), qh(
                    M.return,
                    u,
                    s
                  ), d || (U = null);
                  break e;
                }
              M = B.next;
            }
          } else if (_.tag === 18) {
            if (U = _.return, U === null) throw Error(i(341));
            U.lanes |= u, M = U.alternate, M !== null && (M.lanes |= u), qh(U, u, s), U = null;
          } else U = _.child;
          if (U !== null) U.return = _;
          else
            for (U = _; U !== null; ) {
              if (U === s) {
                U = null;
                break;
              }
              if (_ = U.sibling, _ !== null) {
                _.return = U.return, U = _;
                break;
              }
              U = U.return;
            }
          _ = U;
        }
      }
      function Oo(s, r, u, d) {
        s = null;
        for (var _ = r, M = !1; _ !== null; ) {
          if (!M) {
            if ((_.flags & 524288) !== 0) M = !0;
            else if ((_.flags & 262144) !== 0) break;
          }
          if (_.tag === 10) {
            var U = _.alternate;
            if (U === null) throw Error(i(387));
            if (U = U.memoizedProps, U !== null) {
              var B = _.type;
              ci(_.pendingProps.value, U.value) || (s !== null ? s.push(B) : s = [B]);
            }
          } else if (_ === Mc.current) {
            if (U = _.alternate, U === null) throw Error(i(387));
            U.memoizedState.memoizedState !== _.memoizedState.memoizedState && (s !== null ? s.push(Sa) : s = [Sa]);
          }
          _ = _.return;
        }
        s !== null && Yh(
          r,
          s,
          u,
          d
        ), r.flags |= 262144;
      }
      function rc(s) {
        for (s = s.firstContext; s !== null; ) {
          var r = s.context;
          if (!ci(
            as ? r._currentValue : r._currentValue2,
            s.memoizedValue
          ))
            return !0;
          s = s.next;
        }
        return !1;
      }
      function ma(s) {
        wa = s, ls = null, s = s.dependencies, s !== null && (s.firstContext = null);
      }
      function wn(s) {
        return Ag(wa, s);
      }
      function oc(s, r) {
        return wa === null && ma(s), Ag(s, r);
      }
      function Ag(s, r) {
        var u = as ? r._currentValue : r._currentValue2;
        if (r = { context: r, memoizedValue: u, next: null }, ls === null) {
          if (s === null) throw Error(i(308));
          ls = r, s.dependencies = { lanes: 0, firstContext: r }, s.flags |= 524288;
        } else ls = ls.next = r;
        return u;
      }
      function jh() {
        return {
          controller: new RE(),
          data: /* @__PURE__ */ new Map(),
          refCount: 0
        };
      }
      function Io(s) {
        s.refCount--, s.refCount === 0 && CE(LE, function() {
          s.controller.abort();
        });
      }
      function Zh() {
        var s = Ra.current;
        return s !== null ? s : Vt.pooledCache;
      }
      function lc(s, r) {
        r === null ? T(Ra, Ra.current) : T(Ra, r.pool);
      }
      function wg() {
        var s = Zh();
        return s === null ? null : {
          parent: as ? Qt._currentValue : Qt._currentValue2,
          pool: s
        };
      }
      function ni(s) {
        s.flags |= 4;
      }
      function Rg(s, r) {
        if (s !== null && s.child === r.child) return !1;
        if ((r.flags & 16) !== 0) return !0;
        for (s = r.child; s !== null; ) {
          if ((s.flags & 13878) !== 0 || (s.subtreeFlags & 13878) !== 0)
            return !0;
          s = s.sibling;
        }
        return !1;
      }
      function Kh(s, r, u, d) {
        if (Rn)
          for (u = r.child; u !== null; ) {
            if (u.tag === 5 || u.tag === 6)
              wf(s, u.stateNode);
            else if (!(u.tag === 4 || Cn && u.tag === 27) && u.child !== null) {
              u.child.return = u, u = u.child;
              continue;
            }
            if (u === r) break;
            for (; u.sibling === null; ) {
              if (u.return === null || u.return === r)
                return;
              u = u.return;
            }
            u.sibling.return = u.return, u = u.sibling;
          }
        else if (zs)
          for (var _ = r.child; _ !== null; ) {
            if (_.tag === 5) {
              var M = _.stateNode;
              u && d && (M = Dv(
                M,
                _.type,
                _.memoizedProps
              )), wf(s, M);
            } else if (_.tag === 6)
              M = _.stateNode, u && d && (M = Pv(
                M,
                _.memoizedProps
              )), wf(s, M);
            else if (_.tag !== 4) {
              if (_.tag === 22 && _.memoizedState !== null)
                M = _.child, M !== null && (M.return = _), Kh(s, _, !0, !0);
              else if (_.child !== null) {
                _.child.return = _, _ = _.child;
                continue;
              }
            }
            if (_ === r) break;
            for (; _.sibling === null; ) {
              if (_.return === null || _.return === r)
                return;
              _ = _.return;
            }
            _.sibling.return = _.return, _ = _.sibling;
          }
      }
      function Cg(s, r, u, d) {
        if (zs)
          for (var _ = r.child; _ !== null; ) {
            if (_.tag === 5) {
              var M = _.stateNode;
              u && d && (M = Dv(
                M,
                _.type,
                _.memoizedProps
              )), Uv(s, M);
            } else if (_.tag === 6)
              M = _.stateNode, u && d && (M = Pv(
                M,
                _.memoizedProps
              )), Uv(s, M);
            else if (_.tag !== 4) {
              if (_.tag === 22 && _.memoizedState !== null)
                M = _.child, M !== null && (M.return = _), Cg(
                  s,
                  _,
                  !(_.memoizedProps !== null && _.memoizedProps.mode === "manual"),
                  !0
                );
              else if (_.child !== null) {
                _.child.return = _, _ = _.child;
                continue;
              }
            }
            if (_ === r) break;
            for (; _.sibling === null; ) {
              if (_.return === null || _.return === r) return;
              _ = _.return;
            }
            _.sibling.return = _.return, _ = _.sibling;
          }
      }
      function Lg(s, r) {
        if (zs && Rg(s, r)) {
          s = r.stateNode;
          var u = s.containerInfo, d = Lv();
          Cg(d, r, !1, !1), s.pendingChildren = d, ni(r), XM(u, d);
        }
      }
      function Jh(s, r, u, d) {
        if (Rn)
          s.memoizedProps !== d && ni(r);
        else if (zs) {
          var _ = s.stateNode, M = s.memoizedProps;
          if ((s = Rg(s, r)) || M !== d) {
            var U = An.current;
            M = WM(
              _,
              u,
              M,
              d,
              !s,
              null
            ), M === _ ? r.stateNode = _ : (bv(
              M,
              u,
              d,
              U
            ) && ni(r), r.stateNode = M, s ? Kh(M, r, !1, !1) : ni(r));
          } else r.stateNode = _;
        }
      }
      function Qh(s, r, u) {
        if (vM(r, u)) {
          if (s.flags |= 16777216, !wv(r, u))
            if (tv()) s.flags |= 8192;
            else
              throw Ur = Tc, Vf;
        } else s.flags &= -16777217;
      }
      function Ug(s, r) {
        if (dE(r)) {
          if (s.flags |= 16777216, !Xv(r))
            if (tv()) s.flags |= 8192;
            else
              throw Ur = Tc, Vf;
        } else s.flags &= -16777217;
      }
      function cc(s, r) {
        r !== null && (s.flags |= 4), s.flags & 16384 && (r = s.tag !== 22 ? w() : 536870912, s.lanes |= r, Br |= r);
      }
      function zo(s, r) {
        if (!Ct)
          switch (s.tailMode) {
            case "hidden":
              r = s.tail;
              for (var u = null; r !== null; )
                r.alternate !== null && (u = r), r = r.sibling;
              u === null ? s.tail = null : u.sibling = null;
              break;
            case "collapsed":
              u = s.tail;
              for (var d = null; u !== null; )
                u.alternate !== null && (d = u), u = u.sibling;
              d === null ? r || s.tail === null ? s.tail = null : s.tail.sibling = null : d.sibling = null;
          }
      }
      function Zt(s) {
        var r = s.alternate !== null && s.alternate.child === s.child, u = 0, d = 0;
        if (r)
          for (var _ = s.child; _ !== null; )
            u |= _.lanes | _.childLanes, d |= _.subtreeFlags & 31457280, d |= _.flags & 31457280, _.return = s, _ = _.sibling;
        else
          for (_ = s.child; _ !== null; )
            u |= _.lanes | _.childLanes, d |= _.subtreeFlags, d |= _.flags, _.return = s, _ = _.sibling;
        return s.subtreeFlags |= d, s.childLanes = u, r;
      }
      function BS(s, r, u) {
        var d = r.pendingProps;
        switch (ee(r), r.tag) {
          case 16:
          case 15:
          case 0:
          case 11:
          case 7:
          case 8:
          case 12:
          case 9:
          case 14:
            return Zt(r), null;
          case 1:
            return Zt(r), null;
          case 3:
            return u = r.stateNode, d = null, s !== null && (d = s.memoizedState.cache), r.memoizedState.cache !== d && (r.flags |= 2048), ns(Qt), be(), u.pendingContext && (u.context = u.pendingContext, u.pendingContext = null), (s === null || s.child === null) && (nt(r) ? ni(r) : s === null || s.memoizedState.isDehydrated && (r.flags & 256) === 0 || (r.flags |= 1024, Ni !== null && (uf(Ni), Ni = null))), Lg(s, r), Zt(r), null;
          case 26:
            if (_i) {
              u = r.type;
              var _ = r.memoizedState;
              return s === null ? (ni(r), _ !== null ? (Zt(r), Ug(
                r,
                _
              )) : (Zt(r), Qh(
                r,
                u,
                d
              ))) : _ ? _ !== s.memoizedState ? (ni(r), Zt(r), Ug(
                r,
                _
              )) : (Zt(r), r.flags &= -16777217) : (Rn ? s.memoizedProps !== d && ni(r) : Jh(
                s,
                r,
                u,
                d
              ), Zt(r), Qh(
                r,
                u,
                d
              )), null;
            }
          case 27:
            if (Cn) {
              if (Ie(r), u = Bs.current, _ = r.type, s !== null && r.stateNode != null)
                Rn ? s.memoizedProps !== d && ni(r) : Jh(
                  s,
                  r,
                  _,
                  d
                );
              else {
                if (!d) {
                  if (r.stateNode === null)
                    throw Error(i(166));
                  return Zt(r), null;
                }
                s = An.current, nt(r) ? st(r, s) : (s = kv(
                  _,
                  d,
                  u,
                  s,
                  !0
                ), r.stateNode = s, ni(r));
              }
              return Zt(r), null;
            }
          case 5:
            if (Ie(r), u = r.type, s !== null && r.stateNode != null)
              Jh(s, r, u, d);
            else {
              if (!d) {
                if (r.stateNode === null)
                  throw Error(i(166));
                return Zt(r), null;
              }
              s = An.current, nt(r) ? st(r, s) : (_ = uM(
                u,
                d,
                Bs.current,
                s,
                r
              ), Kh(_, r, !1, !1), r.stateNode = _, bv(
                _,
                u,
                d,
                s
              ) && ni(r));
            }
            return Zt(r), Qh(
              r,
              r.type,
              r.pendingProps
            ), null;
          case 6:
            if (s && r.stateNode != null)
              u = s.memoizedProps, Rn ? u !== d && ni(r) : zs && (u !== d ? (r.stateNode = Tv(
                d,
                Bs.current,
                An.current,
                r
              ), ni(r)) : r.stateNode = s.stateNode);
            else {
              if (typeof d != "string" && r.stateNode === null)
                throw Error(i(166));
              if (s = Bs.current, u = An.current, nt(r)) {
                if (!vi) throw Error(i(176));
                if (s = r.stateNode, u = r.memoizedProps, d = null, _ = Fn, _ !== null)
                  switch (_.tag) {
                    case 27:
                    case 5:
                      d = _.memoizedProps;
                  }
                tE(
                  s,
                  u,
                  r,
                  d
                ) || je(r);
              } else
                r.stateNode = Tv(
                  d,
                  s,
                  u,
                  r
                );
            }
            return Zt(r), null;
          case 13:
            if (d = r.memoizedState, s === null || s.memoizedState !== null && s.memoizedState.dehydrated !== null) {
              if (_ = nt(r), d !== null && d.dehydrated !== null) {
                if (s === null) {
                  if (!_) throw Error(i(318));
                  if (!vi) throw Error(i(344));
                  if (_ = r.memoizedState, _ = _ !== null ? _.dehydrated : null, !_) throw Error(i(317));
                  nE(_, r);
                } else
                  F(), (r.flags & 128) === 0 && (r.memoizedState = null), r.flags |= 4;
                Zt(r), _ = !1;
              } else
                Ni !== null && (uf(Ni), Ni = null), _ = !0;
              if (!_)
                return r.flags & 256 ? (jn(r), r) : (jn(r), null);
            }
            if (jn(r), (r.flags & 128) !== 0)
              return r.lanes = u, r;
            if (u = d !== null, s = s !== null && s.memoizedState !== null, u) {
              d = r.child, _ = null, d.alternate !== null && d.alternate.memoizedState !== null && d.alternate.memoizedState.cachePool !== null && (_ = d.alternate.memoizedState.cachePool.pool);
              var M = null;
              d.memoizedState !== null && d.memoizedState.cachePool !== null && (M = d.memoizedState.cachePool.pool), M !== _ && (d.flags |= 2048);
            }
            return u !== s && u && (r.child.flags |= 8192), cc(r, r.updateQueue), Zt(r), null;
          case 4:
            return be(), Lg(s, r), s === null && dM(r.stateNode.containerInfo), Zt(r), null;
          case 10:
            return ns(r.type), Zt(r), null;
          case 19:
            if (y(gn), _ = r.memoizedState, _ === null)
              return Zt(r), null;
            if (d = (r.flags & 128) !== 0, M = _.rendering, M === null)
              if (d) zo(_, !1);
              else {
                if (en !== 0 || s !== null && (s.flags & 128) !== 0)
                  for (s = r.child; s !== null; ) {
                    if (M = ha(s), M !== null) {
                      for (r.flags |= 128, zo(_, !1), s = M.updateQueue, r.updateQueue = s, cc(r, s), r.subtreeFlags = 0, s = u, u = r.child; u !== null; )
                        hv(u, s), u = u.sibling;
                      return T(
                        gn,
                        gn.current & 1 | 2
                      ), r.child;
                    }
                    s = s.sibling;
                  }
                _.tail !== null && Ui() > Qo && (r.flags |= 128, d = !0, zo(_, !1), r.lanes = 4194304);
              }
            else {
              if (!d)
                if (s = ha(M), s !== null) {
                  if (r.flags |= 128, d = !0, s = s.updateQueue, r.updateQueue = s, cc(r, s), zo(_, !0), _.tail === null && _.tailMode === "hidden" && !M.alternate && !Ct)
                    return Zt(r), null;
                } else
                  2 * Ui() - _.renderingStartTime > Qo && u !== 536870912 && (r.flags |= 128, d = !0, zo(_, !1), r.lanes = 4194304);
              _.isBackwards ? (M.sibling = r.child, r.child = M) : (s = _.last, s !== null ? s.sibling = M : r.child = M, _.last = M);
            }
            return _.tail !== null ? (r = _.tail, _.rendering = r, _.tail = r.sibling, _.renderingStartTime = Ui(), r.sibling = null, s = gn.current, T(
              gn,
              d ? s & 1 | 2 : s & 1
            ), r) : (Zt(r), null);
          case 22:
          case 23:
            return jn(r), ur(), d = r.memoizedState !== null, s !== null ? s.memoizedState !== null !== d && (r.flags |= 8192) : d && (r.flags |= 8192), d ? (u & 536870912) !== 0 && (r.flags & 128) === 0 && (Zt(r), r.subtreeFlags & 6 && (r.flags |= 8192)) : Zt(r), u = r.updateQueue, u !== null && cc(r, u.retryQueue), u = null, s !== null && s.memoizedState !== null && s.memoizedState.cachePool !== null && (u = s.memoizedState.cachePool.pool), d = null, r.memoizedState !== null && r.memoizedState.cachePool !== null && (d = r.memoizedState.cachePool.pool), d !== u && (r.flags |= 2048), s !== null && y(Ra), null;
          case 24:
            return u = null, s !== null && (u = s.memoizedState.cache), r.memoizedState.cache !== u && (r.flags |= 2048), ns(Qt), Zt(r), null;
          case 25:
            return null;
        }
        throw Error(i(156, r.tag));
      }
      function HS(s, r) {
        switch (ee(r), r.tag) {
          case 1:
            return s = r.flags, s & 65536 ? (r.flags = s & -65537 | 128, r) : null;
          case 3:
            return ns(Qt), be(), s = r.flags, (s & 65536) !== 0 && (s & 128) === 0 ? (r.flags = s & -65537 | 128, r) : null;
          case 26:
          case 27:
          case 5:
            return Ie(r), null;
          case 13:
            if (jn(r), s = r.memoizedState, s !== null && s.dehydrated !== null) {
              if (r.alternate === null)
                throw Error(i(340));
              F();
            }
            return s = r.flags, s & 65536 ? (r.flags = s & -65537 | 128, r) : null;
          case 19:
            return y(gn), null;
          case 4:
            return be(), null;
          case 10:
            return ns(r.type), null;
          case 22:
          case 23:
            return jn(r), ur(), s !== null && y(Ra), s = r.flags, s & 65536 ? (r.flags = s & -65537 | 128, r) : null;
          case 24:
            return ns(Qt), null;
          case 25:
            return null;
          default:
            return null;
        }
      }
      function Ng(s, r) {
        switch (ee(r), r.tag) {
          case 3:
            ns(Qt), be();
            break;
          case 26:
          case 27:
          case 5:
            Ie(r);
            break;
          case 4:
            be();
            break;
          case 13:
            jn(r);
            break;
          case 19:
            y(gn);
            break;
          case 10:
            ns(r.type);
            break;
          case 22:
          case 23:
            jn(r), ur(), s !== null && y(Ra);
            break;
          case 24:
            ns(Qt);
        }
      }
      function Bo(s, r) {
        try {
          var u = r.updateQueue, d = u !== null ? u.lastEffect : null;
          if (d !== null) {
            var _ = d.next;
            u = _;
            do {
              if ((u.tag & s) === s) {
                d = void 0;
                var M = u.create, U = u.inst;
                d = M(), U.destroy = d;
              }
              u = u.next;
            } while (u !== _);
          }
        } catch (B) {
          Ot(r, r.return, B);
        }
      }
      function Us(s, r, u) {
        try {
          var d = r.updateQueue, _ = d !== null ? d.lastEffect : null;
          if (_ !== null) {
            var M = _.next;
            d = M;
            do {
              if ((d.tag & s) === s) {
                var U = d.inst, B = U.destroy;
                if (B !== void 0) {
                  U.destroy = void 0, _ = r;
                  var Y = u;
                  try {
                    B();
                  } catch (fe) {
                    Ot(
                      _,
                      Y,
                      fe
                    );
                  }
                }
              }
              d = d.next;
            } while (d !== M);
          }
        } catch (fe) {
          Ot(r, r.return, fe);
        }
      }
      function Dg(s) {
        var r = s.updateQueue;
        if (r !== null) {
          var u = s.stateNode;
          try {
            xe(r, u);
          } catch (d) {
            Ot(s, s.return, d);
          }
        }
      }
      function Pg(s, r, u) {
        u.props = pa(
          s.type,
          s.memoizedProps
        ), u.state = s.memoizedState;
        try {
          u.componentWillUnmount();
        } catch (d) {
          Ot(s, r, d);
        }
      }
      function ga(s, r) {
        try {
          var u = s.ref;
          if (u !== null) {
            var d = s.stateNode;
            switch (s.tag) {
              case 26:
              case 27:
              case 5:
                var _ = Vo(d);
                break;
              default:
                _ = d;
            }
            typeof u == "function" ? s.refCleanup = u(_) : u.current = _;
          }
        } catch (M) {
          Ot(s, r, M);
        }
      }
      function ii(s, r) {
        var u = s.ref, d = s.refCleanup;
        if (u !== null)
          if (typeof d == "function")
            try {
              d();
            } catch (_) {
              Ot(s, r, _);
            } finally {
              s.refCleanup = null, s = s.alternate, s != null && (s.refCleanup = null);
            }
          else if (typeof u == "function")
            try {
              u(null);
            } catch (_) {
              Ot(s, r, _);
            }
          else u.current = null;
      }
      function Og(s) {
        var r = s.type, u = s.memoizedProps, d = s.stateNode;
        try {
          NM(d, r, u, s);
        } catch (_) {
          Ot(s, s.return, _);
        }
      }
      function Ig(s, r, u) {
        try {
          DM(
            s.stateNode,
            s.type,
            u,
            r,
            s
          );
        } catch (d) {
          Ot(s, s.return, d);
        }
      }
      function zg(s) {
        return s.tag === 5 || s.tag === 3 || (_i ? s.tag === 26 : !1) || (Cn ? s.tag === 27 : !1) || s.tag === 4;
      }
      function $h(s) {
        e: for (; ; ) {
          for (; s.sibling === null; ) {
            if (s.return === null || zg(s.return)) return null;
            s = s.return;
          }
          for (s.sibling.return = s.return, s = s.sibling; s.tag !== 5 && s.tag !== 6 && (!Cn || s.tag !== 27) && s.tag !== 18; ) {
            if (s.flags & 2 || s.child === null || s.tag === 4) continue e;
            s.child.return = s, s = s.child;
          }
          if (!(s.flags & 2)) return s.stateNode;
        }
      }
      function ef(s, r, u) {
        var d = s.tag;
        if (d === 5 || d === 6)
          s = s.stateNode, r ? OM(u, s, r) : LM(u, s);
        else if (!(d === 4 || Cn && d === 27) && (s = s.child, s !== null))
          for (ef(s, r, u), s = s.sibling; s !== null; )
            ef(s, r, u), s = s.sibling;
      }
      function uc(s, r, u) {
        var d = s.tag;
        if (d === 5 || d === 6)
          s = s.stateNode, r ? PM(u, s, r) : CM(u, s);
        else if (!(d === 4 || Cn && d === 27) && (s = s.child, s !== null))
          for (uc(s, r, u), s = s.sibling; s !== null; )
            uc(s, r, u), s = s.sibling;
      }
      function Bg(s, r, u) {
        s = s.containerInfo;
        try {
          Nv(s, u);
        } catch (d) {
          Ot(r, r.return, d);
        }
      }
      function FS(s, r) {
        for (lM(s.containerInfo), Sn = r; Sn !== null; )
          if (s = Sn, r = s.child, (s.subtreeFlags & 1028) !== 0 && r !== null)
            r.return = s, Sn = r;
          else
            for (; Sn !== null; ) {
              s = Sn;
              var u = s.alternate;
              switch (r = s.flags, s.tag) {
                case 0:
                  break;
                case 11:
                case 15:
                  break;
                case 1:
                  if ((r & 1024) !== 0 && u !== null) {
                    r = void 0;
                    var d = s, _ = u.memoizedProps;
                    u = u.memoizedState;
                    var M = d.stateNode;
                    try {
                      var U = pa(
                        d.type,
                        _,
                        d.elementType === d.type
                      );
                      r = M.getSnapshotBeforeUpdate(
                        U,
                        u
                      ), M.__reactInternalSnapshotBeforeUpdate = r;
                    } catch (B) {
                      Ot(
                        d,
                        d.return,
                        B
                      );
                    }
                  }
                  break;
                case 3:
                  (r & 1024) !== 0 && Rn && GM(s.stateNode.containerInfo);
                  break;
                case 5:
                case 26:
                case 27:
                case 6:
                case 4:
                case 17:
                  break;
                default:
                  if ((r & 1024) !== 0)
                    throw Error(i(163));
              }
              if (r = s.sibling, r !== null) {
                r.return = s.return, Sn = r;
                break;
              }
              Sn = s.return;
            }
        return U = e0, e0 = !1, U;
      }
      function Hg(s, r, u) {
        var d = u.flags;
        switch (u.tag) {
          case 0:
          case 11:
          case 15:
            is(s, u), d & 4 && Bo(5, u);
            break;
          case 1:
            if (is(s, u), d & 4)
              if (s = u.stateNode, r === null)
                try {
                  s.componentDidMount();
                } catch (B) {
                  Ot(u, u.return, B);
                }
              else {
                var _ = pa(
                  u.type,
                  r.memoizedProps
                );
                r = r.memoizedState;
                try {
                  s.componentDidUpdate(
                    _,
                    r,
                    s.__reactInternalSnapshotBeforeUpdate
                  );
                } catch (B) {
                  Ot(
                    u,
                    u.return,
                    B
                  );
                }
              }
            d & 64 && Dg(u), d & 512 && ga(u, u.return);
            break;
          case 3:
            if (is(s, u), d & 64 && (d = u.updateQueue, d !== null)) {
              if (s = null, u.child !== null)
                switch (u.child.tag) {
                  case 27:
                  case 5:
                    s = Vo(u.child.stateNode);
                    break;
                  case 1:
                    s = u.child.stateNode;
                }
              try {
                xe(d, s);
              } catch (B) {
                Ot(u, u.return, B);
              }
            }
            break;
          case 26:
            if (_i) {
              is(s, u), d & 512 && ga(u, u.return);
              break;
            }
          case 27:
          case 5:
            is(s, u), r === null && d & 4 && Og(u), d & 512 && ga(u, u.return);
            break;
          case 12:
            is(s, u);
            break;
          case 13:
            is(s, u), d & 4 && Vg(s, u);
            break;
          case 22:
            if (_ = u.memoizedState !== null || cs, !_) {
              r = r !== null && r.memoizedState !== null || $t;
              var M = cs, U = $t;
              cs = _, ($t = r) && !U ? Ns(
                s,
                u,
                (u.subtreeFlags & 8772) !== 0
              ) : is(s, u), cs = M, $t = U;
            }
            d & 512 && (u.memoizedProps.mode === "manual" ? ga(u, u.return) : ii(u, u.return));
            break;
          default:
            is(s, u);
        }
      }
      function Fg(s) {
        var r = s.alternate;
        r !== null && (s.alternate = null, Fg(r)), s.child = null, s.deletions = null, s.sibling = null, s.tag === 5 && (r = s.stateNode, r !== null && gM(r)), s.stateNode = null, s.return = null, s.dependencies = null, s.memoizedProps = null, s.memoizedState = null, s.pendingProps = null, s.stateNode = null, s.updateQueue = null;
      }
      function Li(s, r, u) {
        for (u = u.child; u !== null; )
          tf(
            s,
            r,
            u
          ), u = u.sibling;
      }
      function tf(s, r, u) {
        if (li && typeof li.onCommitFiberUnmount == "function")
          try {
            li.onCommitFiberUnmount(Xo, u);
          } catch {
          }
        switch (u.tag) {
          case 26:
            if (_i) {
              $t || ii(u, r), Li(
                s,
                r,
                u
              ), u.memoizedState ? Vv(u.memoizedState) : u.stateNode && Wv(u.stateNode);
              break;
            }
          case 27:
            if (Cn) {
              $t || ii(u, r);
              var d = fn, _ = ui;
              fn = u.stateNode, Li(
                s,
                r,
                u
              ), vE(u.stateNode), fn = d, ui = _;
              break;
            }
          case 5:
            $t || ii(u, r);
          case 6:
            if (Rn) {
              if (d = fn, _ = ui, fn = null, Li(
                s,
                r,
                u
              ), fn = d, ui = _, fn !== null)
                if (ui)
                  try {
                    zM(fn, u.stateNode);
                  } catch (M) {
                    Ot(
                      u,
                      r,
                      M
                    );
                  }
                else
                  try {
                    IM(fn, u.stateNode);
                  } catch (M) {
                    Ot(
                      u,
                      r,
                      M
                    );
                  }
            } else
              Li(
                s,
                r,
                u
              );
            break;
          case 18:
            Rn && fn !== null && (ui ? oE(
              fn,
              u.stateNode
            ) : rE(fn, u.stateNode));
            break;
          case 4:
            Rn ? (d = fn, _ = ui, fn = u.stateNode.containerInfo, ui = !0, Li(
              s,
              r,
              u
            ), fn = d, ui = _) : (zs && Bg(
              u.stateNode,
              u,
              Lv()
            ), Li(
              s,
              r,
              u
            ));
            break;
          case 0:
          case 11:
          case 14:
          case 15:
            $t || Us(2, u, r), $t || Us(4, u, r), Li(
              s,
              r,
              u
            );
            break;
          case 1:
            $t || (ii(u, r), d = u.stateNode, typeof d.componentWillUnmount == "function" && Pg(
              u,
              r,
              d
            )), Li(
              s,
              r,
              u
            );
            break;
          case 21:
            Li(
              s,
              r,
              u
            );
            break;
          case 22:
            $t || ii(u, r), $t = (d = $t) || u.memoizedState !== null, Li(
              s,
              r,
              u
            ), $t = d;
            break;
          default:
            Li(
              s,
              r,
              u
            );
        }
      }
      function Vg(s, r) {
        if (vi && r.memoizedState === null && (s = r.alternate, s !== null && (s = s.memoizedState, s !== null && (s = s.dehydrated, s !== null))))
          try {
            aE(s);
          } catch (u) {
            Ot(r, r.return, u);
          }
      }
      function VS(s) {
        switch (s.tag) {
          case 13:
          case 19:
            var r = s.stateNode;
            return r === null && (r = s.stateNode = new $v()), r;
          case 22:
            return s = s.stateNode, r = s._retryCache, r === null && (r = s._retryCache = new $v()), r;
          default:
            throw Error(i(435, s.tag));
        }
      }
      function nf(s, r) {
        var u = VS(s);
        r.forEach(function(d) {
          var _ = ZS.bind(null, s, d);
          u.has(d) || (u.add(d), d.then(_, _));
        });
      }
      function Zn(s, r) {
        var u = r.deletions;
        if (u !== null)
          for (var d = 0; d < u.length; d++) {
            var _ = u[d], M = s, U = r;
            if (Rn) {
              var B = U;
              e: for (; B !== null; ) {
                switch (B.tag) {
                  case 27:
                  case 5:
                    fn = B.stateNode, ui = !1;
                    break e;
                  case 3:
                    fn = B.stateNode.containerInfo, ui = !0;
                    break e;
                  case 4:
                    fn = B.stateNode.containerInfo, ui = !0;
                    break e;
                }
                B = B.return;
              }
              if (fn === null) throw Error(i(160));
              tf(M, U, _), fn = null, ui = !1;
            } else tf(M, U, _);
            M = _.alternate, M !== null && (M.return = null), _.return = null;
          }
        if (r.subtreeFlags & 13878)
          for (r = r.child; r !== null; )
            Gg(r, s), r = r.sibling;
      }
      function Gg(s, r) {
        var u = s.alternate, d = s.flags;
        switch (s.tag) {
          case 0:
          case 11:
          case 14:
          case 15:
            Zn(r, s), si(s), d & 4 && (Us(3, s, s.return), Bo(3, s), Us(5, s, s.return));
            break;
          case 1:
            Zn(r, s), si(s), d & 512 && ($t || u === null || ii(u, u.return)), d & 64 && cs && (s = s.updateQueue, s !== null && (d = s.callbacks, d !== null && (u = s.shared.hiddenCallbacks, s.shared.hiddenCallbacks = u === null ? d : u.concat(d))));
            break;
          case 26:
            if (_i) {
              var _ = Di;
              Zn(r, s), si(s), d & 512 && ($t || u === null || ii(u, u.return)), d & 4 && (d = u !== null ? u.memoizedState : null, r = s.memoizedState, u === null ? r === null ? s.stateNode === null ? s.stateNode = uE(
                _,
                s.type,
                s.memoizedProps,
                s
              ) : Gv(
                _,
                s.type,
                s.stateNode
              ) : s.stateNode = Fv(
                _,
                r,
                s.memoizedProps
              ) : d !== r ? (d === null ? u.stateNode !== null && Wv(u.stateNode) : Vv(d), r === null ? Gv(
                _,
                s.type,
                s.stateNode
              ) : Fv(
                _,
                r,
                s.memoizedProps
              )) : r === null && s.stateNode !== null && Ig(
                s,
                s.memoizedProps,
                u.memoizedProps
              ));
              break;
            }
          case 27:
            if (Cn && d & 4 && s.alternate === null) {
              _ = s.stateNode;
              var M = s.memoizedProps;
              try {
                mE(_), gE(
                  s.type,
                  M,
                  _,
                  s
                );
              } catch (Te) {
                Ot(s, s.return, Te);
              }
            }
          case 5:
            if (Zn(r, s), si(s), d & 512 && ($t || u === null || ii(u, u.return)), Rn) {
              if (s.flags & 32) {
                r = s.stateNode;
                try {
                  Cv(r);
                } catch (Te) {
                  Ot(s, s.return, Te);
                }
              }
              d & 4 && s.stateNode != null && (r = s.memoizedProps, Ig(
                s,
                r,
                u !== null ? u.memoizedProps : r
              )), d & 1024 && (kf = !0);
            }
            break;
          case 6:
            if (Zn(r, s), si(s), d & 4 && Rn) {
              if (s.stateNode === null)
                throw Error(i(162));
              d = s.memoizedProps, u = u !== null ? u.memoizedProps : d, r = s.stateNode;
              try {
                UM(r, u, d);
              } catch (Te) {
                Ot(s, s.return, Te);
              }
            }
            break;
          case 3:
            if (_i ? (fE(), _ = Di, Di = Uf(r.containerInfo), Zn(r, s), Di = _) : Zn(r, s), si(s), d & 4) {
              if (Rn && vi && u !== null && u.memoizedState.isDehydrated)
                try {
                  sE(r.containerInfo);
                } catch (Te) {
                  Ot(s, s.return, Te);
                }
              if (zs) {
                d = r.containerInfo, u = r.pendingChildren;
                try {
                  Nv(d, u);
                } catch (Te) {
                  Ot(s, s.return, Te);
                }
              }
            }
            kf && (kf = !1, Wg(s));
            break;
          case 4:
            _i ? (u = Di, Di = Uf(
              s.stateNode.containerInfo
            ), Zn(r, s), si(s), Di = u) : (Zn(r, s), si(s)), d & 4 && zs && Bg(
              s.stateNode,
              s,
              s.stateNode.pendingChildren
            );
            break;
          case 12:
            Zn(r, s), si(s);
            break;
          case 13:
            Zn(r, s), si(s), s.child.flags & 8192 && s.memoizedState !== null != (u !== null && u.memoizedState !== null) && (Zf = Ui()), d & 4 && (d = s.updateQueue, d !== null && (s.updateQueue = null, nf(s, d)));
            break;
          case 22:
            d & 512 && ($t || u === null || ii(u, u.return)), _ = s.memoizedState !== null;
            var U = u !== null && u.memoizedState !== null, B = cs, Y = $t;
            if (cs = B || _, $t = Y || U, Zn(r, s), $t = Y, cs = B, si(s), r = s.stateNode, r._current = s, r._visibility &= -3, r._visibility |= r._pendingVisibility & 2, d & 8192 && (r._visibility = _ ? r._visibility & -2 : r._visibility | 1, _ && (r = cs || $t, u === null || U || r || mr(s)), Rn && (s.memoizedProps === null || s.memoizedProps.mode !== "manual"))) {
              e: if (u = null, Rn)
                for (r = s; ; ) {
                  if (r.tag === 5 || _i && r.tag === 26 || Cn && r.tag === 27) {
                    if (u === null) {
                      U = u = r;
                      try {
                        M = U.stateNode, _ ? BM(M) : FM(
                          U.stateNode,
                          U.memoizedProps
                        );
                      } catch (Te) {
                        Ot(U, U.return, Te);
                      }
                    }
                  } else if (r.tag === 6) {
                    if (u === null) {
                      U = r;
                      try {
                        var fe = U.stateNode;
                        _ ? HM(fe) : VM(fe, U.memoizedProps);
                      } catch (Te) {
                        Ot(U, U.return, Te);
                      }
                    }
                  } else if ((r.tag !== 22 && r.tag !== 23 || r.memoizedState === null || r === s) && r.child !== null) {
                    r.child.return = r, r = r.child;
                    continue;
                  }
                  if (r === s) break e;
                  for (; r.sibling === null; ) {
                    if (r.return === null || r.return === s)
                      break e;
                    u === r && (u = null), r = r.return;
                  }
                  u === r && (u = null), r.sibling.return = r.return, r = r.sibling;
                }
            }
            d & 4 && (d = s.updateQueue, d !== null && (u = d.retryQueue, u !== null && (d.retryQueue = null, nf(s, u))));
            break;
          case 19:
            Zn(r, s), si(s), d & 4 && (d = s.updateQueue, d !== null && (s.updateQueue = null, nf(s, d)));
            break;
          case 21:
            break;
          default:
            Zn(r, s), si(s);
        }
      }
      function si(s) {
        var r = s.flags;
        if (r & 2) {
          try {
            if (Rn && (!Cn || s.tag !== 27)) {
              e: {
                for (var u = s.return; u !== null; ) {
                  if (zg(u)) {
                    var d = u;
                    break e;
                  }
                  u = u.return;
                }
                throw Error(i(160));
              }
              switch (d.tag) {
                case 27:
                  if (Cn) {
                    var _ = d.stateNode, M = $h(s);
                    uc(
                      s,
                      M,
                      _
                    );
                    break;
                  }
                case 5:
                  var U = d.stateNode;
                  d.flags & 32 && (Cv(U), d.flags &= -33);
                  var B = $h(s);
                  uc(s, B, U);
                  break;
                case 3:
                case 4:
                  var Y = d.stateNode.containerInfo, fe = $h(s);
                  ef(
                    s,
                    fe,
                    Y
                  );
                  break;
                default:
                  throw Error(i(161));
              }
            }
          } catch (Te) {
            Ot(s, s.return, Te);
          }
          s.flags &= -3;
        }
        r & 4096 && (s.flags &= -4097);
      }
      function Wg(s) {
        if (s.subtreeFlags & 1024)
          for (s = s.child; s !== null; ) {
            var r = s;
            Wg(r), r.tag === 5 && r.flags & 1024 && xM(r.stateNode), s = s.sibling;
          }
      }
      function is(s, r) {
        if (r.subtreeFlags & 8772)
          for (r = r.child; r !== null; )
            Hg(s, r.alternate, r), r = r.sibling;
      }
      function mr(s) {
        for (s = s.child; s !== null; ) {
          var r = s;
          switch (r.tag) {
            case 0:
            case 11:
            case 14:
            case 15:
              Us(4, r, r.return), mr(r);
              break;
            case 1:
              ii(r, r.return);
              var u = r.stateNode;
              typeof u.componentWillUnmount == "function" && Pg(
                r,
                r.return,
                u
              ), mr(r);
              break;
            case 26:
            case 27:
            case 5:
              ii(r, r.return), mr(r);
              break;
            case 22:
              ii(r, r.return), r.memoizedState === null && mr(r);
              break;
            default:
              mr(r);
          }
          s = s.sibling;
        }
      }
      function Ns(s, r, u) {
        for (u = u && (r.subtreeFlags & 8772) !== 0, r = r.child; r !== null; ) {
          var d = r.alternate, _ = s, M = r, U = M.flags;
          switch (M.tag) {
            case 0:
            case 11:
            case 15:
              Ns(
                _,
                M,
                u
              ), Bo(4, M);
              break;
            case 1:
              if (Ns(
                _,
                M,
                u
              ), d = M, _ = d.stateNode, typeof _.componentDidMount == "function")
                try {
                  _.componentDidMount();
                } catch (fe) {
                  Ot(d, d.return, fe);
                }
              if (d = M, _ = d.updateQueue, _ !== null) {
                var B = d.stateNode;
                try {
                  var Y = _.shared.hiddenCallbacks;
                  if (Y !== null)
                    for (_.shared.hiddenCallbacks = null, _ = 0; _ < Y.length; _++)
                      Pe(Y[_], B);
                } catch (fe) {
                  Ot(d, d.return, fe);
                }
              }
              u && U & 64 && Dg(M), ga(M, M.return);
              break;
            case 26:
            case 27:
            case 5:
              Ns(
                _,
                M,
                u
              ), u && d === null && U & 4 && Og(M), ga(M, M.return);
              break;
            case 12:
              Ns(
                _,
                M,
                u
              );
              break;
            case 13:
              Ns(
                _,
                M,
                u
              ), u && U & 4 && Vg(_, M);
              break;
            case 22:
              M.memoizedState === null && Ns(
                _,
                M,
                u
              ), ga(M, M.return);
              break;
            default:
              Ns(
                _,
                M,
                u
              );
          }
          r = r.sibling;
        }
      }
      function sf(s, r) {
        var u = null;
        s !== null && s.memoizedState !== null && s.memoizedState.cachePool !== null && (u = s.memoizedState.cachePool.pool), s = null, r.memoizedState !== null && r.memoizedState.cachePool !== null && (s = r.memoizedState.cachePool.pool), s !== u && (s != null && s.refCount++, u != null && Io(u));
      }
      function af(s, r) {
        s = null, r.alternate !== null && (s = r.alternate.memoizedState.cache), r = r.memoizedState.cache, r !== s && (r.refCount++, s != null && Io(s));
      }
      function Ds(s, r, u, d) {
        if (r.subtreeFlags & 10256)
          for (r = r.child; r !== null; )
            Xg(
              s,
              r,
              u,
              d
            ), r = r.sibling;
      }
      function Xg(s, r, u, d) {
        var _ = r.flags;
        switch (r.tag) {
          case 0:
          case 11:
          case 15:
            Ds(
              s,
              r,
              u,
              d
            ), _ & 2048 && Bo(9, r);
            break;
          case 3:
            Ds(
              s,
              r,
              u,
              d
            ), _ & 2048 && (s = null, r.alternate !== null && (s = r.alternate.memoizedState.cache), r = r.memoizedState.cache, r !== s && (r.refCount++, s != null && Io(s)));
            break;
          case 12:
            if (_ & 2048) {
              Ds(
                s,
                r,
                u,
                d
              ), s = r.stateNode;
              try {
                var M = r.memoizedProps, U = M.id, B = M.onPostCommit;
                typeof B == "function" && B(
                  U,
                  r.alternate === null ? "mount" : "update",
                  s.passiveEffectDuration,
                  -0
                );
              } catch (Y) {
                Ot(r, r.return, Y);
              }
            } else
              Ds(
                s,
                r,
                u,
                d
              );
            break;
          case 23:
            break;
          case 22:
            M = r.stateNode, r.memoizedState !== null ? M._visibility & 4 ? Ds(
              s,
              r,
              u,
              d
            ) : Ho(
              s,
              r
            ) : M._visibility & 4 ? Ds(
              s,
              r,
              u,
              d
            ) : (M._visibility |= 4, gr(
              s,
              r,
              u,
              d,
              (r.subtreeFlags & 10256) !== 0
            )), _ & 2048 && sf(
              r.alternate,
              r
            );
            break;
          case 24:
            Ds(
              s,
              r,
              u,
              d
            ), _ & 2048 && af(r.alternate, r);
            break;
          default:
            Ds(
              s,
              r,
              u,
              d
            );
        }
      }
      function gr(s, r, u, d, _) {
        for (_ = _ && (r.subtreeFlags & 10256) !== 0, r = r.child; r !== null; ) {
          var M = s, U = r, B = u, Y = d, fe = U.flags;
          switch (U.tag) {
            case 0:
            case 11:
            case 15:
              gr(
                M,
                U,
                B,
                Y,
                _
              ), Bo(8, U);
              break;
            case 23:
              break;
            case 22:
              var Te = U.stateNode;
              U.memoizedState !== null ? Te._visibility & 4 ? gr(
                M,
                U,
                B,
                Y,
                _
              ) : Ho(
                M,
                U
              ) : (Te._visibility |= 4, gr(
                M,
                U,
                B,
                Y,
                _
              )), _ && fe & 2048 && sf(
                U.alternate,
                U
              );
              break;
            case 24:
              gr(
                M,
                U,
                B,
                Y,
                _
              ), _ && fe & 2048 && af(U.alternate, U);
              break;
            default:
              gr(
                M,
                U,
                B,
                Y,
                _
              );
          }
          r = r.sibling;
        }
      }
      function Ho(s, r) {
        if (r.subtreeFlags & 10256)
          for (r = r.child; r !== null; ) {
            var u = s, d = r, _ = d.flags;
            switch (d.tag) {
              case 22:
                Ho(u, d), _ & 2048 && sf(
                  d.alternate,
                  d
                );
                break;
              case 24:
                Ho(u, d), _ & 2048 && af(
                  d.alternate,
                  d
                );
                break;
              default:
                Ho(u, d);
            }
            r = r.sibling;
          }
      }
      function va(s) {
        if (s.subtreeFlags & Ir)
          for (s = s.child; s !== null; )
            kg(s), s = s.sibling;
      }
      function kg(s) {
        switch (s.tag) {
          case 26:
            va(s), s.flags & Ir && (s.memoizedState !== null ? pE(
              Di,
              s.memoizedState,
              s.memoizedProps
            ) : Rv(s.type, s.memoizedProps));
            break;
          case 5:
            va(s), s.flags & Ir && Rv(s.type, s.memoizedProps);
            break;
          case 3:
          case 4:
            if (_i) {
              var r = Di;
              Di = Uf(
                s.stateNode.containerInfo
              ), va(s), Di = r;
            } else va(s);
            break;
          case 22:
            s.memoizedState === null && (r = s.alternate, r !== null && r.memoizedState !== null ? (r = Ir, Ir = 16777216, va(s), Ir = r) : va(s));
            break;
          default:
            va(s);
        }
      }
      function qg(s) {
        var r = s.alternate;
        if (r !== null && (s = r.child, s !== null)) {
          r.child = null;
          do
            r = s.sibling, s.sibling = null, s = r;
          while (s !== null);
        }
      }
      function Fo(s) {
        var r = s.deletions;
        if ((s.flags & 16) !== 0) {
          if (r !== null)
            for (var u = 0; u < r.length; u++) {
              var d = r[u];
              Sn = d, jg(
                d,
                s
              );
            }
          qg(s);
        }
        if (s.subtreeFlags & 10256)
          for (s = s.child; s !== null; )
            Yg(s), s = s.sibling;
      }
      function Yg(s) {
        switch (s.tag) {
          case 0:
          case 11:
          case 15:
            Fo(s), s.flags & 2048 && Us(9, s, s.return);
            break;
          case 3:
            Fo(s);
            break;
          case 12:
            Fo(s);
            break;
          case 22:
            var r = s.stateNode;
            s.memoizedState !== null && r._visibility & 4 && (s.return === null || s.return.tag !== 13) ? (r._visibility &= -5, hc(s)) : Fo(s);
            break;
          default:
            Fo(s);
        }
      }
      function hc(s) {
        var r = s.deletions;
        if ((s.flags & 16) !== 0) {
          if (r !== null)
            for (var u = 0; u < r.length; u++) {
              var d = r[u];
              Sn = d, jg(
                d,
                s
              );
            }
          qg(s);
        }
        for (s = s.child; s !== null; ) {
          switch (r = s, r.tag) {
            case 0:
            case 11:
            case 15:
              Us(8, r, r.return), hc(r);
              break;
            case 22:
              u = r.stateNode, u._visibility & 4 && (u._visibility &= -5, hc(r));
              break;
            default:
              hc(r);
          }
          s = s.sibling;
        }
      }
      function jg(s, r) {
        for (; Sn !== null; ) {
          var u = Sn;
          switch (u.tag) {
            case 0:
            case 11:
            case 15:
              Us(8, u, r);
              break;
            case 23:
            case 22:
              if (u.memoizedState !== null && u.memoizedState.cachePool !== null) {
                var d = u.memoizedState.cachePool.pool;
                d != null && d.refCount++;
              }
              break;
            case 24:
              Io(u.memoizedState.cache);
          }
          if (d = u.child, d !== null) d.return = u, Sn = d;
          else
            e: for (u = s; Sn !== null; ) {
              d = Sn;
              var _ = d.sibling, M = d.return;
              if (Fg(d), d === u) {
                Sn = null;
                break e;
              }
              if (_ !== null) {
                _.return = M, Sn = _;
                break e;
              }
              Sn = M;
            }
        }
      }
      function rf(s) {
        var r = Av(s);
        if (r != null) {
          if (typeof r.memoizedProps["data-testname"] != "string")
            throw Error(i(364));
          return r;
        }
        if (s = EM(s), s === null) throw Error(i(362));
        return s.stateNode.current;
      }
      function of(s, r) {
        var u = s.tag;
        switch (r.$$typeof) {
          case Lc:
            if (s.type === r.value) return !0;
            break;
          case Uc:
            e: {
              for (r = r.value, s = [s, 0], u = 0; u < s.length; ) {
                var d = s[u++], _ = d.tag, M = s[u++], U = r[M];
                if (_ !== 5 && _ !== 26 && _ !== 27 || !Wo(d)) {
                  for (; U != null && of(d, U); )
                    M++, U = r[M];
                  if (M === r.length) {
                    r = !0;
                    break e;
                  } else
                    for (d = d.child; d !== null; )
                      s.push(d, M), d = d.sibling;
                }
              }
              r = !1;
            }
            return r;
          case Nc:
            if ((u === 5 || u === 26 || u === 27) && AM(s.stateNode, r.value))
              return !0;
            break;
          case Pc:
            if ((u === 5 || u === 6 || u === 26 || u === 27) && (s = TM(s), s !== null && 0 <= s.indexOf(r.value)))
              return !0;
            break;
          case Dc:
            if ((u === 5 || u === 26 || u === 27) && (s = s.memoizedProps["data-testname"], typeof s == "string" && s.toLowerCase() === r.value.toLowerCase()))
              return !0;
            break;
          default:
            throw Error(i(365));
        }
        return !1;
      }
      function lf(s) {
        switch (s.$$typeof) {
          case Lc:
            return "<" + (l(s.value) || "Unknown") + ">";
          case Uc:
            return ":has(" + (lf(s) || "") + ")";
          case Nc:
            return '[role="' + s.value + '"]';
          case Pc:
            return '"' + s.value + '"';
          case Dc:
            return '[data-testname="' + s.value + '"]';
          default:
            throw Error(i(365));
        }
      }
      function Zg(s, r) {
        var u = [];
        s = [s, 0];
        for (var d = 0; d < s.length; ) {
          var _ = s[d++], M = _.tag, U = s[d++], B = r[U];
          if (M !== 5 && M !== 26 && M !== 27 || !Wo(_)) {
            for (; B != null && of(_, B); )
              U++, B = r[U];
            if (U === r.length) u.push(_);
            else
              for (_ = _.child; _ !== null; )
                s.push(_, U), _ = _.sibling;
          }
        }
        return u;
      }
      function cf(s, r) {
        if (!Go) throw Error(i(363));
        s = rf(s), s = Zg(s, r), r = [], s = Array.from(s);
        for (var u = 0; u < s.length; ) {
          var d = s[u++], _ = d.tag;
          if (_ === 5 || _ === 26 || _ === 27)
            Wo(d) || r.push(d.stateNode);
          else
            for (d = d.child; d !== null; )
              s.push(d), d = d.sibling;
        }
        return r;
      }
      function ai() {
        if ((Ht & 2) !== 0 && wt !== 0)
          return wt & -wt;
        if (ut.T !== null) {
          var s = Cr;
          return s !== 0 ? s : ze();
        }
        return pM();
      }
      function Kg() {
        Ei === 0 && (Ei = (wt & 536870912) === 0 || Ct ? H() : 536870912);
        var s = Mi.current;
        return s !== null && (s.flags |= 32), Ei;
      }
      function Hn(s, r, u) {
        (s === Vt && Gt === 2 || s.cancelPendingCommit !== null) && (vr(s, 0), ss(
          s,
          wt,
          Ei,
          !1
        )), X(s, u), ((Ht & 2) === 0 || s !== Vt) && (s === Vt && ((Ht & 2) === 0 && (Ca |= u), en === 4 && ss(
          s,
          wt,
          Ei,
          !1
        )), L(s));
      }
      function Jg(s, r, u) {
        if ((Ht & 6) !== 0) throw Error(i(327));
        var d = !u && (r & 60) === 0 && (r & s.expiredLanes) === 0 || R(s, r), _ = d ? XS(s, r) : df(s, r, !0), M = d;
        do {
          if (_ === 0) {
            zr && !d && ss(s, r, 0, !1);
            break;
          } else if (_ === 6)
            ss(
              s,
              r,
              0,
              !us
            );
          else {
            if (u = s.current.alternate, M && !GS(u)) {
              _ = df(s, r, !1), M = !1;
              continue;
            }
            if (_ === 2) {
              if (M = r, s.errorRecoveryDisabledLanes & M)
                var U = 0;
              else
                U = s.pendingLanes & -536870913, U = U !== 0 ? U : U & 536870912 ? 536870912 : 0;
              if (U !== 0) {
                r = U;
                e: {
                  var B = s;
                  _ = Jo;
                  var Y = vi && B.current.memoizedState.isDehydrated;
                  if (Y && (vr(B, U).flags |= 256), U = df(
                    B,
                    U,
                    !1
                  ), U !== 2) {
                    if (qf && !Y) {
                      B.errorRecoveryDisabledLanes |= M, Ca |= M, _ = 4;
                      break e;
                    }
                    M = Ki, Ki = _, M !== null && uf(M);
                  }
                  _ = U;
                }
                if (M = !1, _ !== 2) continue;
              }
            }
            if (_ === 1) {
              vr(s, 0), ss(s, r, 0, !0);
              break;
            }
            e: {
              switch (d = s, _) {
                case 0:
                case 1:
                  throw Error(i(345));
                case 4:
                  if ((r & 4194176) === r) {
                    ss(
                      d,
                      r,
                      Ei,
                      !us
                    );
                    break e;
                  }
                  break;
                case 2:
                  Ki = null;
                  break;
                case 3:
                case 5:
                  break;
                default:
                  throw Error(i(329));
              }
              if (d.finishedWork = u, d.finishedLanes = r, (r & 62914560) === r && (M = Zf + 300 - Ui(), 10 < M)) {
                if (ss(
                  d,
                  r,
                  Ei,
                  !us
                ), N(d, 0) !== 0) break e;
                d.timeoutHandle = hM(
                  Qg.bind(
                    null,
                    d,
                    u,
                    Ki,
                    Oc,
                    jf,
                    r,
                    Ei,
                    Ca,
                    Br,
                    us,
                    2,
                    -0,
                    0
                  ),
                  M
                );
                break e;
              }
              Qg(
                d,
                u,
                Ki,
                Oc,
                jf,
                r,
                Ei,
                Ca,
                Br,
                us,
                0,
                -0,
                0
              );
            }
          }
          break;
        } while (!0);
        L(s);
      }
      function uf(s) {
        Ki === null ? Ki = s : Ki.push.apply(
          Ki,
          s
        );
      }
      function Qg(s, r, u, d, _, M, U, B, Y, fe, Te, Oe, He) {
        var dt = r.subtreeFlags;
        if ((dt & 8192 || (dt & 16785408) === 16785408) && (_M(), kg(r), r = yM(), r !== null)) {
          s.cancelPendingCommit = r(
            ov.bind(
              null,
              s,
              u,
              d,
              _,
              U,
              B,
              Y,
              1,
              Oe,
              He
            )
          ), ss(s, M, U, !fe);
          return;
        }
        ov(
          s,
          u,
          d,
          _,
          U,
          B,
          Y,
          Te,
          Oe,
          He
        );
      }
      function GS(s) {
        for (var r = s; ; ) {
          var u = r.tag;
          if ((u === 0 || u === 11 || u === 15) && r.flags & 16384 && (u = r.updateQueue, u !== null && (u = u.stores, u !== null)))
            for (var d = 0; d < u.length; d++) {
              var _ = u[d], M = _.getSnapshot;
              _ = _.value;
              try {
                if (!ci(M(), _)) return !1;
              } catch {
                return !1;
              }
            }
          if (u = r.child, r.subtreeFlags & 16384 && u !== null)
            u.return = r, r = u;
          else {
            if (r === s) break;
            for (; r.sibling === null; ) {
              if (r.return === null || r.return === s) return !0;
              r = r.return;
            }
            r.sibling.return = r.return, r = r.sibling;
          }
        }
        return !0;
      }
      function ss(s, r, u, d) {
        r &= ~Yf, r &= ~Ca, s.suspendedLanes |= r, s.pingedLanes &= ~r, d && (s.warmLanes |= r), d = s.expirationTimes;
        for (var _ = r; 0 < _; ) {
          var M = 31 - oi(_), U = 1 << M;
          d[M] = -1, _ &= ~U;
        }
        u !== 0 && ae(s, u, r);
      }
      function $g() {
        return (Ht & 6) === 0 ? (j(0), !1) : !0;
      }
      function hf() {
        if (Tt !== null) {
          if (Gt === 0)
            var s = Tt.return;
          else
            s = Tt, ls = wa = null, te(s), Nr = null, jo = 0, s = Tt;
          for (; s !== null; )
            Ng(s.alternate, s), s = s.return;
          Tt = null;
        }
      }
      function vr(s, r) {
        s.finishedWork = null, s.finishedLanes = 0;
        var u = s.timeoutHandle;
        u !== Rf && (s.timeoutHandle = Rf, fM(u)), u = s.cancelPendingCommit, u !== null && (s.cancelPendingCommit = null, u()), hf(), Vt = s, Tt = u = Ps(s.current, null), wt = r, Gt = 0, hi = null, us = !1, zr = R(s, r), qf = !1, Br = Ei = Yf = Ca = Gs = en = 0, Ki = Jo = null, jf = !1, (r & 8) !== 0 && (r |= r & 32);
        var d = s.entangledLanes;
        if (d !== 0)
          for (s = s.entanglements, d &= r; 0 < d; ) {
            var _ = 31 - oi(d), M = 1 << _;
            r |= s[_], d &= ~M;
          }
        return hs = r, ue(), u;
      }
      function ev(s, r) {
        St = null, ut.H = Zi, r === Yo ? (r = ke(), Gt = 3) : r === Vf ? (r = ke(), Gt = 4) : Gt = r === Jv ? 8 : r !== null && typeof r == "object" && typeof r.then == "function" ? 6 : 1, hi = r, Tt === null && (en = 1, ac(
          s,
          K(r, s.current)
        ));
      }
      function tv() {
        var s = Mi.current;
        return s === null ? !0 : (wt & 4194176) === wt ? ji === null : (wt & 62914560) === wt || (wt & 536870912) !== 0 ? s === ji : !1;
      }
      function nv() {
        var s = ut.H;
        return ut.H = Zi, s === null ? Zi : s;
      }
      function iv() {
        var s = ut.A;
        return ut.A = UE, s;
      }
      function ff() {
        en = 4, us || (wt & 4194176) !== wt && Mi.current !== null || (zr = !0), (Gs & 134217727) === 0 && (Ca & 134217727) === 0 || Vt === null || ss(
          Vt,
          wt,
          Ei,
          !1
        );
      }
      function df(s, r, u) {
        var d = Ht;
        Ht |= 2;
        var _ = nv(), M = iv();
        (Vt !== s || wt !== r) && (Oc = null, vr(s, r)), r = !1;
        var U = en;
        e: do
          try {
            if (Gt !== 0 && Tt !== null) {
              var B = Tt, Y = hi;
              switch (Gt) {
                case 8:
                  hf(), U = 6;
                  break e;
                case 3:
                case 2:
                case 6:
                  Mi.current === null && (r = !0);
                  var fe = Gt;
                  if (Gt = 0, hi = null, _r(s, B, Y, fe), u && zr) {
                    U = 0;
                    break e;
                  }
                  break;
                default:
                  fe = Gt, Gt = 0, hi = null, _r(s, B, Y, fe);
              }
            }
            WS(), U = en;
            break;
          } catch (Te) {
            ev(s, Te);
          }
        while (!0);
        return r && s.shellSuspendCounter++, ls = wa = null, Ht = d, ut.H = _, ut.A = M, Tt === null && (Vt = null, wt = 0, ue()), U;
      }
      function WS() {
        for (; Tt !== null; ) sv(Tt);
      }
      function XS(s, r) {
        var u = Ht;
        Ht |= 2;
        var d = nv(), _ = iv();
        Vt !== s || wt !== r ? (Oc = null, Qo = Ui() + 500, vr(s, r)) : zr = R(
          s,
          r
        );
        e: do
          try {
            if (Gt !== 0 && Tt !== null) {
              r = Tt;
              var M = hi;
              t: switch (Gt) {
                case 1:
                  Gt = 0, hi = null, _r(s, r, M, 1);
                  break;
                case 2:
                  if (Ae(M)) {
                    Gt = 0, hi = null, av(r);
                    break;
                  }
                  r = function() {
                    Gt === 2 && Vt === s && (Gt = 7), L(s);
                  }, M.then(r, r);
                  break e;
                case 3:
                  Gt = 7;
                  break e;
                case 4:
                  Gt = 5;
                  break e;
                case 7:
                  Ae(M) ? (Gt = 0, hi = null, av(r)) : (Gt = 0, hi = null, _r(s, r, M, 7));
                  break;
                case 5:
                  var U = null;
                  switch (Tt.tag) {
                    case 26:
                      U = Tt.memoizedState;
                    case 5:
                    case 27:
                      var B = Tt, Y = B.type, fe = B.pendingProps;
                      if (U ? Xv(U) : wv(Y, fe)) {
                        Gt = 0, hi = null;
                        var Te = B.sibling;
                        if (Te !== null) Tt = Te;
                        else {
                          var Oe = B.return;
                          Oe !== null ? (Tt = Oe, fc(Oe)) : Tt = null;
                        }
                        break t;
                      }
                  }
                  Gt = 0, hi = null, _r(s, r, M, 5);
                  break;
                case 6:
                  Gt = 0, hi = null, _r(s, r, M, 6);
                  break;
                case 8:
                  hf(), en = 6;
                  break e;
                default:
                  throw Error(i(462));
              }
            }
            kS();
            break;
          } catch (He) {
            ev(s, He);
          }
        while (!0);
        return ls = wa = null, ut.H = d, ut.A = _, Ht = u, Tt !== null ? 0 : (Vt = null, wt = 0, ue(), en);
      }
      function kS() {
        for (; Tt !== null && !xE(); )
          sv(Tt);
      }
      function sv(s) {
        var r = Tg(
          s.alternate,
          s,
          hs
        );
        s.memoizedProps = s.pendingProps, r === null ? fc(s) : Tt = r;
      }
      function av(s) {
        var r = s, u = r.alternate;
        switch (r.tag) {
          case 15:
          case 0:
            r = yg(
              u,
              r,
              r.pendingProps,
              r.type,
              void 0,
              wt
            );
            break;
          case 11:
            r = yg(
              u,
              r,
              r.pendingProps,
              r.type.render,
              r.ref,
              wt
            );
            break;
          case 5:
            te(r);
          default:
            Ng(u, r), r = Tt = hv(r, hs), r = Tg(u, r, hs);
        }
        s.memoizedProps = s.pendingProps, r === null ? fc(s) : Tt = r;
      }
      function _r(s, r, u, d) {
        ls = wa = null, te(r), Nr = null, jo = 0;
        var _ = r.return;
        try {
          if (IS(
            s,
            _,
            r,
            u,
            wt
          )) {
            en = 1, ac(
              s,
              K(u, s.current)
            ), Tt = null;
            return;
          }
        } catch (M) {
          if (_ !== null) throw Tt = _, M;
          en = 1, ac(
            s,
            K(u, s.current)
          ), Tt = null;
          return;
        }
        r.flags & 32768 ? (Ct || d === 1 ? s = !0 : zr || (wt & 536870912) !== 0 ? s = !1 : (us = s = !0, (d === 2 || d === 3 || d === 6) && (d = Mi.current, d !== null && d.tag === 13 && (d.flags |= 16384))), rv(r, s)) : fc(r);
      }
      function fc(s) {
        var r = s;
        do {
          if ((r.flags & 32768) !== 0) {
            rv(
              r,
              us
            );
            return;
          }
          s = r.return;
          var u = BS(
            r.alternate,
            r,
            hs
          );
          if (u !== null) {
            Tt = u;
            return;
          }
          if (r = r.sibling, r !== null) {
            Tt = r;
            return;
          }
          Tt = r = s;
        } while (r !== null);
        en === 0 && (en = 5);
      }
      function rv(s, r) {
        do {
          var u = HS(s.alternate, s);
          if (u !== null) {
            u.flags &= 32767, Tt = u;
            return;
          }
          if (u = s.return, u !== null && (u.flags |= 32768, u.subtreeFlags = 0, u.deletions = null), !r && (s = s.sibling, s !== null)) {
            Tt = s;
            return;
          }
          Tt = s = u;
        } while (s !== null);
        en = 6, Tt = null;
      }
      function ov(s, r, u, d, _, M, U, B, Y, fe) {
        var Te = ut.T, Oe = xa();
        try {
          Kn(2), ut.T = null, qS(
            s,
            r,
            u,
            d,
            Oe,
            _,
            M,
            U,
            B,
            Y,
            fe
          );
        } finally {
          ut.T = Te, Kn(Oe);
        }
      }
      function qS(s, r, u, d, _, M, U, B) {
        do
          _a();
        while (La !== null);
        if ((Ht & 6) !== 0) throw Error(i(327));
        var Y = s.finishedWork;
        if (d = s.finishedLanes, Y === null) return null;
        if (s.finishedWork = null, s.finishedLanes = 0, Y === s.current) throw Error(i(177));
        s.callbackNode = null, s.callbackPriority = 0, s.cancelPendingCommit = null;
        var fe = Y.lanes | Y.childLanes;
        if (fe |= If, ne(
          s,
          d,
          fe,
          M,
          U,
          B
        ), s === Vt && (Tt = Vt = null, wt = 0), (Y.subtreeFlags & 10256) === 0 && (Y.flags & 10256) === 0 || Ic || (Ic = !0, Kf = fe, Jf = u, KS(Pf, function() {
          return _a(), null;
        })), u = (Y.flags & 15990) !== 0, (Y.subtreeFlags & 15990) !== 0 || u ? (u = ut.T, ut.T = null, M = xa(), Kn(2), U = Ht, Ht |= 4, FS(s, Y), Gg(Y, s), cM(s.containerInfo), s.current = Y, Hg(s, Y.alternate, Y), SE(), Ht = U, Kn(M), ut.T = u) : s.current = Y, Ic ? (Ic = !1, La = s, $o = d) : lv(s, fe), fe = s.pendingLanes, fe === 0 && (Ws = null), W(Y.stateNode), L(s), r !== null)
          for (_ = s.onRecoverableError, Y = 0; Y < r.length; Y++)
            fe = r[Y], _(fe.value, {
              componentStack: fe.stack
            });
        return ($o & 3) !== 0 && _a(), fe = s.pendingLanes, (d & 4194218) !== 0 && (fe & 42) !== 0 ? s === Qf ? el++ : (el = 0, Qf = s) : el = 0, j(0), null;
      }
      function lv(s, r) {
        (s.pooledCacheLanes &= r) === 0 && (r = s.pooledCache, r != null && (s.pooledCache = null, Io(r)));
      }
      function _a() {
        if (La !== null) {
          var s = La, r = Kf;
          Kf = 0;
          var u = q($o), d = 32 > u ? 32 : u;
          u = ut.T;
          var _ = xa();
          try {
            if (Kn(d), ut.T = null, La === null)
              var M = !1;
            else {
              d = Jf, Jf = null;
              var U = La, B = $o;
              if (La = null, $o = 0, (Ht & 6) !== 0)
                throw Error(i(331));
              var Y = Ht;
              if (Ht |= 4, Yg(U.current), Xg(
                U,
                U.current,
                B,
                d
              ), Ht = Y, j(0, !1), li && typeof li.onPostCommitFiberRoot == "function")
                try {
                  li.onPostCommitFiberRoot(Xo, U);
                } catch {
                }
              M = !0;
            }
            return M;
          } finally {
            Kn(_), ut.T = u, lv(s, r);
          }
        }
        return !1;
      }
      function cv(s, r, u) {
        r = K(u, r), r = zh(s.stateNode, r, 2), s = Xe(s, r, 2), s !== null && (X(s, 2), L(s));
      }
      function Ot(s, r, u) {
        if (s.tag === 3)
          cv(s, s, u);
        else
          for (; r !== null; ) {
            if (r.tag === 3) {
              cv(
                r,
                s,
                u
              );
              break;
            } else if (r.tag === 1) {
              var d = r.stateNode;
              if (typeof r.type.getDerivedStateFromError == "function" || typeof d.componentDidCatch == "function" && (Ws === null || !Ws.has(d))) {
                s = K(u, s), u = fg(2), d = Xe(r, u, 2), d !== null && (dg(
                  u,
                  d,
                  r,
                  s
                ), X(d, 2), L(d));
                break;
              }
            }
            r = r.return;
          }
      }
      function pf(s, r, u) {
        var d = s.pingCache;
        if (d === null) {
          d = s.pingCache = new NE();
          var _ = /* @__PURE__ */ new Set();
          d.set(r, _);
        } else
          _ = d.get(r), _ === void 0 && (_ = /* @__PURE__ */ new Set(), d.set(r, _));
        _.has(u) || (qf = !0, _.add(u), s = YS.bind(null, s, r, u), r.then(s, s));
      }
      function YS(s, r, u) {
        var d = s.pingCache;
        d !== null && d.delete(r), s.pingedLanes |= s.suspendedLanes & u, s.warmLanes &= ~u, Vt === s && (wt & u) === u && (en === 4 || en === 3 && (wt & 62914560) === wt && 300 > Ui() - Zf ? (Ht & 2) === 0 && vr(s, 0) : Yf |= u, Br === wt && (Br = 0)), L(s);
      }
      function uv(s, r) {
        r === 0 && (r = w()), s = Ge(s, r), s !== null && (X(s, r), L(s));
      }
      function jS(s) {
        var r = s.memoizedState, u = 0;
        r !== null && (u = r.retryLane), uv(s, u);
      }
      function ZS(s, r) {
        var u = 0;
        switch (s.tag) {
          case 13:
            var d = s.stateNode, _ = s.memoizedState;
            _ !== null && (u = _.retryLane);
            break;
          case 19:
            d = s.stateNode;
            break;
          case 22:
            d = s.stateNode._retryCache;
            break;
          default:
            throw Error(i(314));
        }
        d !== null && d.delete(r), uv(s, u);
      }
      function KS(s, r) {
        return yc(s, r);
      }
      function JS(s, r, u, d) {
        this.tag = s, this.key = u, this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null, this.index = 0, this.refCleanup = this.ref = null, this.pendingProps = r, this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null, this.mode = d, this.subtreeFlags = this.flags = 0, this.deletions = null, this.childLanes = this.lanes = 0, this.alternate = null;
      }
      function mf(s) {
        return s = s.prototype, !(!s || !s.isReactComponent);
      }
      function Ps(s, r) {
        var u = s.alternate;
        return u === null ? (u = t(
          s.tag,
          r,
          s.key,
          s.mode
        ), u.elementType = s.elementType, u.type = s.type, u.stateNode = s.stateNode, u.alternate = s, s.alternate = u) : (u.pendingProps = r, u.type = s.type, u.flags = 0, u.subtreeFlags = 0, u.deletions = null), u.flags = s.flags & 31457280, u.childLanes = s.childLanes, u.lanes = s.lanes, u.child = s.child, u.memoizedProps = s.memoizedProps, u.memoizedState = s.memoizedState, u.updateQueue = s.updateQueue, r = s.dependencies, u.dependencies = r === null ? null : {
          lanes: r.lanes,
          firstContext: r.firstContext
        }, u.sibling = s.sibling, u.index = s.index, u.ref = s.ref, u.refCleanup = s.refCleanup, u;
      }
      function hv(s, r) {
        s.flags &= 31457282;
        var u = s.alternate;
        return u === null ? (s.childLanes = 0, s.lanes = r, s.child = null, s.subtreeFlags = 0, s.memoizedProps = null, s.memoizedState = null, s.updateQueue = null, s.dependencies = null, s.stateNode = null) : (s.childLanes = u.childLanes, s.lanes = u.lanes, s.child = u.child, s.subtreeFlags = 0, s.deletions = null, s.memoizedProps = u.memoizedProps, s.memoizedState = u.memoizedState, s.updateQueue = u.updateQueue, s.type = u.type, r = u.dependencies, s.dependencies = r === null ? null : {
          lanes: r.lanes,
          firstContext: r.firstContext
        }), s;
      }
      function dc(s, r, u, d, _, M) {
        var U = 0;
        if (d = s, typeof s == "function") mf(s) && (U = 1);
        else if (typeof s == "string")
          U = _i && Cn ? Bv(s, u, An.current) ? 26 : qv(s) ? 27 : 5 : _i ? Bv(
            s,
            u,
            An.current
          ) ? 26 : 5 : Cn && qv(s) ? 27 : 5;
        else
          e: switch (s) {
            case xr:
              return ya(
                u.children,
                _,
                M,
                r
              );
            case _v:
              U = 8, _ |= 24;
              break;
            case xf:
              return s = t(12, u, r, _ | 2), s.elementType = xf, s.lanes = M, s;
            case Mf:
              return s = t(13, u, r, _), s.elementType = Mf, s.lanes = M, s;
            case Ef:
              return s = t(19, u, r, _), s.elementType = Ef, s.lanes = M, s;
            case xv:
              return fv(u, _, M, r);
            default:
              if (typeof s == "object" && s !== null)
                switch (s.$$typeof) {
                  case tM:
                  case Os:
                    U = 10;
                    break e;
                  case yv:
                    U = 9;
                    break e;
                  case Sf:
                    U = 11;
                    break e;
                  case bf:
                    U = 14;
                    break e;
                  case Is:
                    U = 16, d = null;
                    break e;
                }
              U = 29, u = Error(
                i(
                  130,
                  s === null ? "null" : typeof s,
                  ""
                )
              ), d = null;
          }
        return r = t(U, u, r, _), r.elementType = s, r.type = d, r.lanes = M, r;
      }
      function ya(s, r, u, d) {
        return s = t(7, s, d, r), s.lanes = u, s;
      }
      function fv(s, r, u, d) {
        s = t(22, s, d, r), s.elementType = xv, s.lanes = u;
        var _ = {
          _visibility: 1,
          _pendingVisibility: 1,
          _pendingMarkers: null,
          _retryCache: null,
          _transitions: null,
          _current: null,
          detach: function() {
            var M = _._current;
            if (M === null) throw Error(i(456));
            if ((_._pendingVisibility & 2) === 0) {
              var U = Ge(M, 2);
              U !== null && (_._pendingVisibility |= 2, Hn(U, M, 2));
            }
          },
          attach: function() {
            var M = _._current;
            if (M === null) throw Error(i(456));
            if ((_._pendingVisibility & 2) !== 0) {
              var U = Ge(M, 2);
              U !== null && (_._pendingVisibility &= -3, Hn(U, M, 2));
            }
          }
        };
        return s.stateNode = _, s;
      }
      function gf(s, r, u) {
        return s = t(6, s, null, r), s.lanes = u, s;
      }
      function vf(s, r, u) {
        return r = t(
          4,
          s.children !== null ? s.children : [],
          s.key,
          r
        ), r.lanes = u, r.stateNode = {
          containerInfo: s.containerInfo,
          pendingChildren: null,
          implementation: s.implementation
        }, r;
      }
      function QS(s, r, u, d, _, M, U, B) {
        this.tag = 1, this.containerInfo = s, this.finishedWork = this.pingCache = this.current = this.pendingChildren = null, this.timeoutHandle = Rf, this.callbackNode = this.next = this.pendingContext = this.context = this.cancelPendingCommit = null, this.callbackPriority = 0, this.expirationTimes = C(-1), this.entangledLanes = this.shellSuspendCounter = this.errorRecoveryDisabledLanes = this.finishedLanes = this.expiredLanes = this.warmLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0, this.entanglements = C(0), this.hiddenUpdates = C(null), this.identifierPrefix = d, this.onUncaughtError = _, this.onCaughtError = M, this.onRecoverableError = U, this.pooledCache = null, this.pooledCacheLanes = 0, this.formState = B, this.incompleteTransitions = /* @__PURE__ */ new Map();
      }
      function dv(s, r, u, d, _, M, U, B, Y, fe, Te, Oe) {
        return s = new QS(
          s,
          r,
          u,
          U,
          B,
          Y,
          fe,
          Oe
        ), r = 1, M === !0 && (r |= 24), M = t(3, null, null, r), s.current = M, M.stateNode = s, r = jh(), r.refCount++, s.pooledCache = r, r.refCount++, M.memoizedState = {
          element: d,
          isDehydrated: u,
          cache: r
        }, Mt(M), s;
      }
      function pv(s) {
        return s ? (s = Er, s) : Er;
      }
      function mv(s) {
        var r = s._reactInternals;
        if (r === void 0)
          throw typeof s.render == "function" ? Error(i(188)) : (s = Object.keys(s).join(","), Error(i(268, s)));
        return s = v(r), s = s !== null ? x(s) : null, s === null ? null : Vo(s.stateNode);
      }
      function gv(s, r, u, d, _, M) {
        _ = pv(_), d.context === null ? d.context = _ : d.pendingContext = _, d = Je(r), d.payload = { element: u }, M = M === void 0 ? null : M, M !== null && (d.callback = M), u = Xe(s, d, r), u !== null && (Hn(u, s, r), Be(u, s, r));
      }
      function vv(s, r) {
        if (s = s.memoizedState, s !== null && s.dehydrated !== null) {
          var u = s.retryLane;
          s.retryLane = u !== 0 && u < r ? u : r;
        }
      }
      function _f(s, r) {
        vv(s, r), (s = s.alternate) && vv(s, r);
      }
      var bt = {}, $S = $u, ri = pS(), yf = Object.assign, eM = Symbol.for("react.element"), pc = Symbol.for("react.transitional.element"), yr = Symbol.for("react.portal"), xr = Symbol.for("react.fragment"), _v = Symbol.for("react.strict_mode"), xf = Symbol.for("react.profiler"), tM = Symbol.for("react.provider"), yv = Symbol.for("react.consumer"), Os = Symbol.for("react.context"), Sf = Symbol.for("react.forward_ref"), Mf = Symbol.for("react.suspense"), Ef = Symbol.for("react.suspense_list"), bf = Symbol.for("react.memo"), Is = Symbol.for("react.lazy"), xv = Symbol.for("react.offscreen"), nM = Symbol.for("react.memo_cache_sentinel"), Sv = Symbol.iterator, iM = Symbol.for("react.client.reference"), ut = $S.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, Tf, Mv, Af = !1, mc = Array.isArray, sM = e.rendererVersion, aM = e.rendererPackageName, Ev = e.extraDevToolsConfig, Vo = e.getPublicInstance, rM = e.getRootHostContext, oM = e.getChildHostContext, lM = e.prepareForCommit, cM = e.resetAfterCommit, uM = e.createInstance, wf = e.appendInitialChild, bv = e.finalizeInitialChildren, gc = e.shouldSetTextContent, Tv = e.createTextInstance, hM = e.scheduleTimeout, fM = e.cancelTimeout, Rf = e.noTimeout, as = e.isPrimaryRenderer;
      e.warnsIfNotActing;
      var Rn = e.supportsMutation, zs = e.supportsPersistence, vi = e.supportsHydration, Av = e.getInstanceFromNode;
      e.beforeActiveInstanceBlur, e.afterActiveInstanceBlur;
      var dM = e.preparePortalMount;
      e.prepareScopeUpdate, e.getInstanceFromScope;
      var Kn = e.setCurrentUpdatePriority, xa = e.getCurrentUpdatePriority, pM = e.resolveUpdatePriority;
      e.resolveEventType, e.resolveEventTimeStamp;
      var mM = e.shouldAttemptEagerTransition, gM = e.detachDeletedInstance;
      e.requestPostPaintCallback;
      var vM = e.maySuspendCommit, wv = e.preloadInstance, _M = e.startSuspendingCommit, Rv = e.suspendInstance, yM = e.waitForCommitToBeReady, Sr = e.NotPendingTransition, Sa = e.HostTransitionContext, xM = e.resetFormInstance;
      e.bindToConsole;
      var SM = e.supportsMicrotasks, MM = e.scheduleMicrotask, Go = e.supportsTestSelectors, EM = e.findFiberRoot, bM = e.getBoundingRect, TM = e.getTextContent, Wo = e.isHiddenSubtree, AM = e.matchAccessibilityRole, wM = e.setFocusIfFocusable, RM = e.setupIntersectionObserver, CM = e.appendChild, LM = e.appendChildToContainer, UM = e.commitTextUpdate, NM = e.commitMount, DM = e.commitUpdate, PM = e.insertBefore, OM = e.insertInContainerBefore, IM = e.removeChild, zM = e.removeChildFromContainer, Cv = e.resetTextContent, BM = e.hideInstance, HM = e.hideTextInstance, FM = e.unhideInstance, VM = e.unhideTextInstance, GM = e.clearContainer, WM = e.cloneInstance, Lv = e.createContainerChildSet, Uv = e.appendChildToContainerChildSet, XM = e.finalizeContainerChildren, Nv = e.replaceContainerChildren, Dv = e.cloneHiddenInstance, Pv = e.cloneHiddenTextInstance, Cf = e.isSuspenseInstancePending, Lf = e.isSuspenseInstanceFallback, kM = e.getSuspenseInstanceFallbackErrorDetails, qM = e.registerSuspenseInstanceRetry, YM = e.canHydrateFormStateMarker, jM = e.isFormStateMarkerMatching, Ov = e.getNextHydratableSibling, Iv = e.getFirstHydratableChild, ZM = e.getFirstHydratableChildWithinContainer, KM = e.getFirstHydratableChildWithinSuspenseInstance, JM = e.canHydrateInstance, QM = e.canHydrateTextInstance, $M = e.canHydrateSuspenseInstance, eE = e.hydrateInstance, tE = e.hydrateTextInstance, nE = e.hydrateSuspenseInstance, iE = e.getNextHydratableInstanceAfterSuspenseInstance, sE = e.commitHydratedContainer, aE = e.commitHydratedSuspenseInstance, rE = e.clearSuspenseBoundary, oE = e.clearSuspenseBoundaryFromContainer, zv = e.shouldDeleteUnhydratedTailInstances;
      e.diffHydratedPropsForDevWarnings, e.diffHydratedTextForDevWarnings, e.describeHydratableInstanceForDevWarnings;
      var lE = e.validateHydratableInstance, cE = e.validateHydratableTextInstance, _i = e.supportsResources, Bv = e.isHostHoistableType, Uf = e.getHoistableRoot, Hv = e.getResource, Fv = e.acquireResource, Vv = e.releaseResource, uE = e.hydrateHoistable, Gv = e.mountHoistable, Wv = e.unmountHoistable, hE = e.createHoistableInstance, fE = e.prepareToCommitHoistables, dE = e.mayResourceSuspendCommit, Xv = e.preloadResource, pE = e.suspendResource, Cn = e.supportsSingletons, kv = e.resolveSingletonInstance, mE = e.clearSingleton, gE = e.acquireSingletonInstance, vE = e.releaseSingletonInstance, qv = e.isHostSingletonType, Nf = [], Mr = -1, Er = {}, oi = Math.clz32 ? Math.clz32 : b, _E = Math.log, yE = Math.LN2, vc = 128, _c = 4194304, yc = ri.unstable_scheduleCallback, Df = ri.unstable_cancelCallback, xE = ri.unstable_shouldYield, SE = ri.unstable_requestPaint, Ui = ri.unstable_now, Yv = ri.unstable_ImmediatePriority, ME = ri.unstable_UserBlockingPriority, Pf = ri.unstable_NormalPriority, EE = ri.unstable_IdlePriority, bE = ri.log, TE = ri.unstable_setDisableYieldValue, Xo = null, li = null, ci = typeof Object.is == "function" ? Object.is : Z, jv = /* @__PURE__ */ new WeakMap(), br = [], Tr = 0, xc = null, Sc = 0, yi = [], xi = 0, Ma = null, rs = 1, os = "", An = S(null), ko = S(null), Bs = S(null), Mc = S(null), Fn = null, Ln = null, Ct = !1, Ni = null, Yi = !1, Of = Error(i(519)), Si = [], Ar = 0, If = 0, Ec = null, wr = null, zf = !1, bc = !1, Bf = !1, Rr = 0, qo = null, Hf = 0, Cr = 0, Lr = null, Hs = !1, Ff = !1, AE = Object.prototype.hasOwnProperty, Yo = Error(i(460)), Vf = Error(i(474)), Tc = { then: function() {
      } }, Ur = null, Nr = null, jo = 0, Ea = At(!0), Zv = At(!1), Dr = S(null), Ac = S(0), Mi = S(null), ji = null, gn = S(0), Fs = 0, St = null, Bt = null, hn = null, wc = !1, Pr = !1, ba = !1, Rc = 0, Zo = 0, Or = null, wE = 0, Gf = function() {
        return { lastEffect: null, events: null, stores: null, memoCache: null };
      }, Zi = {
        readContext: wn,
        use: it,
        useCallback: jt,
        useContext: jt,
        useEffect: jt,
        useImperativeHandle: jt,
        useLayoutEffect: jt,
        useInsertionEffect: jt,
        useMemo: jt,
        useReducer: jt,
        useRef: jt,
        useState: jt,
        useDebugValue: jt,
        useDeferredValue: jt,
        useTransition: jt,
        useSyncExternalStore: jt,
        useId: jt
      };
      Zi.useCacheRefresh = jt, Zi.useMemoCache = jt, Zi.useHostTransitionStatus = jt, Zi.useFormState = jt, Zi.useActionState = jt, Zi.useOptimistic = jt;
      var Ta = {
        readContext: wn,
        use: it,
        useCallback: function(s, r) {
          return we().memoizedState = [
            s,
            r === void 0 ? null : r
          ], s;
        },
        useContext: wn,
        useEffect: jm,
        useImperativeHandle: function(s, r, u) {
          u = u != null ? u.concat([s]) : null, nc(
            4194308,
            4,
            Jm.bind(null, r, s),
            u
          );
        },
        useLayoutEffect: function(s, r) {
          return nc(4194308, 4, s, r);
        },
        useInsertionEffect: function(s, r) {
          nc(4, 2, s, r);
        },
        useMemo: function(s, r) {
          var u = we();
          r = r === void 0 ? null : r;
          var d = s();
          if (ba) {
            Q(!0);
            try {
              s();
            } finally {
              Q(!1);
            }
          }
          return u.memoizedState = [d, r], d;
        },
        useReducer: function(s, r, u) {
          var d = we();
          if (u !== void 0) {
            var _ = u(r);
            if (ba) {
              Q(!0);
              try {
                u(r);
              } finally {
                Q(!1);
              }
            }
          } else _ = r;
          return d.memoizedState = d.baseState = _, s = {
            pending: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: s,
            lastRenderedState: _
          }, d.queue = s, s = s.dispatch = OS.bind(
            null,
            St,
            s
          ), [d.memoizedState, s];
        },
        useRef: function(s) {
          var r = we();
          return s = { current: s }, r.memoizedState = s;
        },
        useState: function(s) {
          s = Ci(s);
          var r = s.queue, u = rg.bind(
            null,
            St,
            r
          );
          return r.dispatch = u, [s.memoizedState, u];
        },
        useDebugValue: Nh,
        useDeferredValue: function(s, r) {
          var u = we();
          return Dh(u, s, r);
        },
        useTransition: function() {
          var s = Ci(!1);
          return s = ng.bind(
            null,
            St,
            s.queue,
            !0,
            !1
          ), we().memoizedState = s, [!1, s];
        },
        useSyncExternalStore: function(s, r, u) {
          var d = St, _ = we();
          if (Ct) {
            if (u === void 0)
              throw Error(i(407));
            u = u();
          } else {
            if (u = r(), Vt === null)
              throw Error(i(349));
            (wt & 60) !== 0 || gi(d, r, u);
          }
          _.memoizedState = u;
          var M = { value: u, getSnapshot: r };
          return _.queue = M, jm(gt.bind(null, d, M, s), [
            s
          ]), d.flags |= 2048, pr(
            9,
            Ft.bind(
              null,
              d,
              M,
              u,
              r
            ),
            { destroy: void 0 },
            null
          ), u;
        },
        useId: function() {
          var s = we(), r = Vt.identifierPrefix;
          if (Ct) {
            var u = os, d = rs;
            u = (d & ~(1 << 32 - oi(d) - 1)).toString(32) + u, r = ":" + r + "R" + u, u = Rc++, 0 < u && (r += "H" + u.toString(32)), r += ":";
          } else
            u = wE++, r = ":" + r + "r" + u.toString(32) + ":";
          return s.memoizedState = r;
        },
        useCacheRefresh: function() {
          return we().memoizedState = PS.bind(
            null,
            St
          );
        }
      };
      Ta.useMemoCache = ft, Ta.useHostTransitionStatus = Ph, Ta.useFormState = tc, Ta.useActionState = tc, Ta.useOptimistic = function(s) {
        var r = we();
        r.memoizedState = r.baseState = s;
        var u = {
          pending: null,
          lanes: 0,
          dispatch: null,
          lastRenderedReducer: null,
          lastRenderedState: null
        };
        return r.queue = u, r = Oh.bind(
          null,
          St,
          !0,
          u
        ), u.dispatch = r, [s, r];
      };
      var Vs = {
        readContext: wn,
        use: it,
        useCallback: $m,
        useContext: wn,
        useEffect: Uh,
        useImperativeHandle: Qm,
        useInsertionEffect: Zm,
        useLayoutEffect: Km,
        useMemo: eg,
        useReducer: lt,
        useRef: Ym,
        useState: function() {
          return lt(et);
        },
        useDebugValue: Nh,
        useDeferredValue: function(s, r) {
          var u = Ue();
          return tg(
            u,
            Bt.memoizedState,
            s,
            r
          );
        },
        useTransition: function() {
          var s = lt(et)[0], r = Ue().memoizedState;
          return [
            typeof s == "boolean" ? s : Qe(s),
            r
          ];
        },
        useSyncExternalStore: an,
        useId: sg
      };
      Vs.useCacheRefresh = ag, Vs.useMemoCache = ft, Vs.useHostTransitionStatus = Ph, Vs.useFormState = No, Vs.useActionState = No, Vs.useOptimistic = function(s, r) {
        var u = Ue();
        return Uo(u, Bt, s, r);
      };
      var Aa = {
        readContext: wn,
        use: it,
        useCallback: $m,
        useContext: wn,
        useEffect: Uh,
        useImperativeHandle: Qm,
        useInsertionEffect: Zm,
        useLayoutEffect: Km,
        useMemo: eg,
        useReducer: bn,
        useRef: Ym,
        useState: function() {
          return bn(et);
        },
        useDebugValue: Nh,
        useDeferredValue: function(s, r) {
          var u = Ue();
          return Bt === null ? Dh(u, s, r) : tg(
            u,
            Bt.memoizedState,
            s,
            r
          );
        },
        useTransition: function() {
          var s = bn(et)[0], r = Ue().memoizedState;
          return [
            typeof s == "boolean" ? s : Qe(s),
            r
          ];
        },
        useSyncExternalStore: an,
        useId: sg
      };
      Aa.useCacheRefresh = ag, Aa.useMemoCache = ft, Aa.useHostTransitionStatus = Ph, Aa.useFormState = qm, Aa.useActionState = qm, Aa.useOptimistic = function(s, r) {
        var u = Ue();
        return Bt !== null ? Uo(u, Bt, s, r) : (u.baseState = s, [s, u.queue.dispatch]);
      };
      var Wf = {
        isMounted: function(s) {
          return (s = s._reactInternals) ? m(s) === s : !1;
        },
        enqueueSetState: function(s, r, u) {
          s = s._reactInternals;
          var d = ai(), _ = Je(d);
          _.payload = r, u != null && (_.callback = u), r = Xe(s, _, d), r !== null && (Hn(r, s, d), Be(r, s, d));
        },
        enqueueReplaceState: function(s, r, u) {
          s = s._reactInternals;
          var d = ai(), _ = Je(d);
          _.tag = 1, _.payload = r, u != null && (_.callback = u), r = Xe(s, _, d), r !== null && (Hn(r, s, d), Be(r, s, d));
        },
        enqueueForceUpdate: function(s, r) {
          s = s._reactInternals;
          var u = ai(), d = Je(u);
          d.tag = 2, r != null && (d.callback = r), r = Xe(s, d, u), r !== null && (Hn(r, s, u), Be(r, s, u));
        }
      }, Kv = typeof reportError == "function" ? reportError : function(s) {
        if (typeof window == "object" && typeof window.ErrorEvent == "function") {
          var r = new window.ErrorEvent("error", {
            bubbles: !0,
            cancelable: !0,
            message: typeof s == "object" && s !== null && typeof s.message == "string" ? String(s.message) : String(s),
            error: s
          });
          if (!window.dispatchEvent(r)) return;
        } else if (typeof process == "object" && typeof process.emit == "function") {
          process.emit("uncaughtException", s);
          return;
        }
        console.error(s);
      }, Jv = Error(i(461)), xn = !1, Xf = { dehydrated: null, treeContext: null, retryLane: 0 }, Cc = S(null), wa = null, ls = null, RE = typeof AbortController < "u" ? AbortController : function() {
        var s = [], r = this.signal = {
          aborted: !1,
          addEventListener: function(u, d) {
            s.push(d);
          }
        };
        this.abort = function() {
          r.aborted = !0, s.forEach(function(u) {
            return u();
          });
        };
      }, CE = ri.unstable_scheduleCallback, LE = ri.unstable_NormalPriority, Qt = {
        $$typeof: Os,
        Consumer: null,
        Provider: null,
        _currentValue: null,
        _currentValue2: null,
        _threadCount: 0
      }, Qv = ut.S;
      ut.S = function(s, r) {
        typeof r == "object" && r !== null && typeof r.then == "function" && Ze(s, r), Qv !== null && Qv(s, r);
      };
      var Ra = S(null), cs = !1, $t = !1, kf = !1, $v = typeof WeakSet == "function" ? WeakSet : Set, Sn = null, e0 = !1, fn = null, ui = !1, Di = null, Ir = 8192, UE = {
        getCacheForType: function(s) {
          var r = wn(Qt), u = r.data.get(s);
          return u === void 0 && (u = s(), r.data.set(s, u)), u;
        }
      }, Lc = 0, Uc = 1, Nc = 2, Dc = 3, Pc = 4;
      if (typeof Symbol == "function" && Symbol.for) {
        var Ko = Symbol.for;
        Lc = Ko("selector.component"), Uc = Ko("selector.has_pseudo_class"), Nc = Ko("selector.role"), Dc = Ko("selector.test_id"), Pc = Ko("selector.text");
      }
      var NE = typeof WeakMap == "function" ? WeakMap : Map, Ht = 0, Vt = null, Tt = null, wt = 0, Gt = 0, hi = null, us = !1, zr = !1, qf = !1, hs = 0, en = 0, Gs = 0, Ca = 0, Yf = 0, Ei = 0, Br = 0, Jo = null, Ki = null, jf = !1, Zf = 0, Qo = 1 / 0, Oc = null, Ws = null, Ic = !1, La = null, $o = 0, Kf = 0, Jf = null, el = 0, Qf = null;
      return bt.attemptContinuousHydration = function(s) {
        if (s.tag === 13) {
          var r = Ge(s, 67108864);
          r !== null && Hn(r, s, 67108864), _f(s, 67108864);
        }
      }, bt.attemptHydrationAtCurrentPriority = function(s) {
        if (s.tag === 13) {
          var r = ai(), u = Ge(s, r);
          u !== null && Hn(u, s, r), _f(s, r);
        }
      }, bt.attemptSynchronousHydration = function(s) {
        switch (s.tag) {
          case 3:
            if (s = s.stateNode, s.current.memoizedState.isDehydrated) {
              var r = A(s.pendingLanes);
              if (r !== 0) {
                for (s.pendingLanes |= 2, s.entangledLanes |= 2; r; ) {
                  var u = 1 << 31 - oi(r);
                  s.entanglements[1] |= u, r &= ~u;
                }
                L(s), (Ht & 6) === 0 && (Qo = Ui() + 500, j(0));
              }
            }
            break;
          case 13:
            r = Ge(s, 2), r !== null && Hn(r, s, 2), $g(), _f(s, 2);
        }
      }, bt.batchedUpdates = function(s, r) {
        return s(r);
      }, bt.createComponentSelector = function(s) {
        return { $$typeof: Lc, value: s };
      }, bt.createContainer = function(s, r, u, d, _, M, U, B, Y, fe) {
        return dv(
          s,
          r,
          !1,
          null,
          u,
          d,
          M,
          U,
          B,
          Y,
          fe,
          null
        );
      }, bt.createHasPseudoClassSelector = function(s) {
        return { $$typeof: Uc, value: s };
      }, bt.createHydrationContainer = function(s, r, u, d, _, M, U, B, Y, fe, Te, Oe, He) {
        return s = dv(
          u,
          d,
          !0,
          s,
          _,
          M,
          B,
          Y,
          fe,
          Te,
          Oe,
          He
        ), s.context = pv(null), u = s.current, d = ai(), _ = Je(d), _.callback = r ?? null, Xe(u, _, d), s.current.lanes = d, X(s, d), L(s), s;
      }, bt.createPortal = function(s, r, u) {
        var d = 3 < arguments.length && arguments[3] !== void 0 ? arguments[3] : null;
        return {
          $$typeof: yr,
          key: d == null ? null : "" + d,
          children: s,
          containerInfo: r,
          implementation: u
        };
      }, bt.createRoleSelector = function(s) {
        return { $$typeof: Nc, value: s };
      }, bt.createTestNameSelector = function(s) {
        return { $$typeof: Dc, value: s };
      }, bt.createTextSelector = function(s) {
        return { $$typeof: Pc, value: s };
      }, bt.defaultOnCaughtError = function(s) {
        console.error(s);
      }, bt.defaultOnRecoverableError = function(s) {
        Kv(s);
      }, bt.defaultOnUncaughtError = function(s) {
        Kv(s);
      }, bt.deferredUpdates = function(s) {
        var r = ut.T, u = xa();
        try {
          return Kn(32), ut.T = null, s();
        } finally {
          Kn(u), ut.T = r;
        }
      }, bt.discreteUpdates = function(s, r, u, d, _) {
        var M = ut.T, U = xa();
        try {
          return Kn(2), ut.T = null, s(r, u, d, _);
        } finally {
          Kn(U), ut.T = M, Ht === 0 && (Qo = Ui() + 500);
        }
      }, bt.findAllNodes = cf, bt.findBoundingRects = function(s, r) {
        if (!Go) throw Error(i(363));
        r = cf(s, r), s = [];
        for (var u = 0; u < r.length; u++)
          s.push(bM(r[u]));
        for (r = s.length - 1; 0 < r; r--) {
          u = s[r];
          for (var d = u.x, _ = d + u.width, M = u.y, U = M + u.height, B = r - 1; 0 <= B; B--)
            if (r !== B) {
              var Y = s[B], fe = Y.x, Te = fe + Y.width, Oe = Y.y, He = Oe + Y.height;
              if (d >= fe && M >= Oe && _ <= Te && U <= He) {
                s.splice(r, 1);
                break;
              } else if (d !== fe || u.width !== Y.width || He < M || Oe > U) {
                if (!(M !== Oe || u.height !== Y.height || Te < d || fe > _)) {
                  fe > d && (Y.width += fe - d, Y.x = d), Te < _ && (Y.width = _ - fe), s.splice(r, 1);
                  break;
                }
              } else {
                Oe > M && (Y.height += Oe - M, Y.y = M), He < U && (Y.height = U - Oe), s.splice(r, 1);
                break;
              }
            }
        }
        return s;
      }, bt.findHostInstance = mv, bt.findHostInstanceWithNoPortals = function(s) {
        return s = v(s), s = s !== null ? E(s) : null, s === null ? null : Vo(s.stateNode);
      }, bt.findHostInstanceWithWarning = function(s) {
        return mv(s);
      }, bt.flushPassiveEffects = _a, bt.flushSyncFromReconciler = function(s) {
        var r = Ht;
        Ht |= 1;
        var u = ut.T, d = xa();
        try {
          if (Kn(2), ut.T = null, s)
            return s();
        } finally {
          Kn(d), ut.T = u, Ht = r, (Ht & 6) === 0 && j(0);
        }
      }, bt.flushSyncWork = $g, bt.focusWithin = function(s, r) {
        if (!Go) throw Error(i(363));
        for (s = rf(s), r = Zg(s, r), r = Array.from(r), s = 0; s < r.length; ) {
          var u = r[s++], d = u.tag;
          if (!Wo(u)) {
            if ((d === 5 || d === 26 || d === 27) && wM(u.stateNode))
              return !0;
            for (u = u.child; u !== null; )
              r.push(u), u = u.sibling;
          }
        }
        return !1;
      }, bt.getFindAllNodesFailureDescription = function(s, r) {
        if (!Go) throw Error(i(363));
        var u = 0, d = [];
        s = [rf(s), 0];
        for (var _ = 0; _ < s.length; ) {
          var M = s[_++], U = M.tag, B = s[_++], Y = r[B];
          if ((U !== 5 && U !== 26 && U !== 27 || !Wo(M)) && (of(M, Y) && (d.push(lf(Y)), B++, B > u && (u = B)), B < r.length))
            for (M = M.child; M !== null; )
              s.push(M, B), M = M.sibling;
        }
        if (u < r.length) {
          for (s = []; u < r.length; u++)
            s.push(lf(r[u]));
          return `findAllNodes was able to match part of the selector:
  ` + (d.join(" > ") + `

No matching component was found for:
  `) + s.join(" > ");
        }
        return null;
      }, bt.getPublicRootInstance = function(s) {
        if (s = s.current, !s.child) return null;
        switch (s.child.tag) {
          case 27:
          case 5:
            return Vo(s.child.stateNode);
          default:
            return s.child.stateNode;
        }
      }, bt.injectIntoDevTools = function() {
        var s = {
          bundleType: 0,
          version: sM,
          rendererPackageName: aM,
          currentDispatcherRef: ut,
          findFiberByHostInstance: Av,
          reconcilerVersion: "19.0.0"
        };
        if (Ev !== null && (s.rendererConfig = Ev), typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ > "u") s = !1;
        else {
          var r = __REACT_DEVTOOLS_GLOBAL_HOOK__;
          if (r.isDisabled || !r.supportsFiber) s = !0;
          else {
            try {
              Xo = r.inject(s), li = r;
            } catch {
            }
            s = !!r.checkDCE;
          }
        }
        return s;
      }, bt.isAlreadyRendering = function() {
        return !1;
      }, bt.observeVisibleRects = function(s, r, u, d) {
        if (!Go) throw Error(i(363));
        s = cf(s, r);
        var _ = RM(
          s,
          u,
          d
        ).disconnect;
        return {
          disconnect: function() {
            _();
          }
        };
      }, bt.shouldError = function() {
        return null;
      }, bt.shouldSuspend = function() {
        return !1;
      }, bt.startHostTransition = function(s, r, u, d) {
        if (s.tag !== 5) throw Error(i(476));
        var _ = ig(s).queue;
        ng(
          s,
          _,
          r,
          Sr,
          u === null ? n : function() {
            var M = ig(s).next.queue;
            return Do(
              s,
              M,
              {},
              ai()
            ), u(d);
          }
        );
      }, bt.updateContainer = function(s, r, u, d) {
        var _ = r.current, M = ai();
        return gv(
          _,
          M,
          s,
          r,
          u,
          d
        ), M;
      }, bt.updateContainerSync = function(s, r, u, d) {
        return r.tag === 0 && _a(), gv(
          r.current,
          2,
          s,
          r,
          u,
          d
        ), 2;
      }, bt;
    }, a.exports.default = a.exports, Object.defineProperty(a.exports, "__esModule", { value: !0 });
  }(Wd)), Wd.exports;
}
var W_;
function W3() {
  return W_ || (W_ = 1, Gd.exports = G3()), Gd.exports;
}
var X3 = W3();
const k3 = /* @__PURE__ */ ny(X3);
var X_ = pS();
function Vm(a, e, t) {
  if (!a) return;
  if (t(a) === !0) return a;
  let n = e ? a.return : a.child;
  for (; n; ) {
    const i = Vm(n, e, t);
    if (i) return i;
    n = e ? null : n.sibling;
  }
}
function mS(a) {
  try {
    return Object.defineProperties(a, {
      _currentRenderer: {
        get() {
          return null;
        },
        set() {
        }
      },
      _currentRenderer2: {
        get() {
          return null;
        },
        set() {
        }
      }
    });
  } catch {
    return a;
  }
}
const Gm = /* @__PURE__ */ mS(/* @__PURE__ */ ct.createContext(null));
class gS extends ct.Component {
  render() {
    return /* @__PURE__ */ ct.createElement(Gm.Provider, { value: this._reactInternals }, this.props.children);
  }
}
function vS() {
  const a = ct.useContext(Gm);
  if (a === null) throw new Error("its-fine: useFiber must be called within a <FiberProvider />!");
  const e = ct.useId();
  return ct.useMemo(() => {
    for (const t of [a, a == null ? void 0 : a.alternate]) {
      if (!t) continue;
      const n = Vm(t, !1, (i) => {
        let o = i.memoizedState;
        for (; o; ) {
          if (o.memoizedState === e) return !0;
          o = o.next;
        }
      });
      if (n) return n;
    }
  }, [a, e]);
}
const q3 = Symbol.for("react.context"), Y3 = (a) => a !== null && typeof a == "object" && "$$typeof" in a && a.$$typeof === q3;
function j3() {
  const a = vS(), [e] = ct.useState(() => /* @__PURE__ */ new Map());
  e.clear();
  let t = a;
  for (; t; ) {
    const n = t.type;
    Y3(n) && n !== Gm && !e.has(n) && e.set(n, ct.use(mS(n))), t = t.return;
  }
  return e;
}
function Z3() {
  const a = j3();
  return ct.useMemo(
    () => Array.from(a.keys()).reduce(
      (e, t) => (n) => /* @__PURE__ */ ct.createElement(e, null, /* @__PURE__ */ ct.createElement(t.Provider, { ...n, value: a.get(t) })),
      (e) => /* @__PURE__ */ ct.createElement(gS, { ...e })
    ),
    [a]
  );
}
function _S(a) {
  let e = a.root;
  for (; e.getState().previousRoot; ) e = e.getState().previousRoot;
  return e;
}
const yS = (a) => a && a.isOrthographicCamera, K3 = (a) => a && a.hasOwnProperty("current"), J3 = (a) => a != null && (typeof a == "string" || typeof a == "number" || a.isColor), $l = /* @__PURE__ */ ((a, e) => typeof window < "u" && (((a = window.document) == null ? void 0 : a.createElement) || ((e = window.navigator) == null ? void 0 : e.product) === "ReactNative"))() ? ct.useLayoutEffect : ct.useEffect;
function xS(a) {
  const e = ct.useRef(a);
  return $l(() => void (e.current = a), [a]), e;
}
function Q3() {
  const a = vS(), e = Z3();
  return ct.useMemo(() => ({
    children: t
  }) => {
    const i = !!Vm(a, !0, (o) => o.type === ct.StrictMode) ? ct.StrictMode : ct.Fragment;
    return /* @__PURE__ */ pt.jsx(i, {
      children: /* @__PURE__ */ pt.jsx(e, {
        children: t
      })
    });
  }, [a, e]);
}
function $3({
  set: a
}) {
  return $l(() => (a(new Promise(() => null)), () => a(!1)), [a]), null;
}
const eL = /* @__PURE__ */ ((a) => (a = class extends ct.Component {
  constructor(...t) {
    super(...t), this.state = {
      error: !1
    };
  }
  componentDidCatch(t) {
    this.props.set(t);
  }
  render() {
    return this.state.error ? null : this.props.children;
  }
}, a.getDerivedStateFromError = () => ({
  error: !0
}), a))();
function SS(a) {
  var e;
  const t = typeof window < "u" ? (e = window.devicePixelRatio) != null ? e : 2 : 1;
  return Array.isArray(a) ? Math.min(Math.max(a[0], t), a[1]) : a;
}
function ro(a) {
  var e;
  return (e = a.__r3f) == null ? void 0 : e.root.getState();
}
const Kt = {
  obj: (a) => a === Object(a) && !Kt.arr(a) && typeof a != "function",
  fun: (a) => typeof a == "function",
  str: (a) => typeof a == "string",
  num: (a) => typeof a == "number",
  boo: (a) => typeof a == "boolean",
  und: (a) => a === void 0,
  nul: (a) => a === null,
  arr: (a) => Array.isArray(a),
  equ(a, e, {
    arrays: t = "shallow",
    objects: n = "reference",
    strict: i = !0
  } = {}) {
    if (typeof a != typeof e || !!a != !!e) return !1;
    if (Kt.str(a) || Kt.num(a) || Kt.boo(a)) return a === e;
    const o = Kt.obj(a);
    if (o && n === "reference") return a === e;
    const l = Kt.arr(a);
    if (l && t === "reference") return a === e;
    if ((l || o) && a === e) return !0;
    let c;
    for (c in a) if (!(c in e)) return !1;
    if (o && t === "shallow" && n === "shallow") {
      for (c in i ? e : a) if (!Kt.equ(a[c], e[c], {
        strict: i,
        objects: "reference"
      })) return !1;
    } else
      for (c in i ? e : a) if (a[c] !== e[c]) return !1;
    if (Kt.und(c)) {
      if (l && a.length === 0 && e.length === 0 || o && Object.keys(a).length === 0 && Object.keys(e).length === 0) return !0;
      if (a !== e) return !1;
    }
    return !0;
  }
};
function tL(a) {
  a.type !== "Scene" && (a.dispose == null || a.dispose());
  for (const e in a) {
    const t = a[e];
    (t == null ? void 0 : t.type) !== "Scene" && (t == null || t.dispose == null || t.dispose());
  }
}
const MS = ["children", "key", "ref"];
function nL(a) {
  const e = {};
  for (const t in a)
    MS.includes(t) || (e[t] = a[t]);
  return e;
}
function ju(a, e, t, n) {
  const i = a;
  let o = i == null ? void 0 : i.__r3f;
  return o || (o = {
    root: e,
    type: t,
    parent: null,
    children: [],
    props: nL(n),
    object: i,
    eventCount: 0,
    handlers: {},
    isHidden: !1
  }, i && (i.__r3f = o)), o;
}
function Wl(a, e) {
  let t = a[e];
  if (!e.includes("-")) return {
    root: a,
    key: e,
    target: t
  };
  t = a;
  for (const i of e.split("-")) {
    var n;
    e = i, a = t, t = (n = t) == null ? void 0 : n[e];
  }
  return {
    root: a,
    key: e,
    target: t
  };
}
const k_ = /-\d+$/;
function Zu(a, e) {
  if (Kt.str(e.props.attach)) {
    if (k_.test(e.props.attach)) {
      const i = e.props.attach.replace(k_, ""), {
        root: o,
        key: l
      } = Wl(a.object, i);
      Array.isArray(o[l]) || (o[l] = []);
    }
    const {
      root: t,
      key: n
    } = Wl(a.object, e.props.attach);
    e.previousAttach = t[n], t[n] = e.object;
  } else Kt.fun(e.props.attach) && (e.previousAttach = e.props.attach(a.object, e.object));
}
function Ku(a, e) {
  if (Kt.str(e.props.attach)) {
    const {
      root: t,
      key: n
    } = Wl(a.object, e.props.attach), i = e.previousAttach;
    i === void 0 ? delete t[n] : t[n] = i;
  } else
    e.previousAttach == null || e.previousAttach(a.object, e.object);
  delete e.previousAttach;
}
const kp = [
  ...MS,
  // Instance props
  "args",
  "dispose",
  "attach",
  "object",
  "onUpdate",
  // Behavior flags
  "dispose"
], q_ = /* @__PURE__ */ new Map();
function iL(a) {
  let e = q_.get(a.constructor);
  try {
    e || (e = new a.constructor(), q_.set(a.constructor, e));
  } catch {
  }
  return e;
}
function sL(a, e) {
  const t = {};
  for (const n in e)
    if (!kp.includes(n) && !Kt.equ(e[n], a.props[n])) {
      t[n] = e[n];
      for (const i in e)
        i.startsWith(`${n}-`) && (t[i] = e[i]);
    }
  for (const n in a.props) {
    if (kp.includes(n) || e.hasOwnProperty(n)) continue;
    const {
      root: i,
      key: o
    } = Wl(a.object, n);
    if (i.constructor && i.constructor.length === 0) {
      const l = iL(i);
      Kt.und(l) || (t[o] = l[o]);
    } else
      t[o] = 0;
  }
  return t;
}
const aL = ["map", "emissiveMap", "sheenColorMap", "specularColorMap", "envMap"], rL = /^on(Pointer|Click|DoubleClick|ContextMenu|Wheel)/;
function $s(a, e) {
  var t;
  const n = a.__r3f, i = n && _S(n).getState(), o = n == null ? void 0 : n.eventCount;
  for (const c in e) {
    let h = e[c];
    if (kp.includes(c)) continue;
    if (n && rL.test(c)) {
      typeof h == "function" ? n.handlers[c] = h : delete n.handlers[c], n.eventCount = Object.keys(n.handlers).length;
      continue;
    }
    if (h === void 0) continue;
    let {
      root: f,
      key: p,
      target: m
    } = Wl(a, c);
    if (m instanceof yo && h instanceof yo)
      m.mask = h.mask;
    else if (m instanceof Fe && J3(h))
      m.set(h);
    else if (m !== null && typeof m == "object" && typeof m.set == "function" && typeof m.copy == "function" && h != null && h.constructor && m.constructor === h.constructor)
      m.copy(h);
    else if (m !== null && typeof m == "object" && typeof m.set == "function" && Array.isArray(h))
      typeof m.fromArray == "function" ? m.fromArray(h) : m.set(...h);
    else if (m !== null && typeof m == "object" && typeof m.set == "function" && typeof h == "number")
      typeof m.setScalar == "function" ? m.setScalar(h) : m.set(h);
    else {
      var l;
      f[p] = h, i && !i.linear && aL.includes(p) && (l = f[p]) != null && l.isTexture && // sRGB textures must be RGBA8 since r137 https://github.com/mrdoob/three.js/pull/23129
      f[p].format === Wn && f[p].type === Qi && (f[p].colorSpace = nn);
    }
  }
  if (n != null && n.parent && i != null && i.internal && (t = n.object) != null && t.isObject3D && o !== n.eventCount) {
    const c = n.object, h = i.internal.interaction.indexOf(c);
    h > -1 && i.internal.interaction.splice(h, 1), n.eventCount && c.raycast !== null && i.internal.interaction.push(c);
  }
  return n && n.props.attach === void 0 && (n.object.isBufferGeometry ? n.props.attach = "geometry" : n.object.isMaterial && (n.props.attach = "material")), n && Ro(n), a;
}
function Ro(a) {
  var e;
  if (!a.parent) return;
  a.props.onUpdate == null || a.props.onUpdate(a.object);
  const t = (e = a.root) == null || e.getState == null ? void 0 : e.getState();
  t && t.internal.frames === 0 && t.invalidate();
}
function oL(a, e) {
  a.manual || (yS(a) ? (a.left = e.width / -2, a.right = e.width / 2, a.top = e.height / 2, a.bottom = e.height / -2) : a.aspect = e.width / e.height, a.updateProjectionMatrix());
}
const Qn = (a) => a == null ? void 0 : a.isObject3D;
function Cu(a) {
  return (a.eventObject || a.object).uuid + "/" + a.index + a.instanceId;
}
function ES(a, e, t, n) {
  const i = t.get(e);
  i && (t.delete(e), t.size === 0 && (a.delete(n), i.target.releasePointerCapture(n)));
}
function lL(a, e) {
  const {
    internal: t
  } = a.getState();
  t.interaction = t.interaction.filter((n) => n !== e), t.initialHits = t.initialHits.filter((n) => n !== e), t.hovered.forEach((n, i) => {
    (n.eventObject === e || n.object === e) && t.hovered.delete(i);
  }), t.capturedMap.forEach((n, i) => {
    ES(t.capturedMap, e, n, i);
  });
}
function cL(a) {
  function e(h) {
    const {
      internal: f
    } = a.getState(), p = h.offsetX - f.initialClick[0], m = h.offsetY - f.initialClick[1];
    return Math.round(Math.sqrt(p * p + m * m));
  }
  function t(h) {
    return h.filter((f) => ["Move", "Over", "Enter", "Out", "Leave"].some((p) => {
      var m;
      return (m = f.__r3f) == null ? void 0 : m.handlers["onPointer" + p];
    }));
  }
  function n(h, f) {
    const p = a.getState(), m = /* @__PURE__ */ new Set(), g = [], v = f ? f(p.internal.interaction) : p.internal.interaction;
    for (let y = 0; y < v.length; y++) {
      const T = ro(v[y]);
      T && (T.raycaster.camera = void 0);
    }
    p.previousRoot || p.events.compute == null || p.events.compute(h, p);
    function x(y) {
      const T = ro(y);
      if (!T || !T.events.enabled || T.raycaster.camera === null) return [];
      if (T.raycaster.camera === void 0) {
        var b;
        T.events.compute == null || T.events.compute(h, T, (b = T.previousRoot) == null ? void 0 : b.getState()), T.raycaster.camera === void 0 && (T.raycaster.camera = null);
      }
      return T.raycaster.camera ? T.raycaster.intersectObject(y, !0) : [];
    }
    let E = v.flatMap(x).sort((y, T) => {
      const b = ro(y.object), A = ro(T.object);
      return !b || !A ? y.distance - T.distance : A.events.priority - b.events.priority || y.distance - T.distance;
    }).filter((y) => {
      const T = Cu(y);
      return m.has(T) ? !1 : (m.add(T), !0);
    });
    p.events.filter && (E = p.events.filter(E, p));
    for (const y of E) {
      let T = y.object;
      for (; T; ) {
        var S;
        (S = T.__r3f) != null && S.eventCount && g.push({
          ...y,
          eventObject: T
        }), T = T.parent;
      }
    }
    if ("pointerId" in h && p.internal.capturedMap.has(h.pointerId))
      for (let y of p.internal.capturedMap.get(h.pointerId).values())
        m.has(Cu(y.intersection)) || g.push(y.intersection);
    return g;
  }
  function i(h, f, p, m) {
    if (h.length) {
      const g = {
        stopped: !1
      };
      for (const v of h) {
        let x = ro(v.object);
        if (x || v.object.traverseAncestors((E) => {
          const S = ro(E);
          if (S)
            return x = S, !1;
        }), x) {
          const {
            raycaster: E,
            pointer: S,
            camera: y,
            internal: T
          } = x, b = new I(S.x, S.y, 0).unproject(y), A = (w) => {
            var C, X;
            return (C = (X = T.capturedMap.get(w)) == null ? void 0 : X.has(v.eventObject)) != null ? C : !1;
          }, N = (w) => {
            const C = {
              intersection: v,
              target: f.target
            };
            T.capturedMap.has(w) ? T.capturedMap.get(w).set(v.eventObject, C) : T.capturedMap.set(w, /* @__PURE__ */ new Map([[v.eventObject, C]])), f.target.setPointerCapture(w);
          }, R = (w) => {
            const C = T.capturedMap.get(w);
            C && ES(T.capturedMap, v.eventObject, C, w);
          };
          let P = {};
          for (let w in f) {
            let C = f[w];
            typeof C != "function" && (P[w] = C);
          }
          let H = {
            ...v,
            ...P,
            pointer: S,
            intersections: h,
            stopped: g.stopped,
            delta: p,
            unprojectedPoint: b,
            ray: E.ray,
            camera: y,
            // Hijack stopPropagation, which just sets a flag
            stopPropagation() {
              const w = "pointerId" in f && T.capturedMap.get(f.pointerId);
              if (
                // ...if this pointer hasn't been captured
                (!w || // ... or if the hit object is capturing the pointer
                w.has(v.eventObject)) && (H.stopped = g.stopped = !0, T.hovered.size && Array.from(T.hovered.values()).find((C) => C.eventObject === v.eventObject))
              ) {
                const C = h.slice(0, h.indexOf(v));
                o([...C, v]);
              }
            },
            // there should be a distinction between target and currentTarget
            target: {
              hasPointerCapture: A,
              setPointerCapture: N,
              releasePointerCapture: R
            },
            currentTarget: {
              hasPointerCapture: A,
              setPointerCapture: N,
              releasePointerCapture: R
            },
            nativeEvent: f
          };
          if (m(H), g.stopped === !0) break;
        }
      }
    }
    return h;
  }
  function o(h) {
    const {
      internal: f
    } = a.getState();
    for (const p of f.hovered.values())
      if (!h.length || !h.find((m) => m.object === p.object && m.index === p.index && m.instanceId === p.instanceId)) {
        const g = p.eventObject.__r3f;
        if (f.hovered.delete(Cu(p)), g != null && g.eventCount) {
          const v = g.handlers, x = {
            ...p,
            intersections: h
          };
          v.onPointerOut == null || v.onPointerOut(x), v.onPointerLeave == null || v.onPointerLeave(x);
        }
      }
  }
  function l(h, f) {
    for (let p = 0; p < f.length; p++) {
      const m = f[p].__r3f;
      m == null || m.handlers.onPointerMissed == null || m.handlers.onPointerMissed(h);
    }
  }
  function c(h) {
    switch (h) {
      case "onPointerLeave":
      case "onPointerCancel":
        return () => o([]);
      case "onLostPointerCapture":
        return (f) => {
          const {
            internal: p
          } = a.getState();
          "pointerId" in f && p.capturedMap.has(f.pointerId) && requestAnimationFrame(() => {
            p.capturedMap.has(f.pointerId) && (p.capturedMap.delete(f.pointerId), o([]));
          });
        };
    }
    return function(p) {
      const {
        onPointerMissed: m,
        internal: g
      } = a.getState();
      g.lastEvent.current = p;
      const v = h === "onPointerMove", x = h === "onClick" || h === "onContextMenu" || h === "onDoubleClick", S = n(p, v ? t : void 0), y = x ? e(p) : 0;
      h === "onPointerDown" && (g.initialClick = [p.offsetX, p.offsetY], g.initialHits = S.map((b) => b.eventObject)), x && !S.length && y <= 2 && (l(p, g.interaction), m && m(p)), v && o(S);
      function T(b) {
        const A = b.eventObject, N = A.__r3f;
        if (!(N != null && N.eventCount)) return;
        const R = N.handlers;
        if (v) {
          if (R.onPointerOver || R.onPointerEnter || R.onPointerOut || R.onPointerLeave) {
            const P = Cu(b), H = g.hovered.get(P);
            H ? H.stopped && b.stopPropagation() : (g.hovered.set(P, b), R.onPointerOver == null || R.onPointerOver(b), R.onPointerEnter == null || R.onPointerEnter(b));
          }
          R.onPointerMove == null || R.onPointerMove(b);
        } else {
          const P = R[h];
          P ? (!x || g.initialHits.includes(A)) && (l(p, g.interaction.filter((H) => !g.initialHits.includes(H))), P(b)) : x && g.initialHits.includes(A) && l(p, g.interaction.filter((H) => !g.initialHits.includes(H)));
        }
      }
      i(S, p, y, T);
    };
  }
  return {
    handlePointer: c
  };
}
const Y_ = (a) => !!(a != null && a.render), bS = /* @__PURE__ */ ct.createContext(null), uL = (a, e) => {
  const t = F3((c, h) => {
    const f = new I(), p = new I(), m = new I();
    function g(y = h().camera, T = p, b = h().size) {
      const {
        width: A,
        height: N,
        top: R,
        left: P
      } = b, H = A / N;
      T.isVector3 ? m.copy(T) : m.set(...T);
      const w = y.getWorldPosition(f).distanceTo(m);
      if (yS(y))
        return {
          width: A / y.zoom,
          height: N / y.zoom,
          top: R,
          left: P,
          factor: 1,
          distance: w,
          aspect: H
        };
      {
        const C = y.fov * Math.PI / 180, X = 2 * Math.tan(C / 2) * w, ne = X * (A / N);
        return {
          width: ne,
          height: X,
          top: R,
          left: P,
          factor: A / ne,
          distance: w,
          aspect: H
        };
      }
    }
    let v;
    const x = (y) => c((T) => ({
      performance: {
        ...T.performance,
        current: y
      }
    })), E = new de();
    return {
      set: c,
      get: h,
      // Mock objects that have to be configured
      gl: null,
      camera: null,
      raycaster: null,
      events: {
        priority: 1,
        enabled: !0,
        connected: !1
      },
      scene: null,
      xr: null,
      invalidate: (y = 1) => a(h(), y),
      advance: (y, T) => e(y, T, h()),
      legacy: !1,
      linear: !1,
      flat: !1,
      controls: null,
      clock: new zm(),
      pointer: E,
      mouse: E,
      frameloop: "always",
      onPointerMissed: void 0,
      performance: {
        current: 1,
        min: 0.5,
        max: 1,
        debounce: 200,
        regress: () => {
          const y = h();
          v && clearTimeout(v), y.performance.current !== y.performance.min && x(y.performance.min), v = setTimeout(() => x(h().performance.max), y.performance.debounce);
        }
      },
      size: {
        width: 0,
        height: 0,
        top: 0,
        left: 0
      },
      viewport: {
        initialDpr: 0,
        dpr: 0,
        width: 0,
        height: 0,
        top: 0,
        left: 0,
        aspect: 0,
        distance: 0,
        factor: 0,
        getCurrentViewport: g
      },
      setEvents: (y) => c((T) => ({
        ...T,
        events: {
          ...T.events,
          ...y
        }
      })),
      setSize: (y, T, b = 0, A = 0) => {
        const N = h().camera, R = {
          width: y,
          height: T,
          top: b,
          left: A
        };
        c((P) => ({
          size: R,
          viewport: {
            ...P.viewport,
            ...g(N, p, R)
          }
        }));
      },
      setDpr: (y) => c((T) => {
        const b = SS(y);
        return {
          viewport: {
            ...T.viewport,
            dpr: b,
            initialDpr: T.viewport.initialDpr || b
          }
        };
      }),
      setFrameloop: (y = "always") => {
        const T = h().clock;
        T.stop(), T.elapsedTime = 0, y !== "never" && (T.start(), T.elapsedTime = 0), c(() => ({
          frameloop: y
        }));
      },
      previousRoot: void 0,
      internal: {
        // Events
        interaction: [],
        hovered: /* @__PURE__ */ new Map(),
        subscribers: [],
        initialClick: [0, 0],
        initialHits: [],
        capturedMap: /* @__PURE__ */ new Map(),
        lastEvent: /* @__PURE__ */ ct.createRef(),
        // Updates
        active: !1,
        frames: 0,
        priority: 0,
        subscribe: (y, T, b) => {
          const A = h().internal;
          return A.priority = A.priority + (T > 0 ? 1 : 0), A.subscribers.push({
            ref: y,
            priority: T,
            store: b
          }), A.subscribers = A.subscribers.sort((N, R) => N.priority - R.priority), () => {
            const N = h().internal;
            N != null && N.subscribers && (N.priority = N.priority - (T > 0 ? 1 : 0), N.subscribers = N.subscribers.filter((R) => R.ref !== y));
          };
        }
      }
    };
  }), n = t.getState();
  let i = n.size, o = n.viewport.dpr, l = n.camera;
  return t.subscribe(() => {
    const {
      camera: c,
      size: h,
      viewport: f,
      gl: p,
      set: m
    } = t.getState();
    if (h.width !== i.width || h.height !== i.height || f.dpr !== o) {
      i = h, o = f.dpr, oL(c, h), f.dpr > 0 && p.setPixelRatio(f.dpr);
      const g = typeof HTMLCanvasElement < "u" && p.domElement instanceof HTMLCanvasElement;
      p.setSize(h.width, h.height, g);
    }
    c !== l && (l = c, m((g) => ({
      viewport: {
        ...g.viewport,
        ...g.viewport.getCurrentViewport(c)
      }
    })));
  }), t.subscribe((c) => a(c)), t;
};
function TS() {
  const a = ct.useContext(bS);
  if (!a) throw new Error("R3F: Hooks can only be used within the Canvas component!");
  return a;
}
function ys(a = (t) => t, e) {
  return TS()(a, e);
}
function hL(a, e = 0) {
  const t = TS(), n = t.getState().internal.subscribe, i = xS(a);
  return $l(() => n(i, e, t), [e, n, t]), null;
}
function fL(a) {
  const e = k3(a);
  return e.injectIntoDevTools({
    bundleType: 0,
    rendererPackageName: "@react-three/fiber",
    version: ct.version
  }), e;
}
const AS = 0, Mo = {}, dL = /^three(?=[A-Z])/, Lh = (a) => `${a[0].toUpperCase()}${a.slice(1)}`;
let pL = 0;
const mL = (a) => typeof a == "function";
function gL(a) {
  if (mL(a)) {
    const e = `${pL++}`;
    return Mo[e] = a, e;
  } else
    Object.assign(Mo, a);
}
function wS(a, e) {
  const t = Lh(a), n = Mo[t];
  if (a !== "primitive" && !n) throw new Error(`R3F: ${t} is not part of the THREE namespace! Did you forget to extend? See: https://docs.pmnd.rs/react-three-fiber/api/objects#using-3rd-party-objects-declaratively`);
  if (a === "primitive" && !e.object) throw new Error("R3F: Primitives without 'object' are invalid!");
  if (e.args !== void 0 && !Array.isArray(e.args)) throw new Error("R3F: The args prop must be an array!");
}
function vL(a, e, t) {
  var n;
  return a = Lh(a) in Mo ? a : a.replace(dL, ""), wS(a, e), a === "primitive" && (n = e.object) != null && n.__r3f && delete e.object.__r3f, ju(e.object, t, a, e);
}
function _L(a) {
  if (!a.isHidden) {
    var e;
    a.props.attach && (e = a.parent) != null && e.object ? Ku(a.parent, a) : Qn(a.object) && (a.object.visible = !1), a.isHidden = !0, Ro(a);
  }
}
function RS(a) {
  if (a.isHidden) {
    var e;
    a.props.attach && (e = a.parent) != null && e.object ? Zu(a.parent, a) : Qn(a.object) && a.props.visible !== !1 && (a.object.visible = !0), a.isHidden = !1, Ro(a);
  }
}
function Wm(a, e, t) {
  const n = e.root.getState();
  if (!(!a.parent && a.object !== n.scene)) {
    if (!e.object) {
      var i, o;
      const l = Mo[Lh(e.type)];
      e.object = (i = e.props.object) != null ? i : new l(...(o = e.props.args) != null ? o : []), e.object.__r3f = e;
    }
    if ($s(e.object, e.props), e.props.attach)
      Zu(a, e);
    else if (Qn(e.object) && Qn(a.object)) {
      const l = a.object.children.indexOf(t == null ? void 0 : t.object);
      if (t && l !== -1) {
        const c = a.object.children.indexOf(e.object);
        if (c !== -1) {
          a.object.children.splice(c, 1);
          const h = c < l ? l - 1 : l;
          a.object.children.splice(h, 0, e.object);
        } else
          e.object.parent = a.object, a.object.children.splice(l, 0, e.object), e.object.dispatchEvent({
            type: "added"
          }), a.object.dispatchEvent({
            type: "childadded",
            child: e.object
          });
      } else
        a.object.add(e.object);
    }
    for (const l of e.children) Wm(e, l);
    Ro(e);
  }
}
function qd(a, e) {
  e && (e.parent = a, a.children.push(e), Wm(a, e));
}
function j_(a, e, t) {
  if (!e || !t) return;
  e.parent = a;
  const n = a.children.indexOf(t);
  n !== -1 ? a.children.splice(n, 0, e) : a.children.push(e), Wm(a, e, t);
}
function CS(a) {
  if (typeof a.dispose == "function") {
    const e = () => {
      try {
        a.dispose();
      } catch {
      }
    };
    typeof IS_REACT_ACT_ENVIRONMENT < "u" ? e() : X_.unstable_scheduleCallback(X_.unstable_IdlePriority, e);
  }
}
function qp(a, e, t) {
  if (!e) return;
  e.parent = null;
  const n = a.children.indexOf(e);
  n !== -1 && a.children.splice(n, 1), e.props.attach ? Ku(a, e) : Qn(e.object) && Qn(a.object) && (a.object.remove(e.object), lL(_S(e), e.object));
  const i = e.props.dispose !== null && t !== !1;
  for (let o = e.children.length - 1; o >= 0; o--) {
    const l = e.children[o];
    qp(e, l, i);
  }
  e.children.length = 0, delete e.object.__r3f, i && e.type !== "primitive" && e.object.type !== "Scene" && CS(e.object), t === void 0 && Ro(e);
}
function yL(a, e) {
  for (const t of [a, a.alternate])
    if (t !== null)
      if (typeof t.ref == "function") {
        t.refCleanup == null || t.refCleanup();
        const n = t.ref(e);
        typeof n == "function" && (t.refCleanup = n);
      } else t.ref && (t.ref.current = e);
}
const Vu = [];
function xL() {
  for (const [t] of Vu) {
    const n = t.parent;
    if (n) {
      t.props.attach ? Ku(n, t) : Qn(t.object) && Qn(n.object) && n.object.remove(t.object);
      for (const i of t.children)
        i.props.attach ? Ku(t, i) : Qn(i.object) && Qn(t.object) && t.object.remove(i.object);
    }
    t.isHidden && RS(t), t.object.__r3f && delete t.object.__r3f, t.type !== "primitive" && CS(t.object);
  }
  for (const [t, n, i] of Vu) {
    t.props = n;
    const o = t.parent;
    if (o) {
      var a, e;
      const l = Mo[Lh(t.type)];
      t.object = (a = t.props.object) != null ? a : new l(...(e = t.props.args) != null ? e : []), t.object.__r3f = t, yL(i, t.object), $s(t.object, t.props), t.props.attach ? Zu(o, t) : Qn(t.object) && Qn(o.object) && o.object.add(t.object);
      for (const c of t.children)
        c.props.attach ? Zu(t, c) : Qn(c.object) && Qn(t.object) && t.object.add(c.object);
      Ro(t);
    }
  }
  Vu.length = 0;
}
const Yd = () => {
}, Z_ = {};
let Lu = AS;
const SL = 0, ML = 4, Yp = /* @__PURE__ */ fL({
  isPrimaryRenderer: !1,
  warnsIfNotActing: !1,
  supportsMutation: !0,
  supportsPersistence: !1,
  supportsHydration: !1,
  createInstance: vL,
  removeChild: qp,
  appendChild: qd,
  appendInitialChild: qd,
  insertBefore: j_,
  appendChildToContainer(a, e) {
    const t = a.getState().scene.__r3f;
    !e || !t || qd(t, e);
  },
  removeChildFromContainer(a, e) {
    const t = a.getState().scene.__r3f;
    !e || !t || qp(t, e);
  },
  insertInContainerBefore(a, e, t) {
    const n = a.getState().scene.__r3f;
    !e || !t || !n || j_(n, e, t);
  },
  getRootHostContext: () => Z_,
  getChildHostContext: () => Z_,
  commitUpdate(a, e, t, n, i) {
    var o, l, c;
    wS(e, n);
    let h = !1;
    if ((a.type === "primitive" && t.object !== n.object || ((o = n.args) == null ? void 0 : o.length) !== ((l = t.args) == null ? void 0 : l.length) || (c = n.args) != null && c.some((p, m) => {
      var g;
      return p !== ((g = t.args) == null ? void 0 : g[m]);
    })) && (h = !0), h)
      Vu.push([a, {
        ...n
      }, i]);
    else {
      const p = sL(a, n);
      Object.keys(p).length && (Object.assign(a.props, p), $s(a.object, p));
    }
    (i.sibling === null || (i.flags & ML) === SL) && xL();
  },
  finalizeInitialChildren: () => !1,
  commitMount() {
  },
  getPublicInstance: (a) => a == null ? void 0 : a.object,
  prepareForCommit: () => null,
  preparePortalMount: (a) => ju(a.getState().scene, a, "", {}),
  resetAfterCommit: () => {
  },
  shouldSetTextContent: () => !1,
  clearContainer: () => !1,
  hideInstance: _L,
  unhideInstance: RS,
  createTextInstance: Yd,
  hideTextInstance: Yd,
  unhideTextInstance: Yd,
  scheduleTimeout: typeof setTimeout == "function" ? setTimeout : void 0,
  cancelTimeout: typeof clearTimeout == "function" ? clearTimeout : void 0,
  noTimeout: -1,
  getInstanceFromNode: () => null,
  beforeActiveInstanceBlur() {
  },
  afterActiveInstanceBlur() {
  },
  detachDeletedInstance() {
  },
  prepareScopeUpdate() {
  },
  getInstanceFromScope: () => null,
  shouldAttemptEagerTransition: () => !1,
  trackSchedulerEvent: () => {
  },
  resolveEventType: () => null,
  resolveEventTimeStamp: () => -1.1,
  requestPostPaintCallback() {
  },
  maySuspendCommit: () => !1,
  preloadInstance: () => !0,
  // true indicates already loaded
  startSuspendingCommit() {
  },
  suspendInstance() {
  },
  waitForCommitToBeReady: () => null,
  NotPendingTransition: null,
  // The reconciler types use the internal ReactContext with all the hidden properties
  // so we have to cast from the public React.Context type
  HostTransitionContext: /* @__PURE__ */ ct.createContext(null),
  setCurrentUpdatePriority(a) {
    Lu = a;
  },
  getCurrentUpdatePriority() {
    return Lu;
  },
  resolveUpdatePriority() {
    var a;
    if (Lu !== AS) return Lu;
    switch (typeof window < "u" && ((a = window.event) == null ? void 0 : a.type)) {
      case "click":
      case "contextmenu":
      case "dblclick":
      case "pointercancel":
      case "pointerdown":
      case "pointerup":
        return Du.DiscreteEventPriority;
      case "pointermove":
      case "pointerout":
      case "pointerover":
      case "pointerenter":
      case "pointerleave":
      case "wheel":
        return Du.ContinuousEventPriority;
      default:
        return Du.DefaultEventPriority;
    }
  },
  resetFormInstance() {
  }
}), ar = /* @__PURE__ */ new Map(), oo = {
  objects: "shallow",
  strict: !1
};
function EL(a, e) {
  if (!e && typeof HTMLCanvasElement < "u" && a instanceof HTMLCanvasElement && a.parentElement) {
    const {
      width: t,
      height: n,
      top: i,
      left: o
    } = a.parentElement.getBoundingClientRect();
    return {
      width: t,
      height: n,
      top: i,
      left: o
    };
  } else if (!e && typeof OffscreenCanvas < "u" && a instanceof OffscreenCanvas)
    return {
      width: a.width,
      height: a.height,
      top: 0,
      left: 0
    };
  return {
    width: 0,
    height: 0,
    top: 0,
    left: 0,
    ...e
  };
}
function bL(a) {
  const e = ar.get(a), t = e == null ? void 0 : e.fiber, n = e == null ? void 0 : e.store;
  e && console.warn("R3F.createRoot should only be called once!");
  const i = typeof reportError == "function" ? (
    // In modern browsers, reportError will dispatch an error event,
    // emulating an uncaught JavaScript error.
    reportError
  ) : (
    // In older browsers and test environments, fallback to console.error.
    console.error
  ), o = n || uL(Kp, J_), l = t || Yp.createContainer(
    o,
    // container
    Du.ConcurrentRoot,
    // tag
    null,
    // hydration callbacks
    !1,
    // isStrictMode
    null,
    // concurrentUpdatesByDefaultOverride
    "",
    // identifierPrefix
    i,
    // onUncaughtError
    i,
    // onCaughtError
    i,
    // onRecoverableError
    null
    // transitionCallbacks
  );
  e || ar.set(a, {
    fiber: l,
    store: o
  });
  let c, h, f = !1, p = null;
  return {
    async configure(m = {}) {
      let g;
      p = new Promise((oe) => g = oe);
      let {
        gl: v,
        size: x,
        scene: E,
        events: S,
        onCreated: y,
        shadows: T = !1,
        linear: b = !1,
        flat: A = !1,
        legacy: N = !1,
        orthographic: R = !1,
        frameloop: P = "always",
        dpr: H = [1, 2],
        performance: w,
        raycaster: C,
        camera: X,
        onPointerMissed: ne
      } = m, ae = o.getState(), z = ae.gl;
      if (!ae.gl) {
        const oe = {
          canvas: a,
          powerPreference: "high-performance",
          antialias: !0,
          alpha: !0
        }, ge = typeof v == "function" ? await v(oe) : v;
        Y_(ge) ? z = ge : z = new xm({
          ...oe,
          ...v
        }), ae.set({
          gl: z
        });
      }
      let q = ae.raycaster;
      q || ae.set({
        raycaster: q = new fS()
      });
      const {
        params: W,
        ...Q
      } = C || {};
      if (Kt.equ(Q, q, oo) || $s(q, {
        ...Q
      }), Kt.equ(W, q.params, oo) || $s(q, {
        params: {
          ...q.params,
          ...W
        }
      }), !ae.camera || ae.camera === h && !Kt.equ(h, X, oo)) {
        h = X;
        const oe = X == null ? void 0 : X.isCamera, ge = oe ? X : R ? new Ts(0, 0, 0, 0, 0.1, 1e3) : new cn(75, 0, 0.1, 1e3);
        oe || (ge.position.z = 5, X && ($s(ge, X), ge.manual || ("aspect" in X || "left" in X || "right" in X || "bottom" in X || "top" in X) && (ge.manual = !0, ge.updateProjectionMatrix())), !ae.camera && !(X != null && X.rotation) && ge.lookAt(0, 0, 0)), ae.set({
          camera: ge
        }), q.camera = ge;
      }
      if (!ae.scene) {
        let oe;
        E != null && E.isScene ? (oe = E, ju(oe, o, "", {})) : (oe = new hh(), ju(oe, o, "", {}), E && $s(oe, E)), ae.set({
          scene: oe
        });
      }
      S && !ae.events.handlers && ae.set({
        events: S(o)
      });
      const Z = EL(a, x);
      if (Kt.equ(Z, ae.size, oo) || ae.setSize(Z.width, Z.height, Z.top, Z.left), H && ae.viewport.dpr !== SS(H) && ae.setDpr(H), ae.frameloop !== P && ae.setFrameloop(P), ae.onPointerMissed || ae.set({
        onPointerMissed: ne
      }), w && !Kt.equ(w, ae.performance, oo) && ae.set((oe) => ({
        performance: {
          ...oe.performance,
          ...w
        }
      })), !ae.xr) {
        var K;
        const oe = (ce, be) => {
          const Ve = o.getState();
          Ve.frameloop !== "never" && J_(ce, !0, Ve, be);
        }, ge = () => {
          const ce = o.getState();
          ce.gl.xr.enabled = ce.gl.xr.isPresenting, ce.gl.xr.setAnimationLoop(ce.gl.xr.isPresenting ? oe : null), ce.gl.xr.isPresenting || Kp(ce);
        }, ee = {
          connect() {
            const ce = o.getState().gl;
            ce.xr.addEventListener("sessionstart", ge), ce.xr.addEventListener("sessionend", ge);
          },
          disconnect() {
            const ce = o.getState().gl;
            ce.xr.removeEventListener("sessionstart", ge), ce.xr.removeEventListener("sessionend", ge);
          }
        };
        typeof ((K = z.xr) == null ? void 0 : K.addEventListener) == "function" && ee.connect(), ae.set({
          xr: ee
        });
      }
      if (z.shadowMap) {
        const oe = z.shadowMap.enabled, ge = z.shadowMap.type;
        if (z.shadowMap.enabled = !!T, Kt.boo(T))
          z.shadowMap.type = ml;
        else if (Kt.str(T)) {
          var le;
          const ee = {
            basic: ay,
            percentage: th,
            soft: ml,
            variance: zi
          };
          z.shadowMap.type = (le = ee[T]) != null ? le : ml;
        } else Kt.obj(T) && Object.assign(z.shadowMap, T);
        (oe !== z.shadowMap.enabled || ge !== z.shadowMap.type) && (z.shadowMap.needsUpdate = !0);
      }
      return Dt.enabled = !N, f || (z.outputColorSpace = b ? Vi : nn, z.toneMapping = A ? Ji : $p), ae.legacy !== N && ae.set(() => ({
        legacy: N
      })), ae.linear !== b && ae.set(() => ({
        linear: b
      })), ae.flat !== A && ae.set(() => ({
        flat: A
      })), v && !Kt.fun(v) && !Y_(v) && !Kt.equ(v, z, oo) && $s(z, v), c = y, f = !0, g(), this;
    },
    render(m) {
      return !f && !p && this.configure(), p.then(() => {
        Yp.updateContainer(/* @__PURE__ */ pt.jsx(TL, {
          store: o,
          children: m,
          onCreated: c,
          rootElement: a
        }), l, null, () => {
        });
      }), o;
    },
    unmount() {
      LS(a);
    }
  };
}
function TL({
  store: a,
  children: e,
  onCreated: t,
  rootElement: n
}) {
  return $l(() => {
    const i = a.getState();
    i.set((o) => ({
      internal: {
        ...o.internal,
        active: !0
      }
    })), t && t(i), a.getState().events.connected || i.events.connect == null || i.events.connect(n);
  }, []), /* @__PURE__ */ pt.jsx(bS.Provider, {
    value: a,
    children: e
  });
}
function LS(a, e) {
  const t = ar.get(a), n = t == null ? void 0 : t.fiber;
  if (n) {
    const i = t == null ? void 0 : t.store.getState();
    i && (i.internal.active = !1), Yp.updateContainer(null, n, null, () => {
      i && setTimeout(() => {
        try {
          var o, l, c, h;
          i.events.disconnect == null || i.events.disconnect(), (o = i.gl) == null || (l = o.renderLists) == null || l.dispose == null || l.dispose(), (c = i.gl) == null || c.forceContextLoss == null || c.forceContextLoss(), (h = i.gl) != null && h.xr && i.xr.disconnect(), tL(i.scene), ar.delete(a);
        } catch {
        }
      }, 500);
    });
  }
}
const AL = /* @__PURE__ */ new Set(), wL = /* @__PURE__ */ new Set(), RL = /* @__PURE__ */ new Set();
function jd(a, e) {
  if (a.size)
    for (const {
      callback: t
    } of a.values())
      t(e);
}
function Sl(a, e) {
  switch (a) {
    case "before":
      return jd(AL, e);
    case "after":
      return jd(wL, e);
    case "tail":
      return jd(RL, e);
  }
}
let Zd, Kd;
function jp(a, e, t) {
  let n = e.clock.getDelta();
  e.frameloop === "never" && typeof a == "number" && (n = a - e.clock.elapsedTime, e.clock.oldTime = e.clock.elapsedTime, e.clock.elapsedTime = a), Zd = e.internal.subscribers;
  for (let i = 0; i < Zd.length; i++)
    Kd = Zd[i], Kd.ref.current(Kd.store.getState(), n, t);
  return !e.internal.priority && e.gl.render && e.gl.render(e.scene, e.camera), e.internal.frames = Math.max(0, e.internal.frames - 1), e.frameloop === "always" ? 1 : e.internal.frames;
}
let Ju = !1, Zp = !1, Jd, K_, lo;
function US(a) {
  K_ = requestAnimationFrame(US), Ju = !0, Jd = 0, Sl("before", a), Zp = !0;
  for (const t of ar.values()) {
    var e;
    lo = t.store.getState(), lo.internal.active && (lo.frameloop === "always" || lo.internal.frames > 0) && !((e = lo.gl.xr) != null && e.isPresenting) && (Jd += jp(a, lo));
  }
  if (Zp = !1, Sl("after", a), Jd === 0)
    return Sl("tail", a), Ju = !1, cancelAnimationFrame(K_);
}
function Kp(a, e = 1) {
  var t;
  if (!a) return ar.forEach((n) => Kp(n.store.getState(), e));
  (t = a.gl.xr) != null && t.isPresenting || !a.internal.active || a.frameloop === "never" || (e > 1 ? a.internal.frames = Math.min(60, a.internal.frames + e) : Zp ? a.internal.frames = 2 : a.internal.frames = 1, Ju || (Ju = !0, requestAnimationFrame(US)));
}
function J_(a, e = !0, t, n) {
  if (e && Sl("before", a), t) jp(a, t, n);
  else for (const i of ar.values()) jp(a, i.store.getState());
  e && Sl("after", a);
}
const Qd = {
  onClick: ["click", !1],
  onContextMenu: ["contextmenu", !1],
  onDoubleClick: ["dblclick", !1],
  onWheel: ["wheel", !0],
  onPointerDown: ["pointerdown", !0],
  onPointerUp: ["pointerup", !0],
  onPointerLeave: ["pointerleave", !0],
  onPointerMove: ["pointermove", !0],
  onPointerCancel: ["pointercancel", !0],
  onLostPointerCapture: ["lostpointercapture", !0]
};
function CL(a) {
  const {
    handlePointer: e
  } = cL(a);
  return {
    priority: 1,
    enabled: !0,
    compute(t, n, i) {
      n.pointer.set(t.offsetX / n.size.width * 2 - 1, -(t.offsetY / n.size.height) * 2 + 1), n.raycaster.setFromCamera(n.pointer, n.camera);
    },
    connected: void 0,
    handlers: Object.keys(Qd).reduce((t, n) => ({
      ...t,
      [n]: e(n)
    }), {}),
    update: () => {
      var t;
      const {
        events: n,
        internal: i
      } = a.getState();
      (t = i.lastEvent) != null && t.current && n.handlers && n.handlers.onPointerMove(i.lastEvent.current);
    },
    connect: (t) => {
      const {
        set: n,
        events: i
      } = a.getState();
      if (i.disconnect == null || i.disconnect(), n((o) => ({
        events: {
          ...o.events,
          connected: t
        }
      })), i.handlers)
        for (const o in i.handlers) {
          const l = i.handlers[o], [c, h] = Qd[o];
          t.addEventListener(c, l, {
            passive: h
          });
        }
    },
    disconnect: () => {
      const {
        set: t,
        events: n
      } = a.getState();
      if (n.connected) {
        if (n.handlers)
          for (const i in n.handlers) {
            const o = n.handlers[i], [l] = Qd[i];
            n.connected.removeEventListener(l, o);
          }
        t((i) => ({
          events: {
            ...i.events,
            connected: void 0
          }
        }));
      }
    }
  };
}
function Q_(a, e) {
  let t;
  return (...n) => {
    window.clearTimeout(t), t = window.setTimeout(() => a(...n), e);
  };
}
function LL({ debounce: a, scroll: e, polyfill: t, offsetSize: n } = { debounce: 0, scroll: !1, offsetSize: !1 }) {
  const i = t || (typeof window > "u" ? class {
  } : window.ResizeObserver);
  if (!i) throw new Error("This browser does not support ResizeObserver out of the box. See: https://github.com/react-spring/react-use-measure/#resize-observer-polyfills");
  const [o, l] = Jp({ left: 0, top: 0, width: 0, height: 0, bottom: 0, right: 0, x: 0, y: 0 }), c = ep({ element: null, scrollContainers: null, resizeObserver: null, lastBounds: o, orientationHandler: null }), h = a ? typeof a == "number" ? a : a.scroll : null, f = a ? typeof a == "number" ? a : a.resize : null, p = ep(!1);
  Ja(() => (p.current = !0, () => void (p.current = !1)));
  const [m, g, v] = ty(() => {
    const y = () => {
      if (!c.current.element) return;
      const { left: T, top: b, width: A, height: N, bottom: R, right: P, x: H, y: w } = c.current.element.getBoundingClientRect(), C = { left: T, top: b, width: A, height: N, bottom: R, right: P, x: H, y: w };
      c.current.element instanceof HTMLElement && n && (C.height = c.current.element.offsetHeight, C.width = c.current.element.offsetWidth), Object.freeze(C), p.current && !PL(c.current.lastBounds, C) && l(c.current.lastBounds = C);
    };
    return [y, f ? Q_(y, f) : y, h ? Q_(y, h) : y];
  }, [l, n, h, f]);
  function x() {
    c.current.scrollContainers && (c.current.scrollContainers.forEach((y) => y.removeEventListener("scroll", v, !0)), c.current.scrollContainers = null), c.current.resizeObserver && (c.current.resizeObserver.disconnect(), c.current.resizeObserver = null), c.current.orientationHandler && ("orientation" in screen && "removeEventListener" in screen.orientation ? screen.orientation.removeEventListener("change", c.current.orientationHandler) : "onorientationchange" in window && window.removeEventListener("orientationchange", c.current.orientationHandler));
  }
  function E() {
    c.current.element && (c.current.resizeObserver = new i(v), c.current.resizeObserver.observe(c.current.element), e && c.current.scrollContainers && c.current.scrollContainers.forEach((y) => y.addEventListener("scroll", v, { capture: !0, passive: !0 })), c.current.orientationHandler = () => {
      v();
    }, "orientation" in screen && "addEventListener" in screen.orientation ? screen.orientation.addEventListener("change", c.current.orientationHandler) : "onorientationchange" in window && window.addEventListener("orientationchange", c.current.orientationHandler));
  }
  const S = (y) => {
    !y || y === c.current.element || (x(), c.current.element = y, c.current.scrollContainers = NS(y), E());
  };
  return NL(v, !!e), UL(g), Ja(() => {
    x(), E();
  }, [e, v, g]), Ja(() => x, []), [S, o, m];
}
function UL(a) {
  Ja(() => {
    const e = a;
    return window.addEventListener("resize", e), () => void window.removeEventListener("resize", e);
  }, [a]);
}
function NL(a, e) {
  Ja(() => {
    if (e) {
      const t = a;
      return window.addEventListener("scroll", t, { capture: !0, passive: !0 }), () => void window.removeEventListener("scroll", t, !0);
    }
  }, [a, e]);
}
function NS(a) {
  const e = [];
  if (!a || a === document.body) return e;
  const { overflow: t, overflowX: n, overflowY: i } = window.getComputedStyle(a);
  return [t, n, i].some((o) => o === "auto" || o === "scroll") && e.push(a), [...e, ...NS(a.parentElement)];
}
const DL = ["x", "y", "top", "bottom", "left", "right", "width", "height"], PL = (a, e) => DL.every((t) => a[t] === e[t]);
function OL({
  ref: a,
  children: e,
  fallback: t,
  resize: n,
  style: i,
  gl: o,
  events: l = CL,
  eventSource: c,
  eventPrefix: h,
  shadows: f,
  linear: p,
  flat: m,
  legacy: g,
  orthographic: v,
  frameloop: x,
  dpr: E,
  performance: S,
  raycaster: y,
  camera: T,
  scene: b,
  onPointerMissed: A,
  onCreated: N,
  ...R
}) {
  ct.useMemo(() => gL(C3), []);
  const P = Q3(), [H, w] = LL({
    scroll: !0,
    debounce: {
      scroll: 50,
      resize: 0
    },
    ...n
  }), C = ct.useRef(null), X = ct.useRef(null);
  ct.useImperativeHandle(a, () => C.current);
  const ne = xS(A), [ae, z] = ct.useState(!1), [q, W] = ct.useState(!1);
  if (ae) throw ae;
  if (q) throw q;
  const Q = ct.useRef(null);
  $l(() => {
    const K = C.current;
    if (w.width > 0 && w.height > 0 && K) {
      Q.current || (Q.current = bL(K));
      async function le() {
        await Q.current.configure({
          gl: o,
          scene: b,
          events: l,
          shadows: f,
          linear: p,
          flat: m,
          legacy: g,
          orthographic: v,
          frameloop: x,
          dpr: E,
          performance: S,
          raycaster: y,
          camera: T,
          size: w,
          // Pass mutable reference to onPointerMissed so it's free to update
          onPointerMissed: (...oe) => ne.current == null ? void 0 : ne.current(...oe),
          onCreated: (oe) => {
            oe.events.connect == null || oe.events.connect(c ? K3(c) ? c.current : c : X.current), h && oe.setEvents({
              compute: (ge, ee) => {
                const ce = ge[h + "X"], be = ge[h + "Y"];
                ee.pointer.set(ce / ee.size.width * 2 - 1, -(be / ee.size.height) * 2 + 1), ee.raycaster.setFromCamera(ee.pointer, ee.camera);
              }
            }), N == null || N(oe);
          }
        }), Q.current.render(/* @__PURE__ */ pt.jsx(P, {
          children: /* @__PURE__ */ pt.jsx(eL, {
            set: W,
            children: /* @__PURE__ */ pt.jsx(ct.Suspense, {
              fallback: /* @__PURE__ */ pt.jsx($3, {
                set: z
              }),
              children: e ?? null
            })
          })
        }));
      }
      le();
    }
  }), ct.useEffect(() => {
    const K = C.current;
    if (K) return () => LS(K);
  }, []);
  const Z = c ? "none" : "auto";
  return /* @__PURE__ */ pt.jsx("div", {
    ref: X,
    style: {
      position: "relative",
      width: "100%",
      height: "100%",
      overflow: "hidden",
      pointerEvents: Z,
      ...i
    },
    ...R,
    children: /* @__PURE__ */ pt.jsx("div", {
      ref: H,
      style: {
        width: "100%",
        height: "100%"
      },
      children: /* @__PURE__ */ pt.jsx("canvas", {
        ref: C,
        style: {
          display: "block"
        },
        children: t
      })
    })
  });
}
function IL(a) {
  return /* @__PURE__ */ pt.jsx(gS, {
    children: /* @__PURE__ */ pt.jsx(OL, {
      ...a
    })
  });
}
var zL = new bo(2, 2), BL = (
  /* glsl */
  `
varying vec2 vUv;

void main() {
    vUv = uv;
    gl_Position = vec4(position, 1.0);
}
`
);
function HL({
  fragmentShader: a,
  RT_RESOLUTION: e = 1024,
  SIDE: t = Ai
}) {
  const n = ty(() => new Gi({
    vertexShader: BL,
    fragmentShader: a,
    side: t
  }), [a, t]);
  Ja(() => () => n.dispose(), [n]);
  const { gl: i } = ys(), [o, l] = Jp(null);
  return Ja(() => {
    const c = new wi(e, e), h = new hh(), f = new pn(zL, n);
    h.add(f);
    const p = new Ts(-1, 1, 1, -1, 0, 1);
    return i.setRenderTarget(c), i.render(h, p), l(c.texture), i.setRenderTarget(null), () => {
      c.dispose();
    };
  }, [i, n, e]), o ? /* @__PURE__ */ pt.jsx("meshBasicMaterial", { map: o, side: t }, "baked") : /* @__PURE__ */ pt.jsx("meshBasicMaterial", { color: 255, side: t }, "placeholder");
}
var FL = HL;
function VL({
  color_1: a = [0.2, 0.4, 0.9],
  color_2: e = [0.95, 0.95, 1],
  color_3: t = [0.35, 0.35, 0.35]
} = {}) {
  const n = ([h, f, p]) => `vec3(${h}, ${f}, ${p})`, i = n(a), o = n(e), l = n(t), c = (
    /* glsl */
    `
varying vec2 vUv;

void main() {
  float y = vUv.y;
  vec3 color;

  if (y > 0.75) {
    // Upper blue sky
    color = ${i};
  } else if (y > 0.55) {
    // Blend from blue to white near horizon
    float t = (y - 0.55) / (0.75 - 0.55);
    color = mix(${o}, ${i}, t);
  } else if (y > 0.5) {
    // Fade from white to grey just below horizon
    float t = (y - 0.5) / (0.05);
    color = mix(${l}, ${o}, t);
  } else {
    // Solid grey ground color
    color = ${l};
  }

  gl_FragColor = vec4(color, 1.0);
}
`
  );
  return /* @__PURE__ */ pt.jsxs("mesh", { scale: [100, 100, 100], children: [
    /* @__PURE__ */ pt.jsx("sphereGeometry", { args: [1, 32, 32] }),
    /* @__PURE__ */ pt.jsx(
      FL,
      {
        fragmentShader: c,
        RT_RESOLUTION: 1024,
        SIDE: Ai
      }
    )
  ] });
}
var GL = VL;
function Qu() {
  return Qu = Object.assign ? Object.assign.bind() : function(a) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var n in t) ({}).hasOwnProperty.call(t, n) && (a[n] = t[n]);
    }
    return a;
  }, Qu.apply(null, arguments);
}
var WL = Object.defineProperty, XL = (a, e, t) => e in a ? WL(a, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : a[e] = t, kL = (a, e, t) => (XL(a, e + "", t), t);
class qL {
  constructor() {
    kL(this, "_listeners");
  }
  /**
   * Adds a listener to an event type.
   * @param type The type of event to listen to.
   * @param listener The function that gets called when the event is fired.
   */
  addEventListener(e, t) {
    this._listeners === void 0 && (this._listeners = {});
    const n = this._listeners;
    n[e] === void 0 && (n[e] = []), n[e].indexOf(t) === -1 && n[e].push(t);
  }
  /**
      * Checks if listener is added to an event type.
      * @param type The type of event to listen to.
      * @param listener The function that gets called when the event is fired.
      */
  hasEventListener(e, t) {
    if (this._listeners === void 0)
      return !1;
    const n = this._listeners;
    return n[e] !== void 0 && n[e].indexOf(t) !== -1;
  }
  /**
      * Removes a listener from an event type.
      * @param type The type of the listener that gets removed.
      * @param listener The listener function that gets removed.
      */
  removeEventListener(e, t) {
    if (this._listeners === void 0)
      return;
    const i = this._listeners[e];
    if (i !== void 0) {
      const o = i.indexOf(t);
      o !== -1 && i.splice(o, 1);
    }
  }
  /**
      * Fire an event type.
      * @param event The event that gets fired.
      */
  dispatchEvent(e) {
    if (this._listeners === void 0)
      return;
    const n = this._listeners[e.type];
    if (n !== void 0) {
      e.target = this;
      const i = n.slice(0);
      for (let o = 0, l = i.length; o < l; o++)
        i[o].call(this, e);
      e.target = null;
    }
  }
}
var YL = Object.defineProperty, jL = (a, e, t) => e in a ? YL(a, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : a[e] = t, tt = (a, e, t) => (jL(a, typeof e != "symbol" ? e + "" : e, t), t);
const Uu = /* @__PURE__ */ new rr(), $_ = /* @__PURE__ */ new xs(), ZL = Math.cos(70 * (Math.PI / 180)), ey = (a, e) => (a % e + e) % e;
let KL = class extends qL {
  constructor(e, t) {
    super(), tt(this, "object"), tt(this, "domElement"), tt(this, "enabled", !0), tt(this, "target", new I()), tt(this, "minDistance", 0), tt(this, "maxDistance", 1 / 0), tt(this, "minZoom", 0), tt(this, "maxZoom", 1 / 0), tt(this, "minPolarAngle", 0), tt(this, "maxPolarAngle", Math.PI), tt(this, "minAzimuthAngle", -1 / 0), tt(this, "maxAzimuthAngle", 1 / 0), tt(this, "enableDamping", !1), tt(this, "dampingFactor", 0.05), tt(this, "enableZoom", !0), tt(this, "zoomSpeed", 1), tt(this, "enableRotate", !0), tt(this, "rotateSpeed", 1), tt(this, "enablePan", !0), tt(this, "panSpeed", 1), tt(this, "screenSpacePanning", !0), tt(this, "keyPanSpeed", 7), tt(this, "zoomToCursor", !1), tt(this, "autoRotate", !1), tt(this, "autoRotateSpeed", 2), tt(this, "reverseOrbit", !1), tt(this, "reverseHorizontalOrbit", !1), tt(this, "reverseVerticalOrbit", !1), tt(this, "keys", { LEFT: "ArrowLeft", UP: "ArrowUp", RIGHT: "ArrowRight", BOTTOM: "ArrowDown" }), tt(this, "mouseButtons", {
      LEFT: Ga.ROTATE,
      MIDDLE: Ga.DOLLY,
      RIGHT: Ga.PAN
    }), tt(this, "touches", { ONE: Wa.ROTATE, TWO: Wa.DOLLY_PAN }), tt(this, "target0"), tt(this, "position0"), tt(this, "zoom0"), tt(this, "_domElementKeyEvents", null), tt(this, "getPolarAngle"), tt(this, "getAzimuthalAngle"), tt(this, "setPolarAngle"), tt(this, "setAzimuthalAngle"), tt(this, "getDistance"), tt(this, "getZoomScale"), tt(this, "listenToKeyEvents"), tt(this, "stopListenToKeyEvents"), tt(this, "saveState"), tt(this, "reset"), tt(this, "update"), tt(this, "connect"), tt(this, "dispose"), tt(this, "dollyIn"), tt(this, "dollyOut"), tt(this, "getScale"), tt(this, "setScale"), this.object = e, this.domElement = t, this.target0 = this.target.clone(), this.position0 = this.object.position.clone(), this.zoom0 = this.object.zoom, this.getPolarAngle = () => p.phi, this.getAzimuthalAngle = () => p.theta, this.setPolarAngle = (V) => {
      let pe = ey(V, 2 * Math.PI), De = p.phi;
      De < 0 && (De += 2 * Math.PI), pe < 0 && (pe += 2 * Math.PI);
      let Pe = Math.abs(pe - De);
      2 * Math.PI - Pe < Pe && (pe < De ? pe += 2 * Math.PI : De += 2 * Math.PI), m.phi = pe - De, n.update();
    }, this.setAzimuthalAngle = (V) => {
      let pe = ey(V, 2 * Math.PI), De = p.theta;
      De < 0 && (De += 2 * Math.PI), pe < 0 && (pe += 2 * Math.PI);
      let Pe = Math.abs(pe - De);
      2 * Math.PI - Pe < Pe && (pe < De ? pe += 2 * Math.PI : De += 2 * Math.PI), m.theta = pe - De, n.update();
    }, this.getDistance = () => n.object.position.distanceTo(n.target), this.listenToKeyEvents = (V) => {
      V.addEventListener("keydown", Ze), this._domElementKeyEvents = V;
    }, this.stopListenToKeyEvents = () => {
      this._domElementKeyEvents.removeEventListener("keydown", Ze), this._domElementKeyEvents = null;
    }, this.saveState = () => {
      n.target0.copy(n.target), n.position0.copy(n.object.position), n.zoom0 = n.object.zoom;
    }, this.reset = () => {
      n.target.copy(n.target0), n.object.position.copy(n.position0), n.object.zoom = n.zoom0, n.object.updateProjectionMatrix(), n.dispatchEvent(i), n.update(), h = c.NONE;
    }, this.update = (() => {
      const V = new I(), pe = new I(0, 1, 0), De = new On().setFromUnitVectors(e.up, pe), Pe = De.clone().invert(), xe = new I(), G = new On(), Ae = 2 * Math.PI;
      return function() {
        const $e = n.object.position;
        De.setFromUnitVectors(e.up, pe), Pe.copy(De).invert(), V.copy($e).sub(n.target), V.applyQuaternion(De), p.setFromVector3(V), n.autoRotate && h === c.NONE && z(ne()), n.enableDamping ? (p.theta += m.theta * n.dampingFactor, p.phi += m.phi * n.dampingFactor) : (p.theta += m.theta, p.phi += m.phi);
        let ke = n.minAzimuthAngle, mt = n.maxAzimuthAngle;
        isFinite(ke) && isFinite(mt) && (ke < -Math.PI ? ke += Ae : ke > Math.PI && (ke -= Ae), mt < -Math.PI ? mt += Ae : mt > Math.PI && (mt -= Ae), ke <= mt ? p.theta = Math.max(ke, Math.min(mt, p.theta)) : p.theta = p.theta > (ke + mt) / 2 ? Math.max(ke, p.theta) : Math.min(mt, p.theta)), p.phi = Math.max(n.minPolarAngle, Math.min(n.maxPolarAngle, p.phi)), p.makeSafe(), n.enableDamping === !0 ? n.target.addScaledVector(v, n.dampingFactor) : n.target.add(v), n.zoomToCursor && w || n.object.isOrthographicCamera ? p.radius = ee(p.radius) : p.radius = ee(p.radius * g), V.setFromSpherical(p), V.applyQuaternion(Pe), $e.copy(n.target).add(V), n.object.matrixAutoUpdate || n.object.updateMatrix(), n.object.lookAt(n.target), n.enableDamping === !0 ? (m.theta *= 1 - n.dampingFactor, m.phi *= 1 - n.dampingFactor, v.multiplyScalar(1 - n.dampingFactor)) : (m.set(0, 0, 0), v.set(0, 0, 0));
        let Et = !1;
        if (n.zoomToCursor && w) {
          let Pt = null;
          if (n.object instanceof cn && n.object.isPerspectiveCamera) {
            const Yt = V.length();
            Pt = ee(Yt * g);
            const At = Yt - Pt;
            n.object.position.addScaledVector(P, At), n.object.updateMatrixWorld();
          } else if (n.object.isOrthographicCamera) {
            const Yt = new I(H.x, H.y, 0);
            Yt.unproject(n.object), n.object.zoom = Math.max(n.minZoom, Math.min(n.maxZoom, n.object.zoom / g)), n.object.updateProjectionMatrix(), Et = !0;
            const At = new I(H.x, H.y, 0);
            At.unproject(n.object), n.object.position.sub(At).add(Yt), n.object.updateMatrixWorld(), Pt = V.length();
          } else
            console.warn("WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled."), n.zoomToCursor = !1;
          Pt !== null && (n.screenSpacePanning ? n.target.set(0, 0, -1).transformDirection(n.object.matrix).multiplyScalar(Pt).add(n.object.position) : (Uu.origin.copy(n.object.position), Uu.direction.set(0, 0, -1).transformDirection(n.object.matrix), Math.abs(n.object.up.dot(Uu.direction)) < ZL ? e.lookAt(n.target) : ($_.setFromNormalAndCoplanarPoint(n.object.up, n.target), Uu.intersectPlane($_, n.target))));
        } else n.object instanceof Ts && n.object.isOrthographicCamera && (Et = g !== 1, Et && (n.object.zoom = Math.max(n.minZoom, Math.min(n.maxZoom, n.object.zoom / g)), n.object.updateProjectionMatrix()));
        return g = 1, w = !1, Et || xe.distanceToSquared(n.object.position) > f || 8 * (1 - G.dot(n.object.quaternion)) > f ? (n.dispatchEvent(i), xe.copy(n.object.position), G.copy(n.object.quaternion), Et = !1, !0) : !1;
      };
    })(), this.connect = (V) => {
      n.domElement = V, n.domElement.style.touchAction = "none", n.domElement.addEventListener("contextmenu", Mt), n.domElement.addEventListener("pointerdown", _e), n.domElement.addEventListener("pointercancel", me), n.domElement.addEventListener("wheel", ze);
    }, this.dispose = () => {
      var V, pe, De, Pe, xe, G;
      n.domElement && (n.domElement.style.touchAction = "auto"), (V = n.domElement) == null || V.removeEventListener("contextmenu", Mt), (pe = n.domElement) == null || pe.removeEventListener("pointerdown", _e), (De = n.domElement) == null || De.removeEventListener("pointercancel", me), (Pe = n.domElement) == null || Pe.removeEventListener("wheel", ze), (xe = n.domElement) == null || xe.ownerDocument.removeEventListener("pointermove", ve), (G = n.domElement) == null || G.ownerDocument.removeEventListener("pointerup", me), n._domElementKeyEvents !== null && n._domElementKeyEvents.removeEventListener("keydown", Ze);
    };
    const n = this, i = { type: "change" }, o = { type: "start" }, l = { type: "end" }, c = {
      NONE: -1,
      ROTATE: 0,
      DOLLY: 1,
      PAN: 2,
      TOUCH_ROTATE: 3,
      TOUCH_PAN: 4,
      TOUCH_DOLLY_PAN: 5,
      TOUCH_DOLLY_ROTATE: 6
    };
    let h = c.NONE;
    const f = 1e-6, p = new Xp(), m = new Xp();
    let g = 1;
    const v = new I(), x = new de(), E = new de(), S = new de(), y = new de(), T = new de(), b = new de(), A = new de(), N = new de(), R = new de(), P = new I(), H = new de();
    let w = !1;
    const C = [], X = {};
    function ne() {
      return 2 * Math.PI / 60 / 60 * n.autoRotateSpeed;
    }
    function ae() {
      return Math.pow(0.95, n.zoomSpeed);
    }
    function z(V) {
      n.reverseOrbit || n.reverseHorizontalOrbit ? m.theta += V : m.theta -= V;
    }
    function q(V) {
      n.reverseOrbit || n.reverseVerticalOrbit ? m.phi += V : m.phi -= V;
    }
    const W = (() => {
      const V = new I();
      return function(De, Pe) {
        V.setFromMatrixColumn(Pe, 0), V.multiplyScalar(-De), v.add(V);
      };
    })(), Q = (() => {
      const V = new I();
      return function(De, Pe) {
        n.screenSpacePanning === !0 ? V.setFromMatrixColumn(Pe, 1) : (V.setFromMatrixColumn(Pe, 0), V.crossVectors(n.object.up, V)), V.multiplyScalar(De), v.add(V);
      };
    })(), Z = (() => {
      const V = new I();
      return function(De, Pe) {
        const xe = n.domElement;
        if (xe && n.object instanceof cn && n.object.isPerspectiveCamera) {
          const G = n.object.position;
          V.copy(G).sub(n.target);
          let Ae = V.length();
          Ae *= Math.tan(n.object.fov / 2 * Math.PI / 180), W(2 * De * Ae / xe.clientHeight, n.object.matrix), Q(2 * Pe * Ae / xe.clientHeight, n.object.matrix);
        } else xe && n.object instanceof Ts && n.object.isOrthographicCamera ? (W(
          De * (n.object.right - n.object.left) / n.object.zoom / xe.clientWidth,
          n.object.matrix
        ), Q(
          Pe * (n.object.top - n.object.bottom) / n.object.zoom / xe.clientHeight,
          n.object.matrix
        )) : (console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."), n.enablePan = !1);
      };
    })();
    function K(V) {
      n.object instanceof cn && n.object.isPerspectiveCamera || n.object instanceof Ts && n.object.isOrthographicCamera ? g = V : (console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."), n.enableZoom = !1);
    }
    function le(V) {
      K(g / V);
    }
    function oe(V) {
      K(g * V);
    }
    function ge(V) {
      if (!n.zoomToCursor || !n.domElement)
        return;
      w = !0;
      const pe = n.domElement.getBoundingClientRect(), De = V.clientX - pe.left, Pe = V.clientY - pe.top, xe = pe.width, G = pe.height;
      H.x = De / xe * 2 - 1, H.y = -(Pe / G) * 2 + 1, P.set(H.x, H.y, 1).unproject(n.object).sub(n.object.position).normalize();
    }
    function ee(V) {
      return Math.max(n.minDistance, Math.min(n.maxDistance, V));
    }
    function ce(V) {
      x.set(V.clientX, V.clientY);
    }
    function be(V) {
      ge(V), A.set(V.clientX, V.clientY);
    }
    function Ve(V) {
      y.set(V.clientX, V.clientY);
    }
    function Ie(V) {
      E.set(V.clientX, V.clientY), S.subVectors(E, x).multiplyScalar(n.rotateSpeed);
      const pe = n.domElement;
      pe && (z(2 * Math.PI * S.x / pe.clientHeight), q(2 * Math.PI * S.y / pe.clientHeight)), x.copy(E), n.update();
    }
    function je(V) {
      N.set(V.clientX, V.clientY), R.subVectors(N, A), R.y > 0 ? le(ae()) : R.y < 0 && oe(ae()), A.copy(N), n.update();
    }
    function st(V) {
      T.set(V.clientX, V.clientY), b.subVectors(T, y).multiplyScalar(n.panSpeed), Z(b.x, b.y), y.copy(T), n.update();
    }
    function qe(V) {
      ge(V), V.deltaY < 0 ? oe(ae()) : V.deltaY > 0 && le(ae()), n.update();
    }
    function nt(V) {
      let pe = !1;
      switch (V.code) {
        case n.keys.UP:
          Z(0, n.keyPanSpeed), pe = !0;
          break;
        case n.keys.BOTTOM:
          Z(0, -n.keyPanSpeed), pe = !0;
          break;
        case n.keys.LEFT:
          Z(n.keyPanSpeed, 0), pe = !0;
          break;
        case n.keys.RIGHT:
          Z(-n.keyPanSpeed, 0), pe = !0;
          break;
      }
      pe && (V.preventDefault(), n.update());
    }
    function F() {
      if (C.length == 1)
        x.set(C[0].pageX, C[0].pageY);
      else {
        const V = 0.5 * (C[0].pageX + C[1].pageX), pe = 0.5 * (C[0].pageY + C[1].pageY);
        x.set(V, pe);
      }
    }
    function Ee() {
      if (C.length == 1)
        y.set(C[0].pageX, C[0].pageY);
      else {
        const V = 0.5 * (C[0].pageX + C[1].pageX), pe = 0.5 * (C[0].pageY + C[1].pageY);
        y.set(V, pe);
      }
    }
    function ue() {
      const V = C[0].pageX - C[1].pageX, pe = C[0].pageY - C[1].pageY, De = Math.sqrt(V * V + pe * pe);
      A.set(0, De);
    }
    function Se() {
      n.enableZoom && ue(), n.enablePan && Ee();
    }
    function he() {
      n.enableZoom && ue(), n.enableRotate && F();
    }
    function Ge(V) {
      if (C.length == 1)
        E.set(V.pageX, V.pageY);
      else {
        const De = Be(V), Pe = 0.5 * (V.pageX + De.x), xe = 0.5 * (V.pageY + De.y);
        E.set(Pe, xe);
      }
      S.subVectors(E, x).multiplyScalar(n.rotateSpeed);
      const pe = n.domElement;
      pe && (z(2 * Math.PI * S.x / pe.clientHeight), q(2 * Math.PI * S.y / pe.clientHeight)), x.copy(E);
    }
    function Ne(V) {
      if (C.length == 1)
        T.set(V.pageX, V.pageY);
      else {
        const pe = Be(V), De = 0.5 * (V.pageX + pe.x), Pe = 0.5 * (V.pageY + pe.y);
        T.set(De, Pe);
      }
      b.subVectors(T, y).multiplyScalar(n.panSpeed), Z(b.x, b.y), y.copy(T);
    }
    function D(V) {
      const pe = Be(V), De = V.pageX - pe.x, Pe = V.pageY - pe.y, xe = Math.sqrt(De * De + Pe * Pe);
      N.set(0, xe), R.set(0, Math.pow(N.y / A.y, n.zoomSpeed)), le(R.y), A.copy(N);
    }
    function L(V) {
      n.enableZoom && D(V), n.enablePan && Ne(V);
    }
    function j(V) {
      n.enableZoom && D(V), n.enableRotate && Ge(V);
    }
    function _e(V) {
      var pe, De;
      n.enabled !== !1 && (C.length === 0 && ((pe = n.domElement) == null || pe.ownerDocument.addEventListener("pointermove", ve), (De = n.domElement) == null || De.ownerDocument.addEventListener("pointerup", me)), ht(V), V.pointerType === "touch" ? ot(V) : We(V));
    }
    function ve(V) {
      n.enabled !== !1 && (V.pointerType === "touch" ? ye(V) : Le(V));
    }
    function me(V) {
      var pe, De, Pe;
      Je(V), C.length === 0 && ((pe = n.domElement) == null || pe.releasePointerCapture(V.pointerId), (De = n.domElement) == null || De.ownerDocument.removeEventListener("pointermove", ve), (Pe = n.domElement) == null || Pe.ownerDocument.removeEventListener("pointerup", me)), n.dispatchEvent(l), h = c.NONE;
    }
    function We(V) {
      let pe;
      switch (V.button) {
        case 0:
          pe = n.mouseButtons.LEFT;
          break;
        case 1:
          pe = n.mouseButtons.MIDDLE;
          break;
        case 2:
          pe = n.mouseButtons.RIGHT;
          break;
        default:
          pe = -1;
      }
      switch (pe) {
        case Ga.DOLLY:
          if (n.enableZoom === !1)
            return;
          be(V), h = c.DOLLY;
          break;
        case Ga.ROTATE:
          if (V.ctrlKey || V.metaKey || V.shiftKey) {
            if (n.enablePan === !1)
              return;
            Ve(V), h = c.PAN;
          } else {
            if (n.enableRotate === !1)
              return;
            ce(V), h = c.ROTATE;
          }
          break;
        case Ga.PAN:
          if (V.ctrlKey || V.metaKey || V.shiftKey) {
            if (n.enableRotate === !1)
              return;
            ce(V), h = c.ROTATE;
          } else {
            if (n.enablePan === !1)
              return;
            Ve(V), h = c.PAN;
          }
          break;
        default:
          h = c.NONE;
      }
      h !== c.NONE && n.dispatchEvent(o);
    }
    function Le(V) {
      if (n.enabled !== !1)
        switch (h) {
          case c.ROTATE:
            if (n.enableRotate === !1)
              return;
            Ie(V);
            break;
          case c.DOLLY:
            if (n.enableZoom === !1)
              return;
            je(V);
            break;
          case c.PAN:
            if (n.enablePan === !1)
              return;
            st(V);
            break;
        }
    }
    function ze(V) {
      n.enabled === !1 || n.enableZoom === !1 || h !== c.NONE && h !== c.ROTATE || (V.preventDefault(), n.dispatchEvent(o), qe(V), n.dispatchEvent(l));
    }
    function Ze(V) {
      n.enabled === !1 || n.enablePan === !1 || nt(V);
    }
    function ot(V) {
      switch (Xe(V), C.length) {
        case 1:
          switch (n.touches.ONE) {
            case Wa.ROTATE:
              if (n.enableRotate === !1)
                return;
              F(), h = c.TOUCH_ROTATE;
              break;
            case Wa.PAN:
              if (n.enablePan === !1)
                return;
              Ee(), h = c.TOUCH_PAN;
              break;
            default:
              h = c.NONE;
          }
          break;
        case 2:
          switch (n.touches.TWO) {
            case Wa.DOLLY_PAN:
              if (n.enableZoom === !1 && n.enablePan === !1)
                return;
              Se(), h = c.TOUCH_DOLLY_PAN;
              break;
            case Wa.DOLLY_ROTATE:
              if (n.enableZoom === !1 && n.enableRotate === !1)
                return;
              he(), h = c.TOUCH_DOLLY_ROTATE;
              break;
            default:
              h = c.NONE;
          }
          break;
        default:
          h = c.NONE;
      }
      h !== c.NONE && n.dispatchEvent(o);
    }
    function ye(V) {
      switch (Xe(V), h) {
        case c.TOUCH_ROTATE:
          if (n.enableRotate === !1)
            return;
          Ge(V), n.update();
          break;
        case c.TOUCH_PAN:
          if (n.enablePan === !1)
            return;
          Ne(V), n.update();
          break;
        case c.TOUCH_DOLLY_PAN:
          if (n.enableZoom === !1 && n.enablePan === !1)
            return;
          L(V), n.update();
          break;
        case c.TOUCH_DOLLY_ROTATE:
          if (n.enableZoom === !1 && n.enableRotate === !1)
            return;
          j(V), n.update();
          break;
        default:
          h = c.NONE;
      }
    }
    function Mt(V) {
      n.enabled !== !1 && V.preventDefault();
    }
    function ht(V) {
      C.push(V);
    }
    function Je(V) {
      delete X[V.pointerId];
      for (let pe = 0; pe < C.length; pe++)
        if (C[pe].pointerId == V.pointerId) {
          C.splice(pe, 1);
          return;
        }
    }
    function Xe(V) {
      let pe = X[V.pointerId];
      pe === void 0 && (pe = new de(), X[V.pointerId] = pe), pe.set(V.pageX, V.pageY);
    }
    function Be(V) {
      const pe = V.pointerId === C[0].pointerId ? C[1] : C[0];
      return X[pe.pointerId];
    }
    this.dollyIn = (V = ae()) => {
      oe(V), n.update();
    }, this.dollyOut = (V = ae()) => {
      le(V), n.update();
    }, this.getScale = () => g, this.setScale = (V) => {
      K(V), n.update();
    }, this.getZoomScale = () => ae(), t !== void 0 && this.connect(t), this.update();
  }
};
const JL = /* @__PURE__ */ ct.forwardRef(({
  makeDefault: a,
  camera: e,
  regress: t,
  domElement: n,
  enableDamping: i = !0,
  keyEvents: o = !1,
  onChange: l,
  onStart: c,
  onEnd: h,
  ...f
}, p) => {
  const m = ys((R) => R.invalidate), g = ys((R) => R.camera), v = ys((R) => R.gl), x = ys((R) => R.events), E = ys((R) => R.setEvents), S = ys((R) => R.set), y = ys((R) => R.get), T = ys((R) => R.performance), b = e || g, A = n || x.connected || v.domElement, N = ct.useMemo(() => new KL(b), [b]);
  return hL(() => {
    N.enabled && N.update();
  }, -1), ct.useEffect(() => (o && N.connect(o === !0 ? A : o), N.connect(A), () => void N.dispose()), [o, A, t, N, m]), ct.useEffect(() => {
    const R = (w) => {
      m(), t && T.regress(), l && l(w);
    }, P = (w) => {
      c && c(w);
    }, H = (w) => {
      h && h(w);
    };
    return N.addEventListener("change", R), N.addEventListener("start", P), N.addEventListener("end", H), () => {
      N.removeEventListener("start", P), N.removeEventListener("end", H), N.removeEventListener("change", R);
    };
  }, [l, c, h, N, m, E]), ct.useEffect(() => {
    if (a) {
      const R = y().controls;
      return S({
        controls: N
      }), () => S({
        controls: R
      });
    }
  }, [a, N]), /* @__PURE__ */ ct.createElement("primitive", Qu({
    ref: p,
    object: N,
    enableDamping: i
  }, f));
});
function Xm(a, e) {
  const t = a + "Geometry";
  return /* @__PURE__ */ ct.forwardRef(({
    args: n,
    children: i,
    ...o
  }, l) => {
    const c = ct.useRef(null);
    return ct.useImperativeHandle(l, () => c.current), ct.useLayoutEffect(() => void (e == null ? void 0 : e(c.current))), /* @__PURE__ */ ct.createElement("mesh", Qu({
      ref: c
    }, o), /* @__PURE__ */ ct.createElement(t, {
      attach: "geometry",
      args: n
    }), i);
  });
}
const $d = /* @__PURE__ */ Xm("box"), QL = /* @__PURE__ */ Xm("sphere"), $L = /* @__PURE__ */ Xm("plane");
function Nu({ position: a = [0, 0, 0], color: e = "orange" }) {
  const t = ep(null), [n, i] = Jp(!1);
  return /* @__PURE__ */ pt.jsxs("group", { position: a, children: [
    /* @__PURE__ */ pt.jsx(
      QL,
      {
        ref: t,
        args: [0.8, 16, 16],
        position: [0, 0, 0],
        onPointerOver: () => i(!0),
        onPointerOut: () => i(!1),
        onClick: () => {
          t.current && (t.current.rotation.y += Math.PI / 4);
        },
        children: /* @__PURE__ */ pt.jsx("meshStandardMaterial", { color: n ? "hotpink" : e })
      }
    ),
    /* @__PURE__ */ pt.jsx($d, { args: [0.2, 0.4, 0.1], position: [-0.3, 0.6, 0.3], children: /* @__PURE__ */ pt.jsx("meshStandardMaterial", { color: e }) }),
    /* @__PURE__ */ pt.jsx($d, { args: [0.2, 0.4, 0.1], position: [0.3, 0.6, 0.3], children: /* @__PURE__ */ pt.jsx("meshStandardMaterial", { color: e }) }),
    /* @__PURE__ */ pt.jsx($d, { args: [0.1, 0.1, 1], position: [0, 0.2, -0.8], rotation: [0.3, 0, 0], children: /* @__PURE__ */ pt.jsx("meshStandardMaterial", { color: e }) })
  ] });
}
function eU({ scene: a = "playground" }) {
  return /* @__PURE__ */ pt.jsxs("group", { rotation: [Math.PI / 6, Math.PI / 8, 0], position: [1.6, 0, 0], children: [
    /* @__PURE__ */ pt.jsx("ambientLight", { intensity: 0.7 }),
    /* @__PURE__ */ pt.jsx("directionalLight", { position: [-5, 5, 5], intensity: 1.5 }),
    /* @__PURE__ */ pt.jsx($L, { args: [10, 10], rotation: [-Math.PI / 2, 0, 0], position: [0, -2, 0], children: /* @__PURE__ */ pt.jsx("meshBasicMaterial", { color: "#ecc1ff" }) }),
    /* @__PURE__ */ pt.jsx(Nu, { position: [0, 0, 0.5], color: "orange" }),
    /* @__PURE__ */ pt.jsx(Nu, { position: [2, 0, -1], color: "#ecc1ff" }),
    /* @__PURE__ */ pt.jsx(Nu, { position: [-2, 0, 1], color: "white" }),
    /* @__PURE__ */ pt.jsx(Nu, { position: [0, 0, -3], color: "gray" })
  ] });
}
function oU({ className: a }) {
  return /* @__PURE__ */ pt.jsx("div", { style: { position: "relative" }, children: /* @__PURE__ */ pt.jsxs(
    IL,
    {
      className: a,
      onCreated: (e) => {
        e.gl.outputColorSpace = nn, e.gl.toneMapping = Qp;
      },
      children: [
        /* @__PURE__ */ pt.jsx("color", { attach: "background", args: ["#ffffff"] }),
        /* @__PURE__ */ pt.jsx(
          GL,
          {
            color_1: [0.6, 0.4, 0.9],
            color_2: [0.95, 0.95, 1],
            color_3: [0.35, 0.35, 0.35]
          }
        ),
        /* @__PURE__ */ pt.jsx(eU, {}),
        /* @__PURE__ */ pt.jsx(JL, {})
      ]
    }
  ) });
}
export {
  oU as A,
  pt as j
};
